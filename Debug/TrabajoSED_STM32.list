
TrabajoSED_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007644  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00020968  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802814c  0802814c  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802814c  0802814c  0003814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028154  08028154  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028154  08028154  00038154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028158  08028158  00038158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0802815c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000090  080281ec  00040090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080281ec  00040250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010feb  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a8  00000000  00000000  000510ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00053658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018da7  00000000  00000000  000546f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001490e  00000000  00000000  0006d497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a0359  00000000  00000000  00081da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001220fe  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000f68  00000000  00000000  00122150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a14  00000000  00000000  001230b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077cc 	.word	0x080077cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080077cc 	.word	0x080077cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f003 f8a2 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f82c 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fa6c 	bl	8000a6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000594:	f000 f894 	bl	80006c0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000598:	f000 f9f8 	bl	800098c <MX_TIM4_Init>
  MX_SPI1_Init();
 800059c:	f000 f970 	bl	8000880 <MX_SPI1_Init>
  MX_RTC_Init();
 80005a0:	f000 f8e0 	bl	8000764 <MX_RTC_Init>
  MX_TIM3_Init();
 80005a4:	f000 f9a4 	bl	80008f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80005a8:	2029      	movs	r0, #41	; 0x29
 80005aa:	f003 fe42 	bl	8004232 <HAL_NVIC_DisableIRQ>
  HAL_TIM_Base_Start_IT(&htim3);
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x5c>)
 80005b0:	f005 fcec 	bl	8005f8c <HAL_TIM_Base_Start_IT>
  Led_Init();
 80005b4:	f000 fafc 	bl	8000bb0 <Led_Init>
  ST7735_Init();
 80005b8:	f002 fc62 	bl	8002e80 <ST7735_Init>
  printMenu_Estado();
 80005bc:	f001 f8e0 	bl	8001780 <printMenu_Estado>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  humedad = sensorHumedad();
 80005c0:	f000 fb34 	bl	8000c2c <sensorHumedad>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <main+0x60>)
 80005ca:	701a      	strb	r2, [r3, #0]

	  modoHandler();
 80005cc:	f000 fc68 	bl	8000ea0 <modoHandler>
	  menuHandler();
 80005d0:	f000 fc8a 	bl	8000ee8 <menuHandler>

	  LED_ON_OFF(humedad);
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <main+0x60>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fb7f 	bl	8000cdc <LED_ON_OFF>
	  humedad = sensorHumedad();
 80005de:	e7ef      	b.n	80005c0 <main+0x3c>
 80005e0:	20000184 	.word	0x20000184
 80005e4:	20000217 	.word	0x20000217

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fc6c 	bl	8006ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <SystemClock_Config+0xd4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000644:	230a      	movs	r3, #10
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000660:	2360      	movs	r3, #96	; 0x60
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f003 ffc7 	bl	8004604 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f002 fb1c 	bl	8002cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fa28 	bl	8004af4 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f002 fb05 	bl	8002cb8 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f003 f86b 	bl	80037fc <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800072c:	f002 fac4 	bl	8002cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000730:	2301      	movs	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f003 fa1f 	bl	8003b84 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f002 fab4 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000c4 	.word	0x200000c4
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b090      	sub	sp, #64	; 0x40
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2228      	movs	r2, #40	; 0x28
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fba5 	bl	8006ed4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_RTC_Init+0x110>)
 800078c:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <MX_RTC_Init+0x114>)
 800078e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_RTC_Init+0x110>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_RTC_Init+0x110>)
 8000798:	227f      	movs	r2, #127	; 0x7f
 800079a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800079c:	4b35      	ldr	r3, [pc, #212]	; (8000874 <MX_RTC_Init+0x110>)
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_RTC_Init+0x110>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <MX_RTC_Init+0x110>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_RTC_Init+0x110>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b4:	482f      	ldr	r0, [pc, #188]	; (8000874 <MX_RTC_Init+0x110>)
 80007b6:	f004 fc79 	bl	80050ac <HAL_RTC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007c0:	f002 fa7a 	bl	8002cb8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	4823      	ldr	r0, [pc, #140]	; (8000874 <MX_RTC_Init+0x110>)
 80007e8:	f004 fcd6 	bl	8005198 <HAL_RTC_SetTime>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80007f2:	f002 fa61 	bl	8002cb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007f6:	2301      	movs	r3, #1
 80007f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80007fc:	2301      	movs	r3, #1
 80007fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800080e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <MX_RTC_Init+0x110>)
 8000818:	f004 fdb6 	bl	8005388 <HAL_RTC_SetDate>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000822:	f002 fa49 	bl	8002cb8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_RTC_Init+0x118>)
 8000840:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_RTC_Init+0x110>)
 800085e:	f004 fe67 	bl	8005530 <HAL_RTC_SetAlarm_IT>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000868:	f002 fa26 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3740      	adds	r7, #64	; 0x40
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000010c 	.word	0x2000010c
 8000878:	40002800 	.word	0x40002800
 800087c:	80000080 	.word	0x80000080

08000880 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_SPI1_Init+0x68>)
 8000886:	4a19      	ldr	r2, [pc, #100]	; (80008ec <MX_SPI1_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x68>)
 800088c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_SPI1_Init+0x68>)
 8000894:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000898:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_SPI1_Init+0x68>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008ce:	220a      	movs	r2, #10
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008d4:	f005 f87b 	bl	80059ce <HAL_SPI_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008de:	f002 f9eb 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000012c 	.word	0x2000012c
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM3_Init+0x94>)
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <MX_TIM3_Init+0x98>)
 8000910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_TIM3_Init+0x94>)
 8000914:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_TIM3_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_TIM3_Init+0x94>)
 8000922:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_TIM3_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_TIM3_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_TIM3_Init+0x94>)
 8000936:	f005 fad9 	bl	8005eec <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000940:	f002 f9ba 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_TIM3_Init+0x94>)
 8000952:	f005 fe47 	bl	80065e4 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800095c:	f002 f9ac 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_TIM3_Init+0x94>)
 800096e:	f006 f9f5 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000978:	f002 f99e 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000184 	.word	0x20000184
 8000988:	40000400 	.word	0x40000400

0800098c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009b0:	4a2d      	ldr	r2, [pc, #180]	; (8000a68 <MX_TIM4_Init+0xdc>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009b6:	f240 623f 	movw	r2, #1599	; 0x63f
 80009ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009d4:	4823      	ldr	r0, [pc, #140]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009d6:	f005 fb3b 	bl	8006050 <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009e0:	f002 f96a 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4619      	mov	r1, r3
 80009f2:	481c      	ldr	r0, [pc, #112]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009f4:	f006 f9b2 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009fe:	f002 f95b 	bl	8002cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	; 0x60
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a1a:	f005 fd21 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a24:	f002 f948 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a30:	f005 fd16 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a3a:	f002 f93d 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2208      	movs	r2, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a46:	f005 fd0b 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000a50:	f002 f932 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a56:	f002 fd3b 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200001cc 	.word	0x200001cc
 8000a68:	40000800 	.word	0x40000800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a45      	ldr	r2, [pc, #276]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b3f      	ldr	r3, [pc, #252]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a3e      	ldr	r2, [pc, #248]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b3c      	ldr	r3, [pc, #240]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2150      	movs	r1, #80	; 0x50
 8000ada:	4832      	ldr	r0, [pc, #200]	; (8000ba4 <MX_GPIO_Init+0x138>)
 8000adc:	f003 fd60 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4830      	ldr	r0, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000ae6:	f003 fd5b 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	482e      	ldr	r0, [pc, #184]	; (8000bac <MX_GPIO_Init+0x140>)
 8000af2:	f003 fd55 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230d      	movs	r3, #13
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4826      	ldr	r0, [pc, #152]	; (8000ba4 <MX_GPIO_Init+0x138>)
 8000b0c:	f003 fbac 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b10:	2350      	movs	r3, #80	; 0x50
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <MX_GPIO_Init+0x138>)
 8000b28:	f003 fb9e 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000b44:	f003 fb90 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_GPIO_Init+0x140>)
 8000b62:	f003 fb81 	bl	8004268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2006      	movs	r0, #6
 8000b6c:	f003 fb37 	bl	80041de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b70:	2006      	movs	r0, #6
 8000b72:	f003 fb50 	bl	8004216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2008      	movs	r0, #8
 8000b7c:	f003 fb2f 	bl	80041de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b80:	2008      	movs	r0, #8
 8000b82:	f003 fb48 	bl	8004216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2009      	movs	r0, #9
 8000b8c:	f003 fb27 	bl	80041de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b90:	2009      	movs	r0, #9
 8000b92:	f003 fb40 	bl	8004216 <HAL_NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020800 	.word	0x40020800
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <Led_Init>:

/* USER CODE BEGIN 4 */
void Led_Init(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <Led_Init+0x20>)
 8000bb8:	f005 fa9a 	bl	80060f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <Led_Init+0x20>)
 8000bc0:	f005 fa96 	bl	80060f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <Led_Init+0x20>)
 8000bc8:	f005 fa92 	bl	80060f0 <HAL_TIM_PWM_Start>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001cc 	.word	0x200001cc

08000bd4 <ControlManual>:

//	Control manual de riego
void ControlManual()
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <ControlAutomatico_Humedad>:
//	Control automático de riego basado en la humedad de la tierra
void ControlAutomatico_Humedad(uint8_t humedad)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if (humedad > humedad_maxima){
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <ControlAutomatico_Humedad+0x30>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d902      	bls.n	8000bfe <ControlAutomatico_Humedad+0x1a>
		CerrarValvula();
 8000bf8:	f000 f864 	bl	8000cc4 <CerrarValvula>
	}
	else if(humedad < humedad_minima){
		AbrirValvula();
	}
}
 8000bfc:	e006      	b.n	8000c0c <ControlAutomatico_Humedad+0x28>
	else if(humedad < humedad_minima){
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <ControlAutomatico_Humedad+0x34>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d201      	bcs.n	8000c0c <ControlAutomatico_Humedad+0x28>
		AbrirValvula();
 8000c08:	f000 f850 	bl	8000cac <AbrirValvula>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000019 	.word	0x20000019
 8000c18:	20000018 	.word	0x20000018

08000c1c <ControlAutomatico_Tiempo>:

//	Control automático de riego basado en tiempo
void ControlAutomatico_Tiempo()
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <sensorHumedad>:

uint8_t sensorHumedad(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t valor_porc_sens = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start(&hadc1);
 8000c36:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <sensorHumedad+0x78>)
 8000c38:	f002 fe24 	bl	8003884 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK)
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <sensorHumedad+0x78>)
 8000c42:	f002 ff06 	bl	8003a52 <HAL_ADC_PollForConversion>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d123      	bne.n	8000c94 <sensorHumedad+0x68>
	{
		uint16_t ADC_val=HAL_ADC_GetValue(&hadc1);
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <sensorHumedad+0x78>)
 8000c4e:	f002 ff8b 	bl	8003b68 <HAL_ADC_GetValue>
 8000c52:	4603      	mov	r3, r0
 8000c54:	80bb      	strh	r3, [r7, #4]
		ADC_val = ADC_val > ADC_HUMEDAD_MAX ? ADC_HUMEDAD_MAX : ADC_val < ADC_HUMEDAD_MIN ? ADC_HUMEDAD_MIN : ADC_val;
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	f240 3252 	movw	r2, #850	; 0x352
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d807      	bhi.n	8000c70 <sensorHumedad+0x44>
 8000c60:	88bb      	ldrh	r3, [r7, #4]
 8000c62:	f240 22df 	movw	r2, #735	; 0x2df
 8000c66:	4293      	cmp	r3, r2
 8000c68:	bf38      	it	cc
 8000c6a:	4613      	movcc	r3, r2
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	e001      	b.n	8000c74 <sensorHumedad+0x48>
 8000c70:	f240 3352 	movw	r3, #850	; 0x352
 8000c74:	80bb      	strh	r3, [r7, #4]
		valor_porc_sens=100-(((ADC_val-ADC_HUMEDAD_MIN)*100)/(ADC_HUMEDAD_MAX-ADC_HUMEDAD_MIN));
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	f2a3 23df 	subw	r3, r3, #735	; 0x2df
 8000c7c:	2264      	movs	r2, #100	; 0x64
 8000c7e:	fb02 f303 	mul.w	r3, r2, r3
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <sensorHumedad+0x7c>)
 8000c84:	fb82 1203 	smull	r1, r2, r2, r3
 8000c88:	1152      	asrs	r2, r2, #5
 8000c8a:	17db      	asrs	r3, r3, #31
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	3364      	adds	r3, #100	; 0x64
 8000c92:	71fb      	strb	r3, [r7, #7]
	}
	HAL_ADC_Stop(&hadc1);
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <sensorHumedad+0x78>)
 8000c96:	f002 fea9 	bl	80039ec <HAL_ADC_Stop>
	return valor_porc_sens;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000c4 	.word	0x200000c4
 8000ca8:	473c1ab7 	.word	0x473c1ab7

08000cac <AbrirValvula>:

void AbrirValvula(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb6:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <AbrirValvula+0x14>)
 8000cb8:	f003 fc72 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40020c00 	.word	0x40020c00

08000cc4 <CerrarValvula>:

void CerrarValvula(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cce:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <CerrarValvula+0x14>)
 8000cd0:	f003 fc66 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <LED_ON_OFF>:
//	Encendido de led
void LED_ON_OFF(uint8_t humedad)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	static uint32_t last_time = 0;
	if(HAL_GetTick() < last_time + 100){
 8000ce6:	f002 fd59 	bl	800379c <HAL_GetTick>
		//return;
	}

	if(humedad < humedad_minima){
 8000cea:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <LED_ON_OFF+0x16c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d21a      	bcs.n	8000d2a <LED_ON_OFF+0x4e>
		uint8_t R = 255-(humedad*128/humedad_minima);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	01db      	lsls	r3, r3, #7
 8000cf8:	4a53      	ldr	r2, [pc, #332]	; (8000e48 <LED_ON_OFF+0x16c>)
 8000cfa:	7812      	ldrb	r2, [r2, #0]
 8000cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	73bb      	strb	r3, [r7, #14]
		uint8_t G = (humedad*127/humedad_minima);
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	01db      	lsls	r3, r3, #7
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <LED_ON_OFF+0x16c>)
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d16:	737b      	strb	r3, [r7, #13]
		uint8_t B = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	733b      	strb	r3, [r7, #12]
		WriteRGB(R, G, B);
 8000d1c:	7b3a      	ldrb	r2, [r7, #12]
 8000d1e:	7b79      	ldrb	r1, [r7, #13]
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f898 	bl	8000e58 <WriteRGB>
 8000d28:	e084      	b.n	8000e34 <LED_ON_OFF+0x158>
	}
	else if(humedad < humedad_media){
 8000d2a:	4b48      	ldr	r3, [pc, #288]	; (8000e4c <LED_ON_OFF+0x170>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	79fa      	ldrb	r2, [r7, #7]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d22b      	bcs.n	8000d8c <LED_ON_OFF+0xb0>
		uint8_t R = 127-((humedad-humedad_minima)*127/(humedad_media-humedad_minima));
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a44      	ldr	r2, [pc, #272]	; (8000e48 <LED_ON_OFF+0x16c>)
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	1a9a      	subs	r2, r3, r2
 8000d42:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <LED_ON_OFF+0x170>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4619      	mov	r1, r3
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <LED_ON_OFF+0x16c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000d58:	747b      	strb	r3, [r7, #17]
		uint8_t G = 127+((humedad-humedad_minima)*128/(humedad_media-humedad_minima));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	4a3a      	ldr	r2, [pc, #232]	; (8000e48 <LED_ON_OFF+0x16c>)
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	01da      	lsls	r2, r3, #7
 8000d64:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <LED_ON_OFF+0x170>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4b37      	ldr	r3, [pc, #220]	; (8000e48 <LED_ON_OFF+0x16c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	337f      	adds	r3, #127	; 0x7f
 8000d78:	743b      	strb	r3, [r7, #16]
		uint8_t B = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
		WriteRGB(R, G, B);
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	7c39      	ldrb	r1, [r7, #16]
 8000d82:	7c7b      	ldrb	r3, [r7, #17]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f867 	bl	8000e58 <WriteRGB>
 8000d8a:	e053      	b.n	8000e34 <LED_ON_OFF+0x158>
	}
	else if(humedad < humedad_maxima){
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <LED_ON_OFF+0x174>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d229      	bcs.n	8000dea <LED_ON_OFF+0x10e>
		uint8_t R = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	753b      	strb	r3, [r7, #20]
		uint8_t G = 127+((humedad_maxima-humedad)*128/(humedad_maxima-humedad_media));
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <LED_ON_OFF+0x174>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	01da      	lsls	r2, r3, #7
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <LED_ON_OFF+0x174>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <LED_ON_OFF+0x170>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	337f      	adds	r3, #127	; 0x7f
 8000dba:	74fb      	strb	r3, [r7, #19]
		uint8_t B = (humedad-humedad_media)*127/(humedad_maxima-humedad_media);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <LED_ON_OFF+0x170>)
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	1a9a      	subs	r2, r3, r2
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	1a9a      	subs	r2, r3, r2
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <LED_ON_OFF+0x174>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <LED_ON_OFF+0x170>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	1acb      	subs	r3, r1, r3
 8000dd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dda:	74bb      	strb	r3, [r7, #18]
		WriteRGB(R, G, B);
 8000ddc:	7cba      	ldrb	r2, [r7, #18]
 8000dde:	7cf9      	ldrb	r1, [r7, #19]
 8000de0:	7d3b      	ldrb	r3, [r7, #20]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f838 	bl	8000e58 <WriteRGB>
 8000de8:	e024      	b.n	8000e34 <LED_ON_OFF+0x158>
	}
	else{
		uint8_t R = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	75fb      	strb	r3, [r7, #23]
		uint8_t G = (100-humedad)*127/(100-humedad_maxima);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000df4:	4613      	mov	r3, r2
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	1a9a      	subs	r2, r3, r2
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <LED_ON_OFF+0x174>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e06:	75bb      	strb	r3, [r7, #22]
		uint8_t B = 127+((humedad-humedad_maxima)*127/(100-humedad_maxima));
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <LED_ON_OFF+0x174>)
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	1a9a      	subs	r2, r3, r2
 8000e10:	4613      	mov	r3, r2
 8000e12:	01db      	lsls	r3, r3, #7
 8000e14:	1a9a      	subs	r2, r3, r2
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <LED_ON_OFF+0x174>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	337f      	adds	r3, #127	; 0x7f
 8000e26:	757b      	strb	r3, [r7, #21]
		WriteRGB(R, G, B);
 8000e28:	7d7a      	ldrb	r2, [r7, #21]
 8000e2a:	7db9      	ldrb	r1, [r7, #22]
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f812 	bl	8000e58 <WriteRGB>
	}

	last_time = HAL_GetTick();
 8000e34:	f002 fcb2 	bl	800379c <HAL_GetTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <LED_ON_OFF+0x178>)
 8000e3c:	6013      	str	r3, [r2, #0]
	//while(HAL_GetTick()-last_time < 100){};
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000018 	.word	0x20000018
 8000e4c:	2000001a 	.word	0x2000001a
 8000e50:	20000019 	.word	0x20000019
 8000e54:	2000022c 	.word	0x2000022c

08000e58 <WriteRGB>:
void WriteRGB(uint8_t R, uint8_t G, uint8_t B){
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	460b      	mov	r3, r1
 8000e64:	71bb      	strb	r3, [r7, #6]
 8000e66:	4613      	mov	r3, r2
 8000e68:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 255-R);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <WriteRGB+0x44>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 255-G);
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <WriteRGB+0x44>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 255-B);
 8000e82:	797b      	ldrb	r3, [r7, #5]
 8000e84:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <WriteRGB+0x44>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200001cc 	.word	0x200001cc

08000ea0 <modoHandler>:


//HANDLERS
void modoHandler(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	switch(modo){
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <modoHandler+0x40>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d00f      	beq.n	8000ecc <modoHandler+0x2c>
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	dc10      	bgt.n	8000ed2 <modoHandler+0x32>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <modoHandler+0x1a>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d003      	beq.n	8000ec0 <modoHandler+0x20>
 8000eb8:	e00b      	b.n	8000ed2 <modoHandler+0x32>
	case Manual:
		ControlManual();
 8000eba:	f7ff fe8b 	bl	8000bd4 <ControlManual>
		break;
 8000ebe:	e00c      	b.n	8000eda <modoHandler+0x3a>
	case Automatico_Humedad:
		ControlAutomatico_Humedad(humedad);
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <modoHandler+0x44>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe8d 	bl	8000be4 <ControlAutomatico_Humedad>
		break;
 8000eca:	e006      	b.n	8000eda <modoHandler+0x3a>
	case Automatico_Tiempo:
		ControlAutomatico_Tiempo();
 8000ecc:	f7ff fea6 	bl	8000c1c <ControlAutomatico_Tiempo>
		break;
 8000ed0:	e003      	b.n	8000eda <modoHandler+0x3a>
	default:
		modo = Manual;
 8000ed2:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <modoHandler+0x40>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
		break;
 8000ed8:	bf00      	nop
	}
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000214 	.word	0x20000214
 8000ee4:	20000217 	.word	0x20000217

08000ee8 <menuHandler>:
void menuHandler(){
 8000ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eea:	b0a1      	sub	sp, #132	; 0x84
 8000eec:	af08      	add	r7, sp, #32
	static uint32_t seleccion = 0;
	if(pantalla == Estado){
 8000eee:	4b89      	ldr	r3, [pc, #548]	; (8001114 <menuHandler+0x22c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d140      	bne.n	8000f78 <menuHandler+0x90>
		if((humedad < humedad_minima && !(humedad_previa < humedad_minima)) || (humedad > humedad_minima && !(humedad_previa > humedad_minima)) || (humedad < humedad_maxima && !(humedad_previa < humedad_maxima)) || (humedad > humedad_maxima && !(humedad_previa > humedad_maxima))){
 8000ef6:	4b88      	ldr	r3, [pc, #544]	; (8001118 <menuHandler+0x230>)
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	4b88      	ldr	r3, [pc, #544]	; (800111c <menuHandler+0x234>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d205      	bcs.n	8000f0e <menuHandler+0x26>
 8000f02:	4b87      	ldr	r3, [pc, #540]	; (8001120 <menuHandler+0x238>)
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	4b85      	ldr	r3, [pc, #532]	; (800111c <menuHandler+0x234>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d223      	bcs.n	8000f56 <menuHandler+0x6e>
 8000f0e:	4b82      	ldr	r3, [pc, #520]	; (8001118 <menuHandler+0x230>)
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	4b82      	ldr	r3, [pc, #520]	; (800111c <menuHandler+0x234>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d905      	bls.n	8000f26 <menuHandler+0x3e>
 8000f1a:	4b81      	ldr	r3, [pc, #516]	; (8001120 <menuHandler+0x238>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b7f      	ldr	r3, [pc, #508]	; (800111c <menuHandler+0x234>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d917      	bls.n	8000f56 <menuHandler+0x6e>
 8000f26:	4b7c      	ldr	r3, [pc, #496]	; (8001118 <menuHandler+0x230>)
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	4b7e      	ldr	r3, [pc, #504]	; (8001124 <menuHandler+0x23c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d205      	bcs.n	8000f3e <menuHandler+0x56>
 8000f32:	4b7b      	ldr	r3, [pc, #492]	; (8001120 <menuHandler+0x238>)
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	4b7b      	ldr	r3, [pc, #492]	; (8001124 <menuHandler+0x23c>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d20b      	bcs.n	8000f56 <menuHandler+0x6e>
 8000f3e:	4b76      	ldr	r3, [pc, #472]	; (8001118 <menuHandler+0x230>)
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	4b78      	ldr	r3, [pc, #480]	; (8001124 <menuHandler+0x23c>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d908      	bls.n	8000f5c <menuHandler+0x74>
 8000f4a:	4b75      	ldr	r3, [pc, #468]	; (8001120 <menuHandler+0x238>)
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	4b75      	ldr	r3, [pc, #468]	; (8001124 <menuHandler+0x23c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d802      	bhi.n	8000f5c <menuHandler+0x74>
			update_screen = 1;
 8000f56:	4b74      	ldr	r3, [pc, #464]	; (8001128 <menuHandler+0x240>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
		}
		if(update_screen){
 8000f5c:	4b72      	ldr	r3, [pc, #456]	; (8001128 <menuHandler+0x240>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <menuHandler+0x86>
			printMenu_Estado();
 8000f64:	f000 fc0c 	bl	8001780 <printMenu_Estado>
			update_screen = 0;
 8000f68:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <menuHandler+0x240>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
		}
		humedad_previa = humedad;
 8000f6e:	4b6a      	ldr	r3, [pc, #424]	; (8001118 <menuHandler+0x230>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	4b6b      	ldr	r3, [pc, #428]	; (8001120 <menuHandler+0x238>)
 8000f74:	701a      	strb	r2, [r3, #0]
		return;
 8000f76:	e3ea      	b.n	800174e <menuHandler+0x866>
	}
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f003 f95a 	bl	8004232 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000f7e:	2008      	movs	r0, #8
 8000f80:	f003 f957 	bl	8004232 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000f84:	2009      	movs	r0, #9
 8000f86:	f003 f954 	bl	8004232 <HAL_NVIC_DisableIRQ>

	switch(pantalla){
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <menuHandler+0x22c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	f200 83c8 	bhi.w	8001726 <menuHandler+0x83e>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <menuHandler+0xb4>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	0800103f 	.word	0x0800103f
 8000fa4:	080011cd 	.word	0x080011cd
 8000fa8:	08001705 	.word	0x08001705
	case Modo_Actual:
		if(update_screen){
 8000fac:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <menuHandler+0x240>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <menuHandler+0xd6>
			printMenu_Start();
 8000fb4:	f000 fc1e 	bl	80017f4 <printMenu_Start>
			update_screen = 0;
 8000fb8:	4b5b      	ldr	r3, [pc, #364]	; (8001128 <menuHandler+0x240>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	485a      	ldr	r0, [pc, #360]	; (800112c <menuHandler+0x244>)
 8000fc2:	f003 fad5 	bl	8004570 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d113      	bne.n	8000ff4 <menuHandler+0x10c>
 8000fcc:	4b58      	ldr	r3, [pc, #352]	; (8001130 <menuHandler+0x248>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00c      	beq.n	8000ff4 <menuHandler+0x10c>
			seleccion = 0;
 8000fda:	4b56      	ldr	r3, [pc, #344]	; (8001134 <menuHandler+0x24c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
			pantalla = Cambio_Modo;
 8000fe0:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <menuHandler+0x22c>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000fe6:	4b50      	ldr	r3, [pc, #320]	; (8001128 <menuHandler+0x240>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	4b52      	ldr	r3, [pc, #328]	; (8001138 <menuHandler+0x250>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	484d      	ldr	r0, [pc, #308]	; (800112c <menuHandler+0x244>)
 8000ff8:	f003 faba 	bl	8004570 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <menuHandler+0x254>)
 800100a:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800100c:	2104      	movs	r1, #4
 800100e:	4847      	ldr	r0, [pc, #284]	; (800112c <menuHandler+0x244>)
 8001010:	f003 faae 	bl	8004570 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf14      	ite	ne
 800101a:	2301      	movne	r3, #1
 800101c:	2300      	moveq	r3, #0
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <menuHandler+0x258>)
 8001022:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001024:	2108      	movs	r1, #8
 8001026:	4841      	ldr	r0, [pc, #260]	; (800112c <menuHandler+0x244>)
 8001028:	f003 faa2 	bl	8004570 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <menuHandler+0x248>)
 800103a:	701a      	strb	r2, [r3, #0]
		break;
 800103c:	e387      	b.n	800174e <menuHandler+0x866>
	case Cambio_Modo:
		if(update_screen){
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <menuHandler+0x240>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00a      	beq.n	800105c <menuHandler+0x174>
			printMenu_CambioModo();
 8001046:	f000 fc59 	bl	80018fc <printMenu_CambioModo>
			printSeleccion(seleccion);
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <menuHandler+0x24c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fcc9 	bl	80019e8 <printSeleccion>
			update_screen = 0;
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <menuHandler+0x240>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button0 == 0){
 800105c:	2104      	movs	r1, #4
 800105e:	4833      	ldr	r0, [pc, #204]	; (800112c <menuHandler+0x244>)
 8001060:	f003 fa86 	bl	8004570 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d118      	bne.n	800109c <menuHandler+0x1b4>
 800106a:	4b34      	ldr	r3, [pc, #208]	; (800113c <menuHandler+0x254>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d011      	beq.n	800109c <menuHandler+0x1b4>
			seleccion = seleccion==2?2:seleccion+1;
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <menuHandler+0x24c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d003      	beq.n	8001088 <menuHandler+0x1a0>
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <menuHandler+0x24c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	e000      	b.n	800108a <menuHandler+0x1a2>
 8001088:	2302      	movs	r3, #2
 800108a:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <menuHandler+0x24c>)
 800108c:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <menuHandler+0x240>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <menuHandler+0x250>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button1 == 0){
 800109c:	2101      	movs	r1, #1
 800109e:	4823      	ldr	r0, [pc, #140]	; (800112c <menuHandler+0x244>)
 80010a0:	f003 fa66 	bl	8004570 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d118      	bne.n	80010dc <menuHandler+0x1f4>
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <menuHandler+0x258>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d011      	beq.n	80010dc <menuHandler+0x1f4>
			seleccion = seleccion==0?0:seleccion-1;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <menuHandler+0x24c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <menuHandler+0x1e0>
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <menuHandler+0x24c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	e000      	b.n	80010ca <menuHandler+0x1e2>
 80010c8:	2300      	movs	r3, #0
 80010ca:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <menuHandler+0x24c>)
 80010cc:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <menuHandler+0x240>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <menuHandler+0x250>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 80010dc:	2108      	movs	r1, #8
 80010de:	4813      	ldr	r0, [pc, #76]	; (800112c <menuHandler+0x244>)
 80010e0:	f003 fa46 	bl	8004570 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d14b      	bne.n	8001182 <menuHandler+0x29a>
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <menuHandler+0x248>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f083 0301 	eor.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d044      	beq.n	8001182 <menuHandler+0x29a>
			switch(seleccion){
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <menuHandler+0x24c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <menuHandler+0x224>
 8001100:	2b02      	cmp	r3, #2
 8001102:	d11f      	bne.n	8001144 <menuHandler+0x25c>
			case Automatico_Tiempo:
				pantalla = Ajustes_Auto_Tiempo;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <menuHandler+0x22c>)
 8001106:	2203      	movs	r2, #3
 8001108:	701a      	strb	r2, [r3, #0]
				break;
 800110a:	e030      	b.n	800116e <menuHandler+0x286>
			case Automatico_Humedad:
				pantalla = Ajustes_Auto_Humedad;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <menuHandler+0x22c>)
 800110e:	2204      	movs	r2, #4
 8001110:	701a      	strb	r2, [r3, #0]
				break;
 8001112:	e02c      	b.n	800116e <menuHandler+0x286>
 8001114:	20000215 	.word	0x20000215
 8001118:	20000217 	.word	0x20000217
 800111c:	20000018 	.word	0x20000018
 8001120:	20000216 	.word	0x20000216
 8001124:	20000019 	.word	0x20000019
 8001128:	2000001b 	.word	0x2000001b
 800112c:	40020000 	.word	0x40020000
 8001130:	2000021a 	.word	0x2000021a
 8001134:	20000230 	.word	0x20000230
 8001138:	20000184 	.word	0x20000184
 800113c:	20000218 	.word	0x20000218
 8001140:	20000219 	.word	0x20000219
			default:
				modo = Manual;
 8001144:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <menuHandler+0x4e0>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
				pantalla = Estado;
 800114a:	4ba0      	ldr	r3, [pc, #640]	; (80013cc <menuHandler+0x4e4>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
				printMenu_Estado();
 8001150:	f000 fb16 	bl	8001780 <printMenu_Estado>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001154:	2006      	movs	r0, #6
 8001156:	f003 f85e 	bl	8004216 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800115a:	2008      	movs	r0, #8
 800115c:	f003 f85b 	bl	8004216 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001160:	2009      	movs	r0, #9
 8001162:	f003 f858 	bl	8004216 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001166:	2029      	movs	r0, #41	; 0x29
 8001168:	f003 f863 	bl	8004232 <HAL_NVIC_DisableIRQ>
				break;
 800116c:	bf00      	nop
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800116e:	4b98      	ldr	r3, [pc, #608]	; (80013d0 <menuHandler+0x4e8>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <menuHandler+0x4ec>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
			seleccion = 0;
 800117c:	4b96      	ldr	r3, [pc, #600]	; (80013d8 <menuHandler+0x4f0>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001182:	2101      	movs	r1, #1
 8001184:	4895      	ldr	r0, [pc, #596]	; (80013dc <menuHandler+0x4f4>)
 8001186:	f003 f9f3 	bl	8004570 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b92      	ldr	r3, [pc, #584]	; (80013e0 <menuHandler+0x4f8>)
 8001198:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800119a:	2104      	movs	r1, #4
 800119c:	488f      	ldr	r0, [pc, #572]	; (80013dc <menuHandler+0x4f4>)
 800119e:	f003 f9e7 	bl	8004570 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf14      	ite	ne
 80011a8:	2301      	movne	r3, #1
 80011aa:	2300      	moveq	r3, #0
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b8d      	ldr	r3, [pc, #564]	; (80013e4 <menuHandler+0x4fc>)
 80011b0:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80011b2:	2108      	movs	r1, #8
 80011b4:	4889      	ldr	r0, [pc, #548]	; (80013dc <menuHandler+0x4f4>)
 80011b6:	f003 f9db 	bl	8004570 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <menuHandler+0x500>)
 80011c8:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(50);
		break;
 80011ca:	e2c0      	b.n	800174e <menuHandler+0x866>
	case Ajustes_Auto_Tiempo:
		if(update_screen){
 80011cc:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <menuHandler+0x4e8>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 809a 	beq.w	800130a <menuHandler+0x422>
			ST7735_FillScreenFast(ST7735_CYAN);
 80011d6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80011da:	f001 ffe9 	bl	80031b0 <ST7735_FillScreenFast>
			if(alarmasON != 0)
 80011de:	4b83      	ldr	r3, [pc, #524]	; (80013ec <menuHandler+0x504>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8088 	beq.w	80012f8 <menuHandler+0x410>
			{
				if(seleccion <= num_alarmas){
 80011e8:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <menuHandler+0x4f0>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b80      	ldr	r3, [pc, #512]	; (80013f0 <menuHandler+0x508>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d86f      	bhi.n	80012d4 <menuHandler+0x3ec>
					for(uint8_t i = 0; i < MIN(num_alarmas-seleccion, 3); i++){
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80011fa:	e025      	b.n	8001248 <menuHandler+0x360>
						printAlarma(alarmasON[i], alarmasOFF[i], i);
 80011fc:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <menuHandler+0x504>)
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	18ce      	adds	r6, r1, r3
 800120e:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <menuHandler+0x50c>)
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	18ca      	adds	r2, r1, r3
 8001220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001224:	9306      	str	r3, [sp, #24]
 8001226:	ac01      	add	r4, sp, #4
 8001228:	4615      	mov	r5, r2
 800122a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	6023      	str	r3, [r4, #0]
 8001232:	6933      	ldr	r3, [r6, #16]
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800123a:	f000 fc6f 	bl	8001b1c <printAlarma>
					for(uint8_t i = 0; i < MIN(num_alarmas-seleccion, 3); i++){
 800123e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001242:	3301      	adds	r3, #1
 8001244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001248:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800124c:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <menuHandler+0x508>)
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	4b61      	ldr	r3, [pc, #388]	; (80013d8 <menuHandler+0x4f0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1acb      	subs	r3, r1, r3
 8001256:	2b03      	cmp	r3, #3
 8001258:	bf28      	it	cs
 800125a:	2303      	movcs	r3, #3
 800125c:	429a      	cmp	r2, r3
 800125e:	d3cd      	bcc.n	80011fc <menuHandler+0x314>
					}
					if(num_alarmas-seleccion < 3){
 8001260:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <menuHandler+0x508>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <menuHandler+0x4f0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d80a      	bhi.n	8001284 <menuHandler+0x39c>
						printCrearAlarma(num_alarmas-seleccion);
 800126e:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <menuHandler+0x508>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <menuHandler+0x4f0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fcc0 	bl	8001c04 <printCrearAlarma>
					}
					if(num_alarmas-seleccion < 2){
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <menuHandler+0x508>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <menuHandler+0x4f0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d80c      	bhi.n	80012ac <menuHandler+0x3c4>
						printOK(num_alarmas-seleccion+1);
 8001292:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <menuHandler+0x508>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <menuHandler+0x4f0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fddc 	bl	8001e64 <printOK>
					}
					if(num_alarmas-seleccion < 1){
 80012ac:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <menuHandler+0x508>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <menuHandler+0x4f0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d122      	bne.n	80012fe <menuHandler+0x416>
						printCambiarHora(num_alarmas-seleccion+2);
 80012b8:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <menuHandler+0x508>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <menuHandler+0x4f0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3302      	adds	r3, #2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fd4b 	bl	8001d68 <printCambiarHora>
 80012d2:	e014      	b.n	80012fe <menuHandler+0x416>
					}
				}
				else if(seleccion == num_alarmas+1){
 80012d4:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <menuHandler+0x508>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <menuHandler+0x4f0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d106      	bne.n	80012f0 <menuHandler+0x408>
					printOK(0);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 fdbe 	bl	8001e64 <printOK>
					printCambiarHora(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f000 fd3d 	bl	8001d68 <printCambiarHora>
 80012ee:	e006      	b.n	80012fe <menuHandler+0x416>
				}
				else{
					printCambiarHora(0);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f000 fd39 	bl	8001d68 <printCambiarHora>
 80012f6:	e002      	b.n	80012fe <menuHandler+0x416>
				}
			}
			else
			{
				printCrearAlarma(0);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fc83 	bl	8001c04 <printCrearAlarma>
			}
			printSeleccion(0);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 fb72 	bl	80019e8 <printSeleccion>
			update_screen = 0;
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <menuHandler+0x4e8>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button0 == 0){
 800130a:	2104      	movs	r1, #4
 800130c:	4833      	ldr	r0, [pc, #204]	; (80013dc <menuHandler+0x4f4>)
 800130e:	f003 f92f 	bl	8004570 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d11d      	bne.n	8001354 <menuHandler+0x46c>
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <menuHandler+0x4f8>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d016      	beq.n	8001354 <menuHandler+0x46c>
			seleccion = seleccion>=num_alarmas+2?num_alarmas+2:seleccion+1;
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <menuHandler+0x508>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1c9a      	adds	r2, r3, #2
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <menuHandler+0x4f0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d803      	bhi.n	800133c <menuHandler+0x454>
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <menuHandler+0x508>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3302      	adds	r3, #2
 800133a:	e002      	b.n	8001342 <menuHandler+0x45a>
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <menuHandler+0x4f0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <menuHandler+0x4f0>)
 8001344:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <menuHandler+0x4e8>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <menuHandler+0x4ec>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button1 == 0){
 8001354:	2101      	movs	r1, #1
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <menuHandler+0x4f4>)
 8001358:	f003 f90a 	bl	8004570 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d118      	bne.n	8001394 <menuHandler+0x4ac>
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <menuHandler+0x4fc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d011      	beq.n	8001394 <menuHandler+0x4ac>
			seleccion = seleccion==0?0:seleccion-1;
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <menuHandler+0x4f0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <menuHandler+0x498>
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <menuHandler+0x4f0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	e000      	b.n	8001382 <menuHandler+0x49a>
 8001380:	2300      	movs	r3, #0
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <menuHandler+0x4f0>)
 8001384:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <menuHandler+0x4e8>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <menuHandler+0x4ec>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001394:	2108      	movs	r1, #8
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <menuHandler+0x4f4>)
 8001398:	f003 f8ea 	bl	8004570 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	f040 818b 	bne.w	80016ba <menuHandler+0x7d2>
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <menuHandler+0x500>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8183 	beq.w	80016ba <menuHandler+0x7d2>
			if(seleccion >= num_alarmas + 2){
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <menuHandler+0x508>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1c9a      	adds	r2, r3, #2
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <menuHandler+0x4f0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d81a      	bhi.n	80013f8 <menuHandler+0x510>
				CambiarHora();
 80013c2:	f001 f861 	bl	8002488 <CambiarHora>
 80013c6:	e171      	b.n	80016ac <menuHandler+0x7c4>
 80013c8:	20000214 	.word	0x20000214
 80013cc:	20000215 	.word	0x20000215
 80013d0:	2000001b 	.word	0x2000001b
 80013d4:	20000184 	.word	0x20000184
 80013d8:	20000230 	.word	0x20000230
 80013dc:	40020000 	.word	0x40020000
 80013e0:	20000218 	.word	0x20000218
 80013e4:	20000219 	.word	0x20000219
 80013e8:	2000021a 	.word	0x2000021a
 80013ec:	2000021c 	.word	0x2000021c
 80013f0:	20000224 	.word	0x20000224
 80013f4:	20000220 	.word	0x20000220
			}
			else if(seleccion == num_alarmas + 1)
 80013f8:	4b8a      	ldr	r3, [pc, #552]	; (8001624 <menuHandler+0x73c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <menuHandler+0x740>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d119      	bne.n	800143a <menuHandler+0x552>
			{
				modo = Automatico_Tiempo;
 8001406:	4b89      	ldr	r3, [pc, #548]	; (800162c <menuHandler+0x744>)
 8001408:	2202      	movs	r2, #2
 800140a:	701a      	strb	r2, [r3, #0]
				pantalla = Estado;
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <menuHandler+0x748>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
				printMenu_Estado();
 8001412:	f000 f9b5 	bl	8001780 <printMenu_Estado>
				__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001416:	4b87      	ldr	r3, [pc, #540]	; (8001634 <menuHandler+0x74c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b85      	ldr	r3, [pc, #532]	; (8001634 <menuHandler+0x74c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001426:	60da      	str	r2, [r3, #12]
				HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001428:	2009      	movs	r0, #9
 800142a:	f002 fef4 	bl	8004216 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800142e:	2029      	movs	r0, #41	; 0x29
 8001430:	f002 fef1 	bl	8004216 <HAL_NVIC_EnableIRQ>
				nextAlarma();
 8001434:	f001 fbc6 	bl	8002bc4 <nextAlarma>
 8001438:	e138      	b.n	80016ac <menuHandler+0x7c4>
			}
			else if(seleccion == num_alarmas)
 800143a:	4b7b      	ldr	r3, [pc, #492]	; (8001628 <menuHandler+0x740>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b79      	ldr	r3, [pc, #484]	; (8001624 <menuHandler+0x73c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	f040 8095 	bne.w	8001572 <menuHandler+0x68a>
			{
				RTC_TimeTypeDef nueva_alarma[2];
				crearAlarma(nueva_alarma);
 8001448:	463b      	mov	r3, r7
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd46 	bl	8001edc <crearAlarma>
				RTC_TimeTypeDef ON  = nueva_alarma[0];
 8001450:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001454:	463d      	mov	r5, r7
 8001456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145a:	682b      	ldr	r3, [r5, #0]
 800145c:	6023      	str	r3, [r4, #0]
				RTC_TimeTypeDef OFF = nueva_alarma[1];
 800145e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001462:	f107 0514 	add.w	r5, r7, #20
 8001466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	6023      	str	r3, [r4, #0]

				if(num_alarmas == 0){
 800146e:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <menuHandler+0x73c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d12f      	bne.n	80014d6 <menuHandler+0x5ee>
					alarmasON  = (RTC_TimeTypeDef*)malloc(sizeof(RTC_TimeTypeDef));
 8001476:	2014      	movs	r0, #20
 8001478:	f005 fd1c 	bl	8006eb4 <malloc>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <menuHandler+0x750>)
 8001482:	601a      	str	r2, [r3, #0]
					alarmasOFF = (RTC_TimeTypeDef*)malloc(sizeof(RTC_TimeTypeDef));
 8001484:	2014      	movs	r0, #20
 8001486:	f005 fd15 	bl	8006eb4 <malloc>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4b6b      	ldr	r3, [pc, #428]	; (800163c <menuHandler+0x754>)
 8001490:	601a      	str	r2, [r3, #0]

					if(alarmasON == NULL || alarmasOFF == NULL){
 8001492:	4b69      	ldr	r3, [pc, #420]	; (8001638 <menuHandler+0x750>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <menuHandler+0x5ba>
 800149a:	4b68      	ldr	r3, [pc, #416]	; (800163c <menuHandler+0x754>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <menuHandler+0x5be>
						Error_Handler();
 80014a2:	f001 fc09 	bl	8002cb8 <Error_Handler>
					}

					alarmasON[0] = ON;
 80014a6:	4b64      	ldr	r3, [pc, #400]	; (8001638 <menuHandler+0x750>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	461d      	mov	r5, r3
 80014ac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	602b      	str	r3, [r5, #0]
					alarmasOFF[0] = OFF;
 80014b8:	4b60      	ldr	r3, [pc, #384]	; (800163c <menuHandler+0x754>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	461d      	mov	r5, r3
 80014be:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80014c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	602b      	str	r3, [r5, #0]

					num_alarmas++;
 80014ca:	4b56      	ldr	r3, [pc, #344]	; (8001624 <menuHandler+0x73c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a54      	ldr	r2, [pc, #336]	; (8001624 <menuHandler+0x73c>)
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e0ea      	b.n	80016ac <menuHandler+0x7c4>
				}
				else{
					alarmasON = realloc(alarmasON, (num_alarmas+1)*sizeof(RTC_TimeTypeDef));
 80014d6:	4b58      	ldr	r3, [pc, #352]	; (8001638 <menuHandler+0x750>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	4b52      	ldr	r3, [pc, #328]	; (8001624 <menuHandler+0x73c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f005 fddb 	bl	80070a4 <realloc>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a51      	ldr	r2, [pc, #324]	; (8001638 <menuHandler+0x750>)
 80014f2:	6013      	str	r3, [r2, #0]
					alarmasOFF = realloc(alarmasOFF, (num_alarmas+1)*sizeof(RTC_TimeTypeDef));
 80014f4:	4b51      	ldr	r3, [pc, #324]	; (800163c <menuHandler+0x754>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <menuHandler+0x73c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4619      	mov	r1, r3
 8001508:	f005 fdcc 	bl	80070a4 <realloc>
 800150c:	4603      	mov	r3, r0
 800150e:	4a4b      	ldr	r2, [pc, #300]	; (800163c <menuHandler+0x754>)
 8001510:	6013      	str	r3, [r2, #0]

					if(alarmasON == NULL || alarmasOFF == NULL){
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <menuHandler+0x750>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <menuHandler+0x63a>
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <menuHandler+0x754>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <menuHandler+0x63e>
						Error_Handler();
 8001522:	f001 fbc9 	bl	8002cb8 <Error_Handler>
					}
					alarmasON[num_alarmas] = ON;
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <menuHandler+0x750>)
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <menuHandler+0x73c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	461d      	mov	r5, r3
 800153a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	602b      	str	r3, [r5, #0]
					alarmasOFF[num_alarmas] = OFF;
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <menuHandler+0x754>)
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	4b36      	ldr	r3, [pc, #216]	; (8001624 <menuHandler+0x73c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	461d      	mov	r5, r3
 800155a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	602b      	str	r3, [r5, #0]

					num_alarmas++;
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <menuHandler+0x73c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <menuHandler+0x73c>)
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e09c      	b.n	80016ac <menuHandler+0x7c4>
				}
			}
			else{
				RTC_TimeTypeDef* alarmasTemp = malloc((num_alarmas-1)*sizeof(RTC_TimeTypeDef));
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <menuHandler+0x73c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	3b14      	subs	r3, #20
 8001580:	4618      	mov	r0, r3
 8001582:	f005 fc97 	bl	8006eb4 <malloc>
 8001586:	4603      	mov	r3, r0
 8001588:	653b      	str	r3, [r7, #80]	; 0x50
				if(alarmasTemp == NULL){
 800158a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <menuHandler+0x6ac>
					Error_Handler();
 8001590:	f001 fb92 	bl	8002cb8 <Error_Handler>
				}
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 8001594:	2300      	movs	r3, #0
 8001596:	65bb      	str	r3, [r7, #88]	; 0x58
 8001598:	e022      	b.n	80015e0 <menuHandler+0x6f8>
					alarmasTemp[i] = alarmasON[i+((uint32_t)i>=seleccion)];
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <menuHandler+0x750>)
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <menuHandler+0x740>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015a4:	429a      	cmp	r2, r3
 80015a6:	bf2c      	ite	cs
 80015a8:	2301      	movcs	r3, #1
 80015aa:	2300      	movcc	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b2:	441a      	add	r2, r3
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4419      	add	r1, r3
 80015be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015cc:	4413      	add	r3, r2
 80015ce:	461c      	mov	r4, r3
 80015d0:	460d      	mov	r5, r1
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	6023      	str	r3, [r4, #0]
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 80015da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015dc:	3301      	adds	r3, #1
 80015de:	65bb      	str	r3, [r7, #88]	; 0x58
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <menuHandler+0x73c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3d6      	bcc.n	800159a <menuHandler+0x6b2>
				}
				free(alarmasON);
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <menuHandler+0x750>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fc67 	bl	8006ec4 <free>
				alarmasON = alarmasTemp;
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <menuHandler+0x750>)
 80015f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015fa:	6013      	str	r3, [r2, #0]

				alarmasTemp = malloc((num_alarmas-1)*sizeof(RTC_TimeTypeDef));
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <menuHandler+0x73c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	3b14      	subs	r3, #20
 800160a:	4618      	mov	r0, r3
 800160c:	f005 fc52 	bl	8006eb4 <malloc>
 8001610:	4603      	mov	r3, r0
 8001612:	653b      	str	r3, [r7, #80]	; 0x50
				if(alarmasTemp == NULL){
 8001614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <menuHandler+0x736>
					Error_Handler();
 800161a:	f001 fb4d 	bl	8002cb8 <Error_Handler>
				}
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 800161e:	2300      	movs	r3, #0
 8001620:	657b      	str	r3, [r7, #84]	; 0x54
 8001622:	e030      	b.n	8001686 <menuHandler+0x79e>
 8001624:	20000224 	.word	0x20000224
 8001628:	20000230 	.word	0x20000230
 800162c:	20000214 	.word	0x20000214
 8001630:	20000215 	.word	0x20000215
 8001634:	2000010c 	.word	0x2000010c
 8001638:	2000021c 	.word	0x2000021c
 800163c:	20000220 	.word	0x20000220
					alarmasTemp[i] = alarmasOFF[i+((uint32_t)i>=seleccion)];
 8001640:	4b44      	ldr	r3, [pc, #272]	; (8001754 <menuHandler+0x86c>)
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	4b44      	ldr	r3, [pc, #272]	; (8001758 <menuHandler+0x870>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800164a:	429a      	cmp	r2, r3
 800164c:	bf2c      	ite	cs
 800164e:	2301      	movcs	r3, #1
 8001650:	2300      	movcc	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001658:	441a      	add	r2, r3
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4419      	add	r1, r3
 8001664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	461a      	mov	r2, r3
 8001670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001672:	4413      	add	r3, r2
 8001674:	461c      	mov	r4, r3
 8001676:	460d      	mov	r5, r1
 8001678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	6023      	str	r3, [r4, #0]
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 8001680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001682:	3301      	adds	r3, #1
 8001684:	657b      	str	r3, [r7, #84]	; 0x54
 8001686:	4b35      	ldr	r3, [pc, #212]	; (800175c <menuHandler+0x874>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3b01      	subs	r3, #1
 800168c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800168e:	429a      	cmp	r2, r3
 8001690:	d3d6      	bcc.n	8001640 <menuHandler+0x758>
				}
				free(alarmasOFF);
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <menuHandler+0x86c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f005 fc14 	bl	8006ec4 <free>
				alarmasOFF = alarmasTemp;
 800169c:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <menuHandler+0x86c>)
 800169e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016a0:	6013      	str	r3, [r2, #0]

				num_alarmas--;
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <menuHandler+0x874>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	4a2c      	ldr	r2, [pc, #176]	; (800175c <menuHandler+0x874>)
 80016aa:	6013      	str	r3, [r2, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <menuHandler+0x878>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <menuHandler+0x87c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80016ba:	2101      	movs	r1, #1
 80016bc:	482a      	ldr	r0, [pc, #168]	; (8001768 <menuHandler+0x880>)
 80016be:	f002 ff57 	bl	8004570 <HAL_GPIO_ReadPin>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf14      	ite	ne
 80016c8:	2301      	movne	r3, #1
 80016ca:	2300      	moveq	r3, #0
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <menuHandler+0x884>)
 80016d0:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80016d2:	2104      	movs	r1, #4
 80016d4:	4824      	ldr	r0, [pc, #144]	; (8001768 <menuHandler+0x880>)
 80016d6:	f002 ff4b 	bl	8004570 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <menuHandler+0x888>)
 80016e8:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80016ea:	2108      	movs	r1, #8
 80016ec:	481e      	ldr	r0, [pc, #120]	; (8001768 <menuHandler+0x880>)
 80016ee:	f002 ff3f 	bl	8004570 <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <menuHandler+0x88c>)
 8001700:	701a      	strb	r2, [r3, #0]
		break;
 8001702:	e024      	b.n	800174e <menuHandler+0x866>
	case Ajustes_Auto_Humedad:
		AjustarHumedad();
 8001704:	f001 f826 	bl	8002754 <AjustarHumedad>
		modo = Automatico_Humedad;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <menuHandler+0x890>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
		pantalla = Estado;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <menuHandler+0x894>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
		printMenu_Estado();
 8001714:	f000 f834 	bl	8001780 <printMenu_Estado>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001718:	2009      	movs	r0, #9
 800171a:	f002 fd7c 	bl	8004216 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 800171e:	2029      	movs	r0, #41	; 0x29
 8001720:	f002 fd87 	bl	8004232 <HAL_NVIC_DisableIRQ>
		break;
 8001724:	e013      	b.n	800174e <menuHandler+0x866>
	default:
		modo = Manual;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <menuHandler+0x890>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
		pantalla = Estado;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <menuHandler+0x894>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
		printMenu_Estado();
 8001732:	f000 f825 	bl	8001780 <printMenu_Estado>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001736:	2006      	movs	r0, #6
 8001738:	f002 fd6d 	bl	8004216 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800173c:	2008      	movs	r0, #8
 800173e:	f002 fd6a 	bl	8004216 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001742:	2009      	movs	r0, #9
 8001744:	f002 fd67 	bl	8004216 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001748:	2029      	movs	r0, #41	; 0x29
 800174a:	f002 fd72 	bl	8004232 <HAL_NVIC_DisableIRQ>
	}
}
 800174e:	3764      	adds	r7, #100	; 0x64
 8001750:	46bd      	mov	sp, r7
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001754:	20000220 	.word	0x20000220
 8001758:	20000230 	.word	0x20000230
 800175c:	20000224 	.word	0x20000224
 8001760:	2000001b 	.word	0x2000001b
 8001764:	20000184 	.word	0x20000184
 8001768:	40020000 	.word	0x40020000
 800176c:	20000218 	.word	0x20000218
 8001770:	20000219 	.word	0x20000219
 8001774:	2000021a 	.word	0x2000021a
 8001778:	20000214 	.word	0x20000214
 800177c:	20000215 	.word	0x20000215

08001780 <printMenu_Estado>:





void printMenu_Estado(){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af02      	add	r7, sp, #8
	if(humedad > humedad_maxima){
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <printMenu_Estado+0x5c>)
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <printMenu_Estado+0x60>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d908      	bls.n	80017a4 <printMenu_Estado+0x24>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)DEMASIADA_AGUA);
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <printMenu_Estado+0x64>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	23a0      	movs	r3, #160	; 0xa0
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	2100      	movs	r1, #0
 800179c:	2000      	movs	r0, #0
 800179e:	f001 fd18 	bl	80031d2 <ST7735_DrawImage>
 80017a2:	e016      	b.n	80017d2 <printMenu_Estado+0x52>
	}
	else if(humedad > humedad_minima){
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <printMenu_Estado+0x5c>)
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <printMenu_Estado+0x68>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d908      	bls.n	80017c2 <printMenu_Estado+0x42>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)BIEN_AGUA);
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <printMenu_Estado+0x6c>)
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	23a0      	movs	r3, #160	; 0xa0
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	2100      	movs	r1, #0
 80017ba:	2000      	movs	r0, #0
 80017bc:	f001 fd09 	bl	80031d2 <ST7735_DrawImage>
 80017c0:	e007      	b.n	80017d2 <printMenu_Estado+0x52>
	}
	else{
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)POCA_AGUA);
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <printMenu_Estado+0x70>)
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	23a0      	movs	r3, #160	; 0xa0
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 fd00 	bl	80031d2 <ST7735_DrawImage>
	}
	printTime();
 80017d2:	f000 fb21 	bl	8001e18 <printTime>
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000217 	.word	0x20000217
 80017e0:	20000019 	.word	0x20000019
 80017e4:	0800a090 	.word	0x0800a090
 80017e8:	20000018 	.word	0x20000018
 80017ec:	0801e090 	.word	0x0801e090
 80017f0:	08014090 	.word	0x08014090

080017f4 <printMenu_Start>:

void printMenu_Start(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af04      	add	r7, sp, #16
	ST7735_FillScreenFast(ST7735_CYAN);
 80017fa:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80017fe:	f001 fcd7 	bl	80031b0 <ST7735_FillScreenFast>
	ST7735_FillRectangleFast(5, 5, ST7735_WIDTH-10, 40, ST7735_WHITE);
 8001802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2328      	movs	r3, #40	; 0x28
 800180a:	2276      	movs	r2, #118	; 0x76
 800180c:	2105      	movs	r1, #5
 800180e:	2005      	movs	r0, #5
 8001810:	f001 fc4a 	bl	80030a8 <ST7735_FillRectangleFast>
	switch(modo){
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <printMenu_Start+0xec>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d032      	beq.n	8001882 <printMenu_Start+0x8e>
 800181c:	2b02      	cmp	r3, #2
 800181e:	dc4d      	bgt.n	80018bc <printMenu_Start+0xc8>
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <printMenu_Start+0x36>
 8001824:	2b01      	cmp	r3, #1
 8001826:	d00f      	beq.n	8001848 <printMenu_Start+0x54>
 8001828:	e048      	b.n	80018bc <printMenu_Start+0xc8>
	case Manual:
		ST7735_WriteString(31, 16, "Manual", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <printMenu_Start+0xf0>)
 800182c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001830:	9202      	str	r2, [sp, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	9201      	str	r2, [sp, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	9200      	str	r2, [sp, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <printMenu_Start+0xf4>)
 800183e:	2110      	movs	r1, #16
 8001840:	201f      	movs	r0, #31
 8001842:	f001 fbe6 	bl	8003012 <ST7735_WriteString>
		break;
 8001846:	e048      	b.n	80018da <printMenu_Start+0xe6>
	case Automatico_Humedad:
		ST7735_WriteString(9, 6, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <printMenu_Start+0xf0>)
 800184a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184e:	9202      	str	r2, [sp, #8]
 8001850:	2200      	movs	r2, #0
 8001852:	9201      	str	r2, [sp, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a24      	ldr	r2, [pc, #144]	; (80018ec <printMenu_Start+0xf8>)
 800185c:	2106      	movs	r1, #6
 800185e:	2009      	movs	r0, #9
 8001860:	f001 fbd7 	bl	8003012 <ST7735_WriteString>
		ST7735_WriteString(25, 26, "Humedad", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <printMenu_Start+0xf0>)
 8001866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186a:	9202      	str	r2, [sp, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	9200      	str	r2, [sp, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <printMenu_Start+0xfc>)
 8001878:	211a      	movs	r1, #26
 800187a:	2019      	movs	r0, #25
 800187c:	f001 fbc9 	bl	8003012 <ST7735_WriteString>
		break;
 8001880:	e02b      	b.n	80018da <printMenu_Start+0xe6>
	case Automatico_Tiempo:
		ST7735_WriteString(9, 6, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <printMenu_Start+0xf0>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	9202      	str	r2, [sp, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	9201      	str	r2, [sp, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	9200      	str	r2, [sp, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a15      	ldr	r2, [pc, #84]	; (80018ec <printMenu_Start+0xf8>)
 8001896:	2106      	movs	r1, #6
 8001898:	2009      	movs	r0, #9
 800189a:	f001 fbba 	bl	8003012 <ST7735_WriteString>
		ST7735_WriteString(31, 26, "Tiempo", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <printMenu_Start+0xf0>)
 80018a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a4:	9202      	str	r2, [sp, #8]
 80018a6:	2200      	movs	r2, #0
 80018a8:	9201      	str	r2, [sp, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	9200      	str	r2, [sp, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <printMenu_Start+0x100>)
 80018b2:	211a      	movs	r1, #26
 80018b4:	201f      	movs	r0, #31
 80018b6:	f001 fbac 	bl	8003012 <ST7735_WriteString>
		break;
 80018ba:	e00e      	b.n	80018da <printMenu_Start+0xe6>
	default:
		ST7735_WriteString(36, 16, "Error", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <printMenu_Start+0xf0>)
 80018be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c2:	9202      	str	r2, [sp, #8]
 80018c4:	2200      	movs	r2, #0
 80018c6:	9201      	str	r2, [sp, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	9200      	str	r2, [sp, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <printMenu_Start+0x104>)
 80018d0:	2110      	movs	r1, #16
 80018d2:	2024      	movs	r0, #36	; 0x24
 80018d4:	f001 fb9d 	bl	8003012 <ST7735_WriteString>
		break;
 80018d8:	bf00      	nop
	}
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000214 	.word	0x20000214
 80018e4:	20000008 	.word	0x20000008
 80018e8:	080077e4 	.word	0x080077e4
 80018ec:	080077ec 	.word	0x080077ec
 80018f0:	080077f8 	.word	0x080077f8
 80018f4:	08007800 	.word	0x08007800
 80018f8:	08007808 	.word	0x08007808

080018fc <printMenu_CambioModo>:
void printMenu_CambioModo(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af04      	add	r7, sp, #16
	ST7735_FillScreenFast(ST7735_CYAN);
 8001902:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001906:	f001 fc53 	bl	80031b0 <ST7735_FillScreenFast>
	ST7735_FillRectangleFast(5, 5, ST7735_WIDTH-10, 48, ST7735_WHITE);
 800190a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2330      	movs	r3, #48	; 0x30
 8001912:	2276      	movs	r2, #118	; 0x76
 8001914:	2105      	movs	r1, #5
 8001916:	2005      	movs	r0, #5
 8001918:	f001 fbc6 	bl	80030a8 <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(5, 56, ST7735_WIDTH-10, 48, ST7735_WHITE);
 800191c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2330      	movs	r3, #48	; 0x30
 8001924:	2276      	movs	r2, #118	; 0x76
 8001926:	2138      	movs	r1, #56	; 0x38
 8001928:	2005      	movs	r0, #5
 800192a:	f001 fbbd 	bl	80030a8 <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(5, 107, ST7735_WIDTH-10, 48, ST7735_WHITE);
 800192e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2330      	movs	r3, #48	; 0x30
 8001936:	2276      	movs	r2, #118	; 0x76
 8001938:	216b      	movs	r1, #107	; 0x6b
 800193a:	2005      	movs	r0, #5
 800193c:	f001 fbb4 	bl	80030a8 <ST7735_FillRectangleFast>

	ST7735_WriteString(31, 20, "Manual", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <printMenu_CambioModo+0xd8>)
 8001942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001946:	9202      	str	r2, [sp, #8]
 8001948:	2200      	movs	r2, #0
 800194a:	9201      	str	r2, [sp, #4]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	9200      	str	r2, [sp, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <printMenu_CambioModo+0xdc>)
 8001954:	2114      	movs	r1, #20
 8001956:	201f      	movs	r0, #31
 8001958:	f001 fb5b 	bl	8003012 <ST7735_WriteString>

	ST7735_WriteString(9, 61, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <printMenu_CambioModo+0xd8>)
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	9202      	str	r2, [sp, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <printMenu_CambioModo+0xe0>)
 8001970:	213d      	movs	r1, #61	; 0x3d
 8001972:	2009      	movs	r0, #9
 8001974:	f001 fb4d 	bl	8003012 <ST7735_WriteString>
	ST7735_WriteString(25, 81, "Humedad", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <printMenu_CambioModo+0xd8>)
 800197a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800197e:	9202      	str	r2, [sp, #8]
 8001980:	2200      	movs	r2, #0
 8001982:	9201      	str	r2, [sp, #4]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <printMenu_CambioModo+0xe4>)
 800198c:	2151      	movs	r1, #81	; 0x51
 800198e:	2019      	movs	r0, #25
 8001990:	f001 fb3f 	bl	8003012 <ST7735_WriteString>

	ST7735_WriteString(9, 112, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <printMenu_CambioModo+0xd8>)
 8001996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199a:	9202      	str	r2, [sp, #8]
 800199c:	2200      	movs	r2, #0
 800199e:	9201      	str	r2, [sp, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	9200      	str	r2, [sp, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <printMenu_CambioModo+0xe0>)
 80019a8:	2170      	movs	r1, #112	; 0x70
 80019aa:	2009      	movs	r0, #9
 80019ac:	f001 fb31 	bl	8003012 <ST7735_WriteString>
	ST7735_WriteString(31, 132, "Tiempo", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <printMenu_CambioModo+0xd8>)
 80019b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b6:	9202      	str	r2, [sp, #8]
 80019b8:	2200      	movs	r2, #0
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	9200      	str	r2, [sp, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <printMenu_CambioModo+0xe8>)
 80019c4:	2184      	movs	r1, #132	; 0x84
 80019c6:	201f      	movs	r0, #31
 80019c8:	f001 fb23 	bl	8003012 <ST7735_WriteString>
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008
 80019d8:	080077e4 	.word	0x080077e4
 80019dc:	080077ec 	.word	0x080077ec
 80019e0:	080077f8 	.word	0x080077f8
 80019e4:	08007800 	.word	0x08007800

080019e8 <printSeleccion>:

void printSeleccion(uint8_t altura){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	for(int x = 5; x < ST7735_WIDTH-5; x++) {
 80019f2:	2305      	movs	r3, #5
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	e052      	b.n	8001a9e <printSeleccion+0xb6>
		ST7735_DrawPixel(x, 5+(altura*51), ST7735_GREEN);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	b298      	uxth	r0, r3
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	461a      	mov	r2, r3
 8001a08:	0111      	lsls	r1, r2, #4
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3305      	adds	r3, #5
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f001 fa4e 	bl	8002ebc <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 6+(altura*51), ST7735_GREEN);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	b298      	uxth	r0, r3
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	0111      	lsls	r1, r2, #4
 8001a32:	461a      	mov	r2, r3
 8001a34:	460b      	mov	r3, r1
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3306      	adds	r3, #6
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a42:	4619      	mov	r1, r3
 8001a44:	f001 fa3a 	bl	8002ebc <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 5+48+(altura*51), ST7735_GREEN);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	b298      	uxth	r0, r3
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	461a      	mov	r2, r3
 8001a58:	0111      	lsls	r1, r2, #4
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3335      	adds	r3, #53	; 0x35
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f001 fa26 	bl	8002ebc <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 4+48+(altura*51), ST7735_GREEN);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	b298      	uxth	r0, r3
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	0052      	lsls	r2, r2, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	0111      	lsls	r1, r2, #4
 8001a82:	461a      	mov	r2, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3334      	adds	r3, #52	; 0x34
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a92:	4619      	mov	r1, r3
 8001a94:	f001 fa12 	bl	8002ebc <ST7735_DrawPixel>
	for(int x = 5; x < ST7735_WIDTH-5; x++) {
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b7a      	cmp	r3, #122	; 0x7a
 8001aa2:	dda9      	ble.n	80019f8 <printSeleccion+0x10>
	}

	for(int y = 5+(altura*51); y < 5+48+(altura*51); y++) {
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	011a      	lsls	r2, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	e022      	b.n	8001afc <printSeleccion+0x114>
		ST7735_DrawPixel(5, y, ST7735_GREEN);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	2005      	movs	r0, #5
 8001ac2:	f001 f9fb 	bl	8002ebc <ST7735_DrawPixel>
		ST7735_DrawPixel(6, y, ST7735_GREEN);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2006      	movs	r0, #6
 8001ad2:	f001 f9f3 	bl	8002ebc <ST7735_DrawPixel>
		ST7735_DrawPixel(ST7735_WIDTH-5, y, ST7735_GREEN);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	207b      	movs	r0, #123	; 0x7b
 8001ae2:	f001 f9eb 	bl	8002ebc <ST7735_DrawPixel>
		ST7735_DrawPixel(ST7735_WIDTH-6, y, ST7735_GREEN);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001aee:	4619      	mov	r1, r3
 8001af0:	207a      	movs	r0, #122	; 0x7a
 8001af2:	f001 f9e3 	bl	8002ebc <ST7735_DrawPixel>
	for(int y = 5+(altura*51); y < 5+48+(altura*51); y++) {
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	79fa      	ldrb	r2, [r7, #7]
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	011a      	lsls	r2, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	3334      	adds	r3, #52	; 0x34
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	ddd2      	ble.n	8001ab6 <printSeleccion+0xce>
	}
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <printAlarma>:

void printAlarma(RTC_TimeTypeDef horaON, RTC_TimeTypeDef horaOFF, uint8_t altura){
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b088      	sub	sp, #32
 8001b22:	af04      	add	r7, sp, #16
 8001b24:	f107 0c18 	add.w	ip, r7, #24
 8001b28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8001b2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	0052      	lsls	r2, r2, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	0111      	lsls	r1, r2, #4
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3305      	adds	r3, #5
 8001b46:	b299      	uxth	r1, r3
 8001b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2330      	movs	r3, #48	; 0x30
 8001b50:	2276      	movs	r2, #118	; 0x76
 8001b52:	2005      	movs	r0, #5
 8001b54:	f001 faa8 	bl	80030a8 <ST7735_FillRectangleFast>
	char alarma[12];
	sprintf(alarma,"ON:  %02d:%02d",horaON.Hours,horaON.Minutes);
 8001b58:	7e3b      	ldrb	r3, [r7, #24]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	7e7b      	ldrb	r3, [r7, #25]
 8001b5e:	1d38      	adds	r0, r7, #4
 8001b60:	4925      	ldr	r1, [pc, #148]	; (8001bf8 <printAlarma+0xdc>)
 8001b62:	f005 fab7 	bl	80070d4 <siprintf>
	ST7735_WriteString(10, 10+51*altura, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001b66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	0052      	lsls	r2, r2, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	461a      	mov	r2, r3
 8001b74:	0111      	lsls	r1, r2, #4
 8001b76:	461a      	mov	r2, r3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	330a      	adds	r3, #10
 8001b80:	b299      	uxth	r1, r3
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <printAlarma+0xe0>)
 8001b84:	1d38      	adds	r0, r7, #4
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9201      	str	r2, [sp, #4]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4602      	mov	r2, r0
 8001b98:	200a      	movs	r0, #10
 8001b9a:	f001 fa3a 	bl	8003012 <ST7735_WriteString>
	sprintf(alarma,"OFF: %02d:%02d",horaOFF.Hours,horaOFF.Minutes);
 8001b9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba8:	1d38      	adds	r0, r7, #4
 8001baa:	4915      	ldr	r1, [pc, #84]	; (8001c00 <printAlarma+0xe4>)
 8001bac:	f005 fa92 	bl	80070d4 <siprintf>
	ST7735_WriteString(10, 30+51*altura, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001bb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	0052      	lsls	r2, r2, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	0111      	lsls	r1, r2, #4
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	331e      	adds	r3, #30
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <printAlarma+0xe0>)
 8001bce:	1d38      	adds	r0, r7, #4
 8001bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd4:	9202      	str	r2, [sp, #8]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4602      	mov	r2, r0
 8001be2:	200a      	movs	r0, #10
 8001be4:	f001 fa15 	bl	8003012 <ST7735_WriteString>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bf2:	b004      	add	sp, #16
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	08007810 	.word	0x08007810
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	08007820 	.word	0x08007820

08001c04 <printCrearAlarma>:

void printCrearAlarma(uint8_t altura){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	0052      	lsls	r2, r2, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	0111      	lsls	r1, r2, #4
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4413      	add	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3305      	adds	r3, #5
 8001c26:	b299      	uxth	r1, r3
 8001c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2330      	movs	r3, #48	; 0x30
 8001c30:	2276      	movs	r2, #118	; 0x76
 8001c32:	2005      	movs	r0, #5
 8001c34:	f001 fa38 	bl	80030a8 <ST7735_FillRectangleFast>
	for(uint16_t x = 0; x <= 17; x++){
 8001c38:	2300      	movs	r3, #0
 8001c3a:	81fb      	strh	r3, [r7, #14]
 8001c3c:	e08a      	b.n	8001d54 <printCrearAlarma+0x150>
		for(uint16_t y = 0; y <= 17; y++){
 8001c3e:	2300      	movs	r3, #0
 8001c40:	81bb      	strh	r3, [r7, #12]
 8001c42:	e080      	b.n	8001d46 <printCrearAlarma+0x142>
			if(x*x+y*y < 289){
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	89fa      	ldrh	r2, [r7, #14]
 8001c48:	fb03 f202 	mul.w	r2, r3, r2
 8001c4c:	89bb      	ldrh	r3, [r7, #12]
 8001c4e:	89b9      	ldrh	r1, [r7, #12]
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001c5a:	dc71      	bgt.n	8001d40 <printCrearAlarma+0x13c>
				if(x < 3 && y < 12){
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d802      	bhi.n	8001c68 <printCrearAlarma+0x64>
 8001c62:	89bb      	ldrh	r3, [r7, #12]
 8001c64:	2b0b      	cmp	r3, #11
 8001c66:	d968      	bls.n	8001d3a <printCrearAlarma+0x136>
					continue;
				}
				if(x < 12 && y < 3){
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	2b0b      	cmp	r3, #11
 8001c6c:	d802      	bhi.n	8001c74 <printCrearAlarma+0x70>
 8001c6e:	89bb      	ldrh	r3, [r7, #12]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d964      	bls.n	8001d3e <printCrearAlarma+0x13a>
					continue;
				}
				ST7735_DrawPixel(64+x, (29+51*altura)+y, ST7735_GREEN);
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	3340      	adds	r3, #64	; 0x40
 8001c78:	b298      	uxth	r0, r3
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	0052      	lsls	r2, r2, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	0111      	lsls	r1, r2, #4
 8001c88:	461a      	mov	r2, r3
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	89bb      	ldrh	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	331d      	adds	r3, #29
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f001 f90c 	bl	8002ebc <ST7735_DrawPixel>
				ST7735_DrawPixel(64+x, (29+51*altura)-y, ST7735_GREEN);
 8001ca4:	89fb      	ldrh	r3, [r7, #14]
 8001ca6:	3340      	adds	r3, #64	; 0x40
 8001ca8:	b298      	uxth	r0, r3
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	0052      	lsls	r2, r2, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	0111      	lsls	r1, r2, #4
 8001cb8:	461a      	mov	r2, r3
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	89bb      	ldrh	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	331d      	adds	r3, #29
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f001 f8f4 	bl	8002ebc <ST7735_DrawPixel>
				ST7735_DrawPixel(64-x, (29+51*altura)+y, ST7735_GREEN);
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001cda:	b298      	uxth	r0, r3
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	0052      	lsls	r2, r2, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	0111      	lsls	r1, r2, #4
 8001cea:	461a      	mov	r2, r3
 8001cec:	460b      	mov	r3, r1
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	89bb      	ldrh	r3, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	331d      	adds	r3, #29
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d00:	4619      	mov	r1, r3
 8001d02:	f001 f8db 	bl	8002ebc <ST7735_DrawPixel>
				ST7735_DrawPixel(64-x, (29+51*altura)-y, ST7735_GREEN);
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	0052      	lsls	r2, r2, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	0111      	lsls	r1, r2, #4
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4413      	add	r3, r2
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	89bb      	ldrh	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	331d      	adds	r3, #29
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d32:	4619      	mov	r1, r3
 8001d34:	f001 f8c2 	bl	8002ebc <ST7735_DrawPixel>
 8001d38:	e002      	b.n	8001d40 <printCrearAlarma+0x13c>
					continue;
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <printCrearAlarma+0x13c>
					continue;
 8001d3e:	bf00      	nop
		for(uint16_t y = 0; y <= 17; y++){
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	3301      	adds	r3, #1
 8001d44:	81bb      	strh	r3, [r7, #12]
 8001d46:	89bb      	ldrh	r3, [r7, #12]
 8001d48:	2b11      	cmp	r3, #17
 8001d4a:	f67f af7b 	bls.w	8001c44 <printCrearAlarma+0x40>
	for(uint16_t x = 0; x <= 17; x++){
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	3301      	adds	r3, #1
 8001d52:	81fb      	strh	r3, [r7, #14]
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	2b11      	cmp	r3, #17
 8001d58:	f67f af71 	bls.w	8001c3e <printCrearAlarma+0x3a>
			}
		}
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <printCambiarHora>:
void printCambiarHora(uint8_t altura){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af04      	add	r7, sp, #16
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	0111      	lsls	r1, r2, #4
 8001d80:	461a      	mov	r2, r3
 8001d82:	460b      	mov	r3, r1
 8001d84:	4413      	add	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3305      	adds	r3, #5
 8001d8a:	b299      	uxth	r1, r3
 8001d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2330      	movs	r3, #48	; 0x30
 8001d94:	2276      	movs	r2, #118	; 0x76
 8001d96:	2005      	movs	r0, #5
 8001d98:	f001 f986 	bl	80030a8 <ST7735_FillRectangleFast>
	ST7735_WriteString(25, 10+51*altura, "Cambiar", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	0052      	lsls	r2, r2, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	0111      	lsls	r1, r2, #4
 8001daa:	461a      	mov	r2, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	330a      	adds	r3, #10
 8001db4:	b299      	uxth	r1, r3
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <printCambiarHora+0xa4>)
 8001db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dbc:	9202      	str	r2, [sp, #8]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	9201      	str	r2, [sp, #4]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	9200      	str	r2, [sp, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <printCambiarHora+0xa8>)
 8001dca:	2019      	movs	r0, #25
 8001dcc:	f001 f921 	bl	8003012 <ST7735_WriteString>
	ST7735_WriteString(42, 30+51*altura, "Hora", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	0052      	lsls	r2, r2, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	0111      	lsls	r1, r2, #4
 8001dde:	461a      	mov	r2, r3
 8001de0:	460b      	mov	r3, r1
 8001de2:	4413      	add	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	331e      	adds	r3, #30
 8001de8:	b299      	uxth	r1, r3
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <printCambiarHora+0xa4>)
 8001dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df0:	9202      	str	r2, [sp, #8]
 8001df2:	2200      	movs	r2, #0
 8001df4:	9201      	str	r2, [sp, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	9200      	str	r2, [sp, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <printCambiarHora+0xac>)
 8001dfe:	202a      	movs	r0, #42	; 0x2a
 8001e00:	f001 f907 	bl	8003012 <ST7735_WriteString>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	08007830 	.word	0x08007830
 8001e14:	08007838 	.word	0x08007838

08001e18 <printTime>:
void printTime(){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af04      	add	r7, sp, #16
	char hora[6];
	sprintf(hora,"%02d:%02d",sTime.Hours,sTime.Minutes);
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <printTime+0x40>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <printTime+0x40>)
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	4638      	mov	r0, r7
 8001e2a:	490c      	ldr	r1, [pc, #48]	; (8001e5c <printTime+0x44>)
 8001e2c:	f005 f952 	bl	80070d4 <siprintf>
	ST7735_WriteString(92, 0, hora, Font_7x10, ST7735_BLACK, ST7735_WHITE);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <printTime+0x48>)
 8001e32:	4639      	mov	r1, r7
 8001e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e38:	9202      	str	r2, [sp, #8]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	9201      	str	r2, [sp, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	460a      	mov	r2, r1
 8001e46:	2100      	movs	r1, #0
 8001e48:	205c      	movs	r0, #92	; 0x5c
 8001e4a:	f001 f8e2 	bl	8003012 <ST7735_WriteString>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200000ac 	.word	0x200000ac
 8001e5c:	08007840 	.word	0x08007840
 8001e60:	20000000 	.word	0x20000000

08001e64 <printOK>:
void printOK(uint8_t altura){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	0052      	lsls	r2, r2, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	0111      	lsls	r1, r2, #4
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4413      	add	r3, r2
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3305      	adds	r3, #5
 8001e86:	b299      	uxth	r1, r3
 8001e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2330      	movs	r3, #48	; 0x30
 8001e90:	2276      	movs	r2, #118	; 0x76
 8001e92:	2005      	movs	r0, #5
 8001e94:	f001 f908 	bl	80030a8 <ST7735_FillRectangleFast>
	ST7735_WriteString(48, 16+51*altura, "OK", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	0052      	lsls	r2, r2, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	0111      	lsls	r1, r2, #4
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4413      	add	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3310      	adds	r3, #16
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <printOK+0x70>)
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	9202      	str	r2, [sp, #8]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	9201      	str	r2, [sp, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	9200      	str	r2, [sp, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <printOK+0x74>)
 8001ec6:	2030      	movs	r0, #48	; 0x30
 8001ec8:	f001 f8a3 	bl	8003012 <ST7735_WriteString>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000010 	.word	0x20000010
 8001ed8:	0800784c 	.word	0x0800784c

08001edc <crearAlarma>:
void crearAlarma(RTC_TimeTypeDef* returnVal){
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b092      	sub	sp, #72	; 0x48
 8001ee0:	af04      	add	r7, sp, #16
 8001ee2:	6078      	str	r0, [r7, #4]
	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001ee4:	4ba6      	ldr	r3, [pc, #664]	; (8002180 <crearAlarma+0x2a4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	4ba6      	ldr	r3, [pc, #664]	; (8002184 <crearAlarma+0x2a8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_TimeTypeDef ON = {0};
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
	RTC_TimeTypeDef OFF = {0};
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
	ST7735_FillScreenFast(ST7735_CYAN);
 8001f12:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001f16:	f001 f94b 	bl	80031b0 <ST7735_FillScreenFast>
	ST7735_WriteString(48, 10, "ON", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001f1a:	4b9b      	ldr	r3, [pc, #620]	; (8002188 <crearAlarma+0x2ac>)
 8001f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f20:	9202      	str	r2, [sp, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	9201      	str	r2, [sp, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	9200      	str	r2, [sp, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a97      	ldr	r2, [pc, #604]	; (800218c <crearAlarma+0x2b0>)
 8001f2e:	210a      	movs	r1, #10
 8001f30:	2030      	movs	r0, #48	; 0x30
 8001f32:	f001 f86e 	bl	8003012 <ST7735_WriteString>
	char alarma[6];
	while(true){ //Selección de hora de encendido
		if(update_screen){
 8001f36:	4b92      	ldr	r3, [pc, #584]	; (8002180 <crearAlarma+0x2a4>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d019      	beq.n	8001f72 <crearAlarma+0x96>
			sprintf(alarma,"%02d:%02d",ON.Hours,ON.Minutes);
 8001f3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f42:	461a      	mov	r2, r3
 8001f44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f48:	f107 0008 	add.w	r0, r7, #8
 8001f4c:	4990      	ldr	r1, [pc, #576]	; (8002190 <crearAlarma+0x2b4>)
 8001f4e:	f005 f8c1 	bl	80070d4 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001f52:	4b90      	ldr	r3, [pc, #576]	; (8002194 <crearAlarma+0x2b8>)
 8001f54:	f107 0108 	add.w	r1, r7, #8
 8001f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5c:	9202      	str	r2, [sp, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	9201      	str	r2, [sp, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	9200      	str	r2, [sp, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	460a      	mov	r2, r1
 8001f6a:	211e      	movs	r1, #30
 8001f6c:	2024      	movs	r0, #36	; 0x24
 8001f6e:	f001 f850 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8001f72:	2101      	movs	r1, #1
 8001f74:	4888      	ldr	r0, [pc, #544]	; (8002198 <crearAlarma+0x2bc>)
 8001f76:	f002 fafb 	bl	8004570 <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d11b      	bne.n	8001fb8 <crearAlarma+0xdc>
 8001f80:	4b86      	ldr	r3, [pc, #536]	; (800219c <crearAlarma+0x2c0>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d014      	beq.n	8001fb8 <crearAlarma+0xdc>
			if(ON.Hours == 23){
 8001f8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f92:	2b17      	cmp	r3, #23
 8001f94:	d103      	bne.n	8001f9e <crearAlarma+0xc2>
				ON.Hours = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001f9c:	e005      	b.n	8001faa <crearAlarma+0xce>
			}
			else{
				ON.Hours++;
 8001f9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001faa:	4b75      	ldr	r3, [pc, #468]	; (8002180 <crearAlarma+0x2a4>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	4b74      	ldr	r3, [pc, #464]	; (8002184 <crearAlarma+0x2a8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4877      	ldr	r0, [pc, #476]	; (8002198 <crearAlarma+0x2bc>)
 8001fbc:	f002 fad8 	bl	8004570 <HAL_GPIO_ReadPin>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d11b      	bne.n	8001ffe <crearAlarma+0x122>
 8001fc6:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <crearAlarma+0x2c4>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d014      	beq.n	8001ffe <crearAlarma+0x122>
			if(ON.Hours == 0){
 8001fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <crearAlarma+0x108>
				ON.Hours = 23;
 8001fdc:	2317      	movs	r3, #23
 8001fde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001fe2:	e005      	b.n	8001ff0 <crearAlarma+0x114>
			}
			else{
				ON.Hours--;
 8001fe4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001ff0:	4b63      	ldr	r3, [pc, #396]	; (8002180 <crearAlarma+0x2a4>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <crearAlarma+0x2a8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001ffe:	2108      	movs	r1, #8
 8002000:	4865      	ldr	r0, [pc, #404]	; (8002198 <crearAlarma+0x2bc>)
 8002002:	f002 fab5 	bl	8004570 <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10a      	bne.n	8002022 <crearAlarma+0x146>
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <crearAlarma+0x2c8>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <crearAlarma+0x146>
			button2 = 1;
 800201a:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <crearAlarma+0x2c8>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
			break;
 8002020:	e024      	b.n	800206c <crearAlarma+0x190>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002022:	2101      	movs	r1, #1
 8002024:	485c      	ldr	r0, [pc, #368]	; (8002198 <crearAlarma+0x2bc>)
 8002026:	f002 faa3 	bl	8004570 <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf14      	ite	ne
 8002030:	2301      	movne	r3, #1
 8002032:	2300      	moveq	r3, #0
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b59      	ldr	r3, [pc, #356]	; (800219c <crearAlarma+0x2c0>)
 8002038:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800203a:	2104      	movs	r1, #4
 800203c:	4856      	ldr	r0, [pc, #344]	; (8002198 <crearAlarma+0x2bc>)
 800203e:	f002 fa97 	bl	8004570 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <crearAlarma+0x2c4>)
 8002050:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002052:	2108      	movs	r1, #8
 8002054:	4850      	ldr	r0, [pc, #320]	; (8002198 <crearAlarma+0x2bc>)
 8002056:	f002 fa8b 	bl	8004570 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <crearAlarma+0x2c8>)
 8002068:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 800206a:	e764      	b.n	8001f36 <crearAlarma+0x5a>
	}
	while(true){ //Selección de minuto de encendido
		if(update_screen){
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <crearAlarma+0x2a4>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d019      	beq.n	80020a8 <crearAlarma+0x1cc>
			sprintf(alarma,"%02d:%02d",ON.Hours,ON.Minutes);
 8002074:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002078:	461a      	mov	r2, r3
 800207a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800207e:	f107 0008 	add.w	r0, r7, #8
 8002082:	4943      	ldr	r1, [pc, #268]	; (8002190 <crearAlarma+0x2b4>)
 8002084:	f005 f826 	bl	80070d4 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002088:	4b42      	ldr	r3, [pc, #264]	; (8002194 <crearAlarma+0x2b8>)
 800208a:	f107 0108 	add.w	r1, r7, #8
 800208e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002092:	9202      	str	r2, [sp, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	9201      	str	r2, [sp, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	460a      	mov	r2, r1
 80020a0:	211e      	movs	r1, #30
 80020a2:	2024      	movs	r0, #36	; 0x24
 80020a4:	f000 ffb5 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80020a8:	2101      	movs	r1, #1
 80020aa:	483b      	ldr	r0, [pc, #236]	; (8002198 <crearAlarma+0x2bc>)
 80020ac:	f002 fa60 	bl	8004570 <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d11b      	bne.n	80020ee <crearAlarma+0x212>
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <crearAlarma+0x2c0>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d014      	beq.n	80020ee <crearAlarma+0x212>
			if(ON.Minutes == 59){
 80020c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020c8:	2b3b      	cmp	r3, #59	; 0x3b
 80020ca:	d103      	bne.n	80020d4 <crearAlarma+0x1f8>
				ON.Minutes = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80020d2:	e005      	b.n	80020e0 <crearAlarma+0x204>
			}
			else{
				ON.Minutes++;
 80020d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020d8:	3301      	adds	r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <crearAlarma+0x2a4>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <crearAlarma+0x2a8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 80020ee:	2104      	movs	r1, #4
 80020f0:	4829      	ldr	r0, [pc, #164]	; (8002198 <crearAlarma+0x2bc>)
 80020f2:	f002 fa3d 	bl	8004570 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d11b      	bne.n	8002134 <crearAlarma+0x258>
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <crearAlarma+0x2c4>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d014      	beq.n	8002134 <crearAlarma+0x258>
			if(ON.Minutes == 0){
 800210a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <crearAlarma+0x23e>
				ON.Minutes = 59;
 8002112:	233b      	movs	r3, #59	; 0x3b
 8002114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002118:	e005      	b.n	8002126 <crearAlarma+0x24a>
			}
			else{
				ON.Minutes--;
 800211a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800211e:	3b01      	subs	r3, #1
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <crearAlarma+0x2a4>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <crearAlarma+0x2a8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8002134:	2108      	movs	r1, #8
 8002136:	4818      	ldr	r0, [pc, #96]	; (8002198 <crearAlarma+0x2bc>)
 8002138:	f002 fa1a 	bl	8004570 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d134      	bne.n	80021ac <crearAlarma+0x2d0>
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <crearAlarma+0x2c8>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d02d      	beq.n	80021ac <crearAlarma+0x2d0>
			button2 = 1;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <crearAlarma+0x2c8>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
			break;
 8002156:	bf00      	nop
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
	}
	ST7735_FillScreenFast(ST7735_CYAN);
 8002158:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800215c:	f001 f828 	bl	80031b0 <ST7735_FillScreenFast>
	ST7735_WriteString(40, 10, "OFF", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <crearAlarma+0x2ac>)
 8002162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002166:	9202      	str	r2, [sp, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	9201      	str	r2, [sp, #4]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <crearAlarma+0x2cc>)
 8002174:	210a      	movs	r1, #10
 8002176:	2028      	movs	r0, #40	; 0x28
 8002178:	f000 ff4b 	bl	8003012 <ST7735_WriteString>
 800217c:	e03b      	b.n	80021f6 <crearAlarma+0x31a>
 800217e:	bf00      	nop
 8002180:	2000001b 	.word	0x2000001b
 8002184:	20000184 	.word	0x20000184
 8002188:	20000010 	.word	0x20000010
 800218c:	08007850 	.word	0x08007850
 8002190:	08007840 	.word	0x08007840
 8002194:	20000008 	.word	0x20000008
 8002198:	40020000 	.word	0x40020000
 800219c:	20000218 	.word	0x20000218
 80021a0:	20000219 	.word	0x20000219
 80021a4:	2000021a 	.word	0x2000021a
 80021a8:	08007854 	.word	0x08007854
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80021ac:	2101      	movs	r1, #1
 80021ae:	48a3      	ldr	r0, [pc, #652]	; (800243c <crearAlarma+0x560>)
 80021b0:	f002 f9de 	bl	8004570 <HAL_GPIO_ReadPin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b9f      	ldr	r3, [pc, #636]	; (8002440 <crearAlarma+0x564>)
 80021c2:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80021c4:	2104      	movs	r1, #4
 80021c6:	489d      	ldr	r0, [pc, #628]	; (800243c <crearAlarma+0x560>)
 80021c8:	f002 f9d2 	bl	8004570 <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	4b9a      	ldr	r3, [pc, #616]	; (8002444 <crearAlarma+0x568>)
 80021da:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80021dc:	2108      	movs	r1, #8
 80021de:	4897      	ldr	r0, [pc, #604]	; (800243c <crearAlarma+0x560>)
 80021e0:	f002 f9c6 	bl	8004570 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b95      	ldr	r3, [pc, #596]	; (8002448 <crearAlarma+0x56c>)
 80021f2:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80021f4:	e73a      	b.n	800206c <crearAlarma+0x190>
	while(true){ //Selección de hora de apagado
		if(update_screen){
 80021f6:	4b95      	ldr	r3, [pc, #596]	; (800244c <crearAlarma+0x570>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d017      	beq.n	800222e <crearAlarma+0x352>
			sprintf(alarma,"%02d.%02d",OFF.Hours,OFF.Minutes);
 80021fe:	7c3b      	ldrb	r3, [r7, #16]
 8002200:	461a      	mov	r2, r3
 8002202:	7c7b      	ldrb	r3, [r7, #17]
 8002204:	f107 0008 	add.w	r0, r7, #8
 8002208:	4991      	ldr	r1, [pc, #580]	; (8002450 <crearAlarma+0x574>)
 800220a:	f004 ff63 	bl	80070d4 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800220e:	4b91      	ldr	r3, [pc, #580]	; (8002454 <crearAlarma+0x578>)
 8002210:	f107 0108 	add.w	r1, r7, #8
 8002214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002218:	9202      	str	r2, [sp, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	9201      	str	r2, [sp, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	9200      	str	r2, [sp, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	460a      	mov	r2, r1
 8002226:	211e      	movs	r1, #30
 8002228:	2024      	movs	r0, #36	; 0x24
 800222a:	f000 fef2 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 800222e:	2101      	movs	r1, #1
 8002230:	4882      	ldr	r0, [pc, #520]	; (800243c <crearAlarma+0x560>)
 8002232:	f002 f99d 	bl	8004570 <HAL_GPIO_ReadPin>
 8002236:	4603      	mov	r3, r0
 8002238:	2b01      	cmp	r3, #1
 800223a:	d117      	bne.n	800226c <crearAlarma+0x390>
 800223c:	4b80      	ldr	r3, [pc, #512]	; (8002440 <crearAlarma+0x564>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d010      	beq.n	800226c <crearAlarma+0x390>
			if(OFF.Hours == 23){
 800224a:	7c3b      	ldrb	r3, [r7, #16]
 800224c:	2b17      	cmp	r3, #23
 800224e:	d102      	bne.n	8002256 <crearAlarma+0x37a>
				OFF.Hours = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	743b      	strb	r3, [r7, #16]
 8002254:	e003      	b.n	800225e <crearAlarma+0x382>
			}
			else{
				OFF.Hours++;
 8002256:	7c3b      	ldrb	r3, [r7, #16]
 8002258:	3301      	adds	r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	743b      	strb	r3, [r7, #16]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800225e:	4b7b      	ldr	r3, [pc, #492]	; (800244c <crearAlarma+0x570>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	4b7c      	ldr	r3, [pc, #496]	; (8002458 <crearAlarma+0x57c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 800226c:	2104      	movs	r1, #4
 800226e:	4873      	ldr	r0, [pc, #460]	; (800243c <crearAlarma+0x560>)
 8002270:	f002 f97e 	bl	8004570 <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d117      	bne.n	80022aa <crearAlarma+0x3ce>
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <crearAlarma+0x568>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <crearAlarma+0x3ce>
			if(OFF.Hours == 0){
 8002288:	7c3b      	ldrb	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <crearAlarma+0x3b8>
				OFF.Hours = 23;
 800228e:	2317      	movs	r3, #23
 8002290:	743b      	strb	r3, [r7, #16]
 8002292:	e003      	b.n	800229c <crearAlarma+0x3c0>
			}
			else{
				OFF.Hours--;
 8002294:	7c3b      	ldrb	r3, [r7, #16]
 8002296:	3b01      	subs	r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	743b      	strb	r3, [r7, #16]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800229c:	4b6b      	ldr	r3, [pc, #428]	; (800244c <crearAlarma+0x570>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <crearAlarma+0x57c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 80022aa:	2108      	movs	r1, #8
 80022ac:	4863      	ldr	r0, [pc, #396]	; (800243c <crearAlarma+0x560>)
 80022ae:	f002 f95f 	bl	8004570 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10a      	bne.n	80022ce <crearAlarma+0x3f2>
 80022b8:	4b63      	ldr	r3, [pc, #396]	; (8002448 <crearAlarma+0x56c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f083 0301 	eor.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <crearAlarma+0x3f2>
			button2 = 1;
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <crearAlarma+0x56c>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
			break;
 80022cc:	e024      	b.n	8002318 <crearAlarma+0x43c>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80022ce:	2101      	movs	r1, #1
 80022d0:	485a      	ldr	r0, [pc, #360]	; (800243c <crearAlarma+0x560>)
 80022d2:	f002 f94d 	bl	8004570 <HAL_GPIO_ReadPin>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <crearAlarma+0x564>)
 80022e4:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80022e6:	2104      	movs	r1, #4
 80022e8:	4854      	ldr	r0, [pc, #336]	; (800243c <crearAlarma+0x560>)
 80022ea:	f002 f941 	bl	8004570 <HAL_GPIO_ReadPin>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b52      	ldr	r3, [pc, #328]	; (8002444 <crearAlarma+0x568>)
 80022fc:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80022fe:	2108      	movs	r1, #8
 8002300:	484e      	ldr	r0, [pc, #312]	; (800243c <crearAlarma+0x560>)
 8002302:	f002 f935 	bl	8004570 <HAL_GPIO_ReadPin>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <crearAlarma+0x56c>)
 8002314:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8002316:	e76e      	b.n	80021f6 <crearAlarma+0x31a>
	}
	while(true){ //Selección de minuto de apagado
		if(update_screen){
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <crearAlarma+0x570>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d017      	beq.n	8002350 <crearAlarma+0x474>
			sprintf(alarma,"%02d.%02d",OFF.Hours,OFF.Minutes);
 8002320:	7c3b      	ldrb	r3, [r7, #16]
 8002322:	461a      	mov	r2, r3
 8002324:	7c7b      	ldrb	r3, [r7, #17]
 8002326:	f107 0008 	add.w	r0, r7, #8
 800232a:	4949      	ldr	r1, [pc, #292]	; (8002450 <crearAlarma+0x574>)
 800232c:	f004 fed2 	bl	80070d4 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002330:	4b48      	ldr	r3, [pc, #288]	; (8002454 <crearAlarma+0x578>)
 8002332:	f107 0108 	add.w	r1, r7, #8
 8002336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800233a:	9202      	str	r2, [sp, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	9201      	str	r2, [sp, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	9200      	str	r2, [sp, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	460a      	mov	r2, r1
 8002348:	211e      	movs	r1, #30
 800234a:	2024      	movs	r0, #36	; 0x24
 800234c:	f000 fe61 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8002350:	2101      	movs	r1, #1
 8002352:	483a      	ldr	r0, [pc, #232]	; (800243c <crearAlarma+0x560>)
 8002354:	f002 f90c 	bl	8004570 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d117      	bne.n	800238e <crearAlarma+0x4b2>
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <crearAlarma+0x564>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <crearAlarma+0x4b2>
			if(OFF.Minutes == 59){
 800236c:	7c7b      	ldrb	r3, [r7, #17]
 800236e:	2b3b      	cmp	r3, #59	; 0x3b
 8002370:	d102      	bne.n	8002378 <crearAlarma+0x49c>
				OFF.Minutes = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	747b      	strb	r3, [r7, #17]
 8002376:	e003      	b.n	8002380 <crearAlarma+0x4a4>
			}
			else{
				OFF.Minutes++;
 8002378:	7c7b      	ldrb	r3, [r7, #17]
 800237a:	3301      	adds	r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	747b      	strb	r3, [r7, #17]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <crearAlarma+0x570>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <crearAlarma+0x57c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 800238e:	2104      	movs	r1, #4
 8002390:	482a      	ldr	r0, [pc, #168]	; (800243c <crearAlarma+0x560>)
 8002392:	f002 f8ed 	bl	8004570 <HAL_GPIO_ReadPin>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d117      	bne.n	80023cc <crearAlarma+0x4f0>
 800239c:	4b29      	ldr	r3, [pc, #164]	; (8002444 <crearAlarma+0x568>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <crearAlarma+0x4f0>
			if(OFF.Minutes == 0){
 80023aa:	7c7b      	ldrb	r3, [r7, #17]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <crearAlarma+0x4da>
				OFF.Minutes = 59;
 80023b0:	233b      	movs	r3, #59	; 0x3b
 80023b2:	747b      	strb	r3, [r7, #17]
 80023b4:	e003      	b.n	80023be <crearAlarma+0x4e2>
			}
			else{
				OFF.Minutes--;
 80023b6:	7c7b      	ldrb	r3, [r7, #17]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	747b      	strb	r3, [r7, #17]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <crearAlarma+0x570>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <crearAlarma+0x57c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 80023cc:	2108      	movs	r1, #8
 80023ce:	481b      	ldr	r0, [pc, #108]	; (800243c <crearAlarma+0x560>)
 80023d0:	f002 f8ce 	bl	8004570 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10a      	bne.n	80023f0 <crearAlarma+0x514>
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <crearAlarma+0x56c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f083 0301 	eor.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <crearAlarma+0x514>
			button2 = 1;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <crearAlarma+0x56c>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
			break;
 80023ee:	e035      	b.n	800245c <crearAlarma+0x580>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80023f0:	2101      	movs	r1, #1
 80023f2:	4812      	ldr	r0, [pc, #72]	; (800243c <crearAlarma+0x560>)
 80023f4:	f002 f8bc 	bl	8004570 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf14      	ite	ne
 80023fe:	2301      	movne	r3, #1
 8002400:	2300      	moveq	r3, #0
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <crearAlarma+0x564>)
 8002406:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002408:	2104      	movs	r1, #4
 800240a:	480c      	ldr	r0, [pc, #48]	; (800243c <crearAlarma+0x560>)
 800240c:	f002 f8b0 	bl	8004570 <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <crearAlarma+0x568>)
 800241e:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002420:	2108      	movs	r1, #8
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <crearAlarma+0x560>)
 8002424:	f002 f8a4 	bl	8004570 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <crearAlarma+0x56c>)
 8002436:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8002438:	e76e      	b.n	8002318 <crearAlarma+0x43c>
 800243a:	bf00      	nop
 800243c:	40020000 	.word	0x40020000
 8002440:	20000218 	.word	0x20000218
 8002444:	20000219 	.word	0x20000219
 8002448:	2000021a 	.word	0x2000021a
 800244c:	2000001b 	.word	0x2000001b
 8002450:	08007858 	.word	0x08007858
 8002454:	20000008 	.word	0x20000008
 8002458:	20000184 	.word	0x20000184
	}
	returnVal[0] = ON;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	461d      	mov	r5, r3
 8002460:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	602b      	str	r3, [r5, #0]
	returnVal[1] = OFF;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3314      	adds	r3, #20
 8002470:	461d      	mov	r5, r3
 8002472:	f107 0410 	add.w	r4, r7, #16
 8002476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	602b      	str	r3, [r5, #0]
}
 800247e:	bf00      	nop
 8002480:	3738      	adds	r7, #56	; 0x38
 8002482:	46bd      	mov	sp, r7
 8002484:	bdb0      	pop	{r4, r5, r7, pc}
 8002486:	bf00      	nop

08002488 <CambiarHora>:

void CambiarHora(){
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af04      	add	r7, sp, #16
	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800248e:	4ba5      	ldr	r3, [pc, #660]	; (8002724 <CambiarHora+0x29c>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	4ba4      	ldr	r3, [pc, #656]	; (8002728 <CambiarHora+0x2a0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_TimeTypeDef Time = sTime;
 800249c:	4ba3      	ldr	r3, [pc, #652]	; (800272c <CambiarHora+0x2a4>)
 800249e:	f107 040c 	add.w	r4, r7, #12
 80024a2:	461d      	mov	r5, r3
 80024a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	6023      	str	r3, [r4, #0]
	ST7735_FillScreenFast(ST7735_CYAN);
 80024ac:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80024b0:	f000 fe7e 	bl	80031b0 <ST7735_FillScreenFast>
	ST7735_WriteString(42, 10, "Hora", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 80024b4:	4b9e      	ldr	r3, [pc, #632]	; (8002730 <CambiarHora+0x2a8>)
 80024b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ba:	9202      	str	r2, [sp, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	9201      	str	r2, [sp, #4]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	9200      	str	r2, [sp, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a9b      	ldr	r2, [pc, #620]	; (8002734 <CambiarHora+0x2ac>)
 80024c8:	210a      	movs	r1, #10
 80024ca:	202a      	movs	r0, #42	; 0x2a
 80024cc:	f000 fda1 	bl	8003012 <ST7735_WriteString>
	char hora[6];
	while(true){ //Selección de hora de encendido
		if(update_screen){
 80024d0:	4b94      	ldr	r3, [pc, #592]	; (8002724 <CambiarHora+0x29c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d015      	beq.n	8002504 <CambiarHora+0x7c>
			sprintf(hora,"%02d:%02d",Time.Hours,Time.Minutes);
 80024d8:	7b3b      	ldrb	r3, [r7, #12]
 80024da:	461a      	mov	r2, r3
 80024dc:	7b7b      	ldrb	r3, [r7, #13]
 80024de:	1d38      	adds	r0, r7, #4
 80024e0:	4995      	ldr	r1, [pc, #596]	; (8002738 <CambiarHora+0x2b0>)
 80024e2:	f004 fdf7 	bl	80070d4 <siprintf>
			ST7735_WriteString(36, 30, hora, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80024e6:	4b95      	ldr	r3, [pc, #596]	; (800273c <CambiarHora+0x2b4>)
 80024e8:	1d39      	adds	r1, r7, #4
 80024ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ee:	9202      	str	r2, [sp, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	9201      	str	r2, [sp, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	460a      	mov	r2, r1
 80024fc:	211e      	movs	r1, #30
 80024fe:	2024      	movs	r0, #36	; 0x24
 8002500:	f000 fd87 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8002504:	2101      	movs	r1, #1
 8002506:	488e      	ldr	r0, [pc, #568]	; (8002740 <CambiarHora+0x2b8>)
 8002508:	f002 f832 	bl	8004570 <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d117      	bne.n	8002542 <CambiarHora+0xba>
 8002512:	4b8c      	ldr	r3, [pc, #560]	; (8002744 <CambiarHora+0x2bc>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <CambiarHora+0xba>
			if(Time.Hours == 23){
 8002520:	7b3b      	ldrb	r3, [r7, #12]
 8002522:	2b17      	cmp	r3, #23
 8002524:	d102      	bne.n	800252c <CambiarHora+0xa4>
				Time.Hours = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	733b      	strb	r3, [r7, #12]
 800252a:	e003      	b.n	8002534 <CambiarHora+0xac>
			}
			else{
				Time.Hours++;
 800252c:	7b3b      	ldrb	r3, [r7, #12]
 800252e:	3301      	adds	r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	733b      	strb	r3, [r7, #12]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <CambiarHora+0x29c>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <CambiarHora+0x2a0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002542:	2104      	movs	r1, #4
 8002544:	487e      	ldr	r0, [pc, #504]	; (8002740 <CambiarHora+0x2b8>)
 8002546:	f002 f813 	bl	8004570 <HAL_GPIO_ReadPin>
 800254a:	4603      	mov	r3, r0
 800254c:	2b01      	cmp	r3, #1
 800254e:	d117      	bne.n	8002580 <CambiarHora+0xf8>
 8002550:	4b7d      	ldr	r3, [pc, #500]	; (8002748 <CambiarHora+0x2c0>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f083 0301 	eor.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <CambiarHora+0xf8>
			if(Time.Hours == 0){
 800255e:	7b3b      	ldrb	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <CambiarHora+0xe2>
				Time.Hours = 23;
 8002564:	2317      	movs	r3, #23
 8002566:	733b      	strb	r3, [r7, #12]
 8002568:	e003      	b.n	8002572 <CambiarHora+0xea>
			}
			else{
				Time.Hours--;
 800256a:	7b3b      	ldrb	r3, [r7, #12]
 800256c:	3b01      	subs	r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	733b      	strb	r3, [r7, #12]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002572:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <CambiarHora+0x29c>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <CambiarHora+0x2a0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8002580:	2108      	movs	r1, #8
 8002582:	486f      	ldr	r0, [pc, #444]	; (8002740 <CambiarHora+0x2b8>)
 8002584:	f001 fff4 	bl	8004570 <HAL_GPIO_ReadPin>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10a      	bne.n	80025a4 <CambiarHora+0x11c>
 800258e:	4b6f      	ldr	r3, [pc, #444]	; (800274c <CambiarHora+0x2c4>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <CambiarHora+0x11c>
			button2 = 1;
 800259c:	4b6b      	ldr	r3, [pc, #428]	; (800274c <CambiarHora+0x2c4>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
			break;
 80025a2:	e024      	b.n	80025ee <CambiarHora+0x166>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80025a4:	2101      	movs	r1, #1
 80025a6:	4866      	ldr	r0, [pc, #408]	; (8002740 <CambiarHora+0x2b8>)
 80025a8:	f001 ffe2 	bl	8004570 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf14      	ite	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	2300      	moveq	r3, #0
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b62      	ldr	r3, [pc, #392]	; (8002744 <CambiarHora+0x2bc>)
 80025ba:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80025bc:	2104      	movs	r1, #4
 80025be:	4860      	ldr	r0, [pc, #384]	; (8002740 <CambiarHora+0x2b8>)
 80025c0:	f001 ffd6 	bl	8004570 <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <CambiarHora+0x2c0>)
 80025d2:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80025d4:	2108      	movs	r1, #8
 80025d6:	485a      	ldr	r0, [pc, #360]	; (8002740 <CambiarHora+0x2b8>)
 80025d8:	f001 ffca 	bl	8004570 <HAL_GPIO_ReadPin>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b58      	ldr	r3, [pc, #352]	; (800274c <CambiarHora+0x2c4>)
 80025ea:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80025ec:	e770      	b.n	80024d0 <CambiarHora+0x48>
	}
	while(true){ //Selección de minuto de encendido
		if(update_screen){
 80025ee:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <CambiarHora+0x29c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <CambiarHora+0x19a>
			sprintf(hora,"%02d:%02d",Time.Hours,Time.Minutes);
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	461a      	mov	r2, r3
 80025fa:	7b7b      	ldrb	r3, [r7, #13]
 80025fc:	1d38      	adds	r0, r7, #4
 80025fe:	494e      	ldr	r1, [pc, #312]	; (8002738 <CambiarHora+0x2b0>)
 8002600:	f004 fd68 	bl	80070d4 <siprintf>
			ST7735_WriteString(36, 30, hora, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002604:	4b4d      	ldr	r3, [pc, #308]	; (800273c <CambiarHora+0x2b4>)
 8002606:	1d39      	adds	r1, r7, #4
 8002608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260c:	9202      	str	r2, [sp, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	9201      	str	r2, [sp, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	9200      	str	r2, [sp, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	460a      	mov	r2, r1
 800261a:	211e      	movs	r1, #30
 800261c:	2024      	movs	r0, #36	; 0x24
 800261e:	f000 fcf8 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8002622:	2101      	movs	r1, #1
 8002624:	4846      	ldr	r0, [pc, #280]	; (8002740 <CambiarHora+0x2b8>)
 8002626:	f001 ffa3 	bl	8004570 <HAL_GPIO_ReadPin>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	d117      	bne.n	8002660 <CambiarHora+0x1d8>
 8002630:	4b44      	ldr	r3, [pc, #272]	; (8002744 <CambiarHora+0x2bc>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f083 0301 	eor.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <CambiarHora+0x1d8>
			if(Time.Minutes == 59){
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	2b3b      	cmp	r3, #59	; 0x3b
 8002642:	d102      	bne.n	800264a <CambiarHora+0x1c2>
				Time.Minutes = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	737b      	strb	r3, [r7, #13]
 8002648:	e003      	b.n	8002652 <CambiarHora+0x1ca>
			}
			else{
				Time.Minutes++;
 800264a:	7b7b      	ldrb	r3, [r7, #13]
 800264c:	3301      	adds	r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	737b      	strb	r3, [r7, #13]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002652:	4b34      	ldr	r3, [pc, #208]	; (8002724 <CambiarHora+0x29c>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	4b33      	ldr	r3, [pc, #204]	; (8002728 <CambiarHora+0x2a0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002660:	2104      	movs	r1, #4
 8002662:	4837      	ldr	r0, [pc, #220]	; (8002740 <CambiarHora+0x2b8>)
 8002664:	f001 ff84 	bl	8004570 <HAL_GPIO_ReadPin>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d117      	bne.n	800269e <CambiarHora+0x216>
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <CambiarHora+0x2c0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f083 0301 	eor.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <CambiarHora+0x216>
			if(Time.Minutes == 0){
 800267c:	7b7b      	ldrb	r3, [r7, #13]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <CambiarHora+0x200>
				Time.Minutes = 59;
 8002682:	233b      	movs	r3, #59	; 0x3b
 8002684:	737b      	strb	r3, [r7, #13]
 8002686:	e003      	b.n	8002690 <CambiarHora+0x208>
			}
			else{
				Time.Minutes--;
 8002688:	7b7b      	ldrb	r3, [r7, #13]
 800268a:	3b01      	subs	r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	737b      	strb	r3, [r7, #13]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <CambiarHora+0x29c>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <CambiarHora+0x2a0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 800269e:	2108      	movs	r1, #8
 80026a0:	4827      	ldr	r0, [pc, #156]	; (8002740 <CambiarHora+0x2b8>)
 80026a2:	f001 ff65 	bl	8004570 <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10a      	bne.n	80026c2 <CambiarHora+0x23a>
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <CambiarHora+0x2c4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <CambiarHora+0x23a>
			button2 = 1;
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <CambiarHora+0x2c4>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
			break;
 80026c0:	e024      	b.n	800270c <CambiarHora+0x284>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80026c2:	2101      	movs	r1, #1
 80026c4:	481e      	ldr	r0, [pc, #120]	; (8002740 <CambiarHora+0x2b8>)
 80026c6:	f001 ff53 	bl	8004570 <HAL_GPIO_ReadPin>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <CambiarHora+0x2bc>)
 80026d8:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80026da:	2104      	movs	r1, #4
 80026dc:	4818      	ldr	r0, [pc, #96]	; (8002740 <CambiarHora+0x2b8>)
 80026de:	f001 ff47 	bl	8004570 <HAL_GPIO_ReadPin>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <CambiarHora+0x2c0>)
 80026f0:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80026f2:	2108      	movs	r1, #8
 80026f4:	4812      	ldr	r0, [pc, #72]	; (8002740 <CambiarHora+0x2b8>)
 80026f6:	f001 ff3b 	bl	8004570 <HAL_GPIO_ReadPin>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <CambiarHora+0x2c4>)
 8002708:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 800270a:	e770      	b.n	80025ee <CambiarHora+0x166>
	}
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2200      	movs	r2, #0
 8002712:	4619      	mov	r1, r3
 8002714:	480e      	ldr	r0, [pc, #56]	; (8002750 <CambiarHora+0x2c8>)
 8002716:	f002 fd3f 	bl	8005198 <HAL_RTC_SetTime>
}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	bf00      	nop
 8002724:	2000001b 	.word	0x2000001b
 8002728:	20000184 	.word	0x20000184
 800272c:	200000ac 	.word	0x200000ac
 8002730:	20000010 	.word	0x20000010
 8002734:	08007838 	.word	0x08007838
 8002738:	08007840 	.word	0x08007840
 800273c:	20000008 	.word	0x20000008
 8002740:	40020000 	.word	0x40020000
 8002744:	20000218 	.word	0x20000218
 8002748:	20000219 	.word	0x20000219
 800274c:	2000021a 	.word	0x2000021a
 8002750:	2000010c 	.word	0x2000010c

08002754 <AjustarHumedad>:

void AjustarHumedad(){
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af04      	add	r7, sp, #16
	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800275a:	4b9d      	ldr	r3, [pc, #628]	; (80029d0 <AjustarHumedad+0x27c>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	4b9c      	ldr	r3, [pc, #624]	; (80029d4 <AjustarHumedad+0x280>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
	ST7735_FillScreenFast(ST7735_CYAN);
 8002768:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800276c:	f000 fd20 	bl	80031b0 <ST7735_FillScreenFast>
	ST7735_WriteString(16, 10, "MINIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8002770:	4b99      	ldr	r3, [pc, #612]	; (80029d8 <AjustarHumedad+0x284>)
 8002772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002776:	9202      	str	r2, [sp, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	9201      	str	r2, [sp, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	9200      	str	r2, [sp, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a96      	ldr	r2, [pc, #600]	; (80029dc <AjustarHumedad+0x288>)
 8002784:	210a      	movs	r1, #10
 8002786:	2010      	movs	r0, #16
 8002788:	f000 fc43 	bl	8003012 <ST7735_WriteString>
	char valor[4];
	while(true){ //Selección de humedad minima
		if(update_screen){
 800278c:	4b90      	ldr	r3, [pc, #576]	; (80029d0 <AjustarHumedad+0x27c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d016      	beq.n	80027c2 <AjustarHumedad+0x6e>
			sprintf(valor,"%02d%c",humedad_minima,37);
 8002794:	4b92      	ldr	r3, [pc, #584]	; (80029e0 <AjustarHumedad+0x28c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	1d38      	adds	r0, r7, #4
 800279c:	2325      	movs	r3, #37	; 0x25
 800279e:	4991      	ldr	r1, [pc, #580]	; (80029e4 <AjustarHumedad+0x290>)
 80027a0:	f004 fc98 	bl	80070d4 <siprintf>
			ST7735_WriteString(47, 40, valor, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80027a4:	4b90      	ldr	r3, [pc, #576]	; (80029e8 <AjustarHumedad+0x294>)
 80027a6:	1d39      	adds	r1, r7, #4
 80027a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ac:	9202      	str	r2, [sp, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	9201      	str	r2, [sp, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	460a      	mov	r2, r1
 80027ba:	2128      	movs	r1, #40	; 0x28
 80027bc:	202f      	movs	r0, #47	; 0x2f
 80027be:	f000 fc28 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80027c2:	2101      	movs	r1, #1
 80027c4:	4889      	ldr	r0, [pc, #548]	; (80029ec <AjustarHumedad+0x298>)
 80027c6:	f001 fed3 	bl	8004570 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d11b      	bne.n	8002808 <AjustarHumedad+0xb4>
 80027d0:	4b87      	ldr	r3, [pc, #540]	; (80029f0 <AjustarHumedad+0x29c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	f083 0301 	eor.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d014      	beq.n	8002808 <AjustarHumedad+0xb4>
			if(humedad_minima == 100){
 80027de:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <AjustarHumedad+0x28c>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d103      	bne.n	80027ee <AjustarHumedad+0x9a>
				humedad_minima = 0;
 80027e6:	4b7e      	ldr	r3, [pc, #504]	; (80029e0 <AjustarHumedad+0x28c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e005      	b.n	80027fa <AjustarHumedad+0xa6>
			}
			else{
				humedad_minima++;
 80027ee:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <AjustarHumedad+0x28c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <AjustarHumedad+0x28c>)
 80027f8:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80027fa:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <AjustarHumedad+0x27c>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	4b74      	ldr	r3, [pc, #464]	; (80029d4 <AjustarHumedad+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002808:	2104      	movs	r1, #4
 800280a:	4878      	ldr	r0, [pc, #480]	; (80029ec <AjustarHumedad+0x298>)
 800280c:	f001 feb0 	bl	8004570 <HAL_GPIO_ReadPin>
 8002810:	4603      	mov	r3, r0
 8002812:	2b01      	cmp	r3, #1
 8002814:	d11b      	bne.n	800284e <AjustarHumedad+0xfa>
 8002816:	4b77      	ldr	r3, [pc, #476]	; (80029f4 <AjustarHumedad+0x2a0>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	f083 0301 	eor.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d014      	beq.n	800284e <AjustarHumedad+0xfa>
			if(humedad_minima == 0){
 8002824:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <AjustarHumedad+0x28c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <AjustarHumedad+0xe0>
				humedad_minima = 100;
 800282c:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <AjustarHumedad+0x28c>)
 800282e:	2264      	movs	r2, #100	; 0x64
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e005      	b.n	8002840 <AjustarHumedad+0xec>
			}
			else{
				humedad_minima--;
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <AjustarHumedad+0x28c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <AjustarHumedad+0x28c>)
 800283e:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002840:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <AjustarHumedad+0x27c>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <AjustarHumedad+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 800284e:	2108      	movs	r1, #8
 8002850:	4866      	ldr	r0, [pc, #408]	; (80029ec <AjustarHumedad+0x298>)
 8002852:	f001 fe8d 	bl	8004570 <HAL_GPIO_ReadPin>
 8002856:	4603      	mov	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d11d      	bne.n	8002898 <AjustarHumedad+0x144>
 800285c:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <AjustarHumedad+0x2a4>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <AjustarHumedad+0x144>
			button2 = 1;
 800286a:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <AjustarHumedad+0x2a4>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
			break;
 8002870:	bf00      	nop
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
	}
	ST7735_FillScreenFast(ST7735_CYAN);
 8002872:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002876:	f000 fc9b 	bl	80031b0 <ST7735_FillScreenFast>
	ST7735_WriteString(16, 10, "MAXIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 800287a:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <AjustarHumedad+0x284>)
 800287c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002880:	9202      	str	r2, [sp, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	9201      	str	r2, [sp, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	9200      	str	r2, [sp, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <AjustarHumedad+0x2a8>)
 800288e:	210a      	movs	r1, #10
 8002890:	2010      	movs	r0, #16
 8002892:	f000 fbbe 	bl	8003012 <ST7735_WriteString>
 8002896:	e024      	b.n	80028e2 <AjustarHumedad+0x18e>
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002898:	2101      	movs	r1, #1
 800289a:	4854      	ldr	r0, [pc, #336]	; (80029ec <AjustarHumedad+0x298>)
 800289c:	f001 fe68 	bl	8004570 <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <AjustarHumedad+0x29c>)
 80028ae:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80028b0:	2104      	movs	r1, #4
 80028b2:	484e      	ldr	r0, [pc, #312]	; (80029ec <AjustarHumedad+0x298>)
 80028b4:	f001 fe5c 	bl	8004570 <HAL_GPIO_ReadPin>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b4b      	ldr	r3, [pc, #300]	; (80029f4 <AjustarHumedad+0x2a0>)
 80028c6:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80028c8:	2108      	movs	r1, #8
 80028ca:	4848      	ldr	r0, [pc, #288]	; (80029ec <AjustarHumedad+0x298>)
 80028cc:	f001 fe50 	bl	8004570 <HAL_GPIO_ReadPin>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <AjustarHumedad+0x2a4>)
 80028de:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80028e0:	e754      	b.n	800278c <AjustarHumedad+0x38>
	while(true){ //Selección de humedad maxima
		if(update_screen){
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <AjustarHumedad+0x27c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <AjustarHumedad+0x1c4>
			sprintf(valor,"%02d%c",humedad_maxima,37);
 80028ea:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <AjustarHumedad+0x2ac>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	1d38      	adds	r0, r7, #4
 80028f2:	2325      	movs	r3, #37	; 0x25
 80028f4:	493b      	ldr	r1, [pc, #236]	; (80029e4 <AjustarHumedad+0x290>)
 80028f6:	f004 fbed 	bl	80070d4 <siprintf>
			ST7735_WriteString(47, 40, valor, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80028fa:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <AjustarHumedad+0x294>)
 80028fc:	1d39      	adds	r1, r7, #4
 80028fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002902:	9202      	str	r2, [sp, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	9201      	str	r2, [sp, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	9200      	str	r2, [sp, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	460a      	mov	r2, r1
 8002910:	2128      	movs	r1, #40	; 0x28
 8002912:	202f      	movs	r0, #47	; 0x2f
 8002914:	f000 fb7d 	bl	8003012 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8002918:	2101      	movs	r1, #1
 800291a:	4834      	ldr	r0, [pc, #208]	; (80029ec <AjustarHumedad+0x298>)
 800291c:	f001 fe28 	bl	8004570 <HAL_GPIO_ReadPin>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d11c      	bne.n	8002960 <AjustarHumedad+0x20c>
 8002926:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <AjustarHumedad+0x29c>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	f083 0301 	eor.w	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <AjustarHumedad+0x20c>
			if(humedad_maxima == 100){
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <AjustarHumedad+0x2ac>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d104      	bne.n	8002946 <AjustarHumedad+0x1f2>
				humedad_maxima = humedad_minima;
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <AjustarHumedad+0x28c>)
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <AjustarHumedad+0x2ac>)
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e005      	b.n	8002952 <AjustarHumedad+0x1fe>
			}
			else{
				humedad_maxima++;
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <AjustarHumedad+0x2ac>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <AjustarHumedad+0x2ac>)
 8002950:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <AjustarHumedad+0x27c>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <AjustarHumedad+0x280>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002960:	2104      	movs	r1, #4
 8002962:	4822      	ldr	r0, [pc, #136]	; (80029ec <AjustarHumedad+0x298>)
 8002964:	f001 fe04 	bl	8004570 <HAL_GPIO_ReadPin>
 8002968:	4603      	mov	r3, r0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d11d      	bne.n	80029aa <AjustarHumedad+0x256>
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <AjustarHumedad+0x2a0>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	f083 0301 	eor.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d016      	beq.n	80029aa <AjustarHumedad+0x256>
			if(humedad_maxima <= humedad_minima){
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <AjustarHumedad+0x2ac>)
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <AjustarHumedad+0x28c>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d803      	bhi.n	8002990 <AjustarHumedad+0x23c>
				humedad_maxima = 100;
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <AjustarHumedad+0x2ac>)
 800298a:	2264      	movs	r2, #100	; 0x64
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e005      	b.n	800299c <AjustarHumedad+0x248>
			}
			else{
				humedad_maxima--;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <AjustarHumedad+0x2ac>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	3b01      	subs	r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <AjustarHumedad+0x2ac>)
 800299a:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <AjustarHumedad+0x27c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <AjustarHumedad+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 80029aa:	2108      	movs	r1, #8
 80029ac:	480f      	ldr	r0, [pc, #60]	; (80029ec <AjustarHumedad+0x298>)
 80029ae:	f001 fddf 	bl	8004570 <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d125      	bne.n	8002a04 <AjustarHumedad+0x2b0>
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <AjustarHumedad+0x2a4>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01e      	beq.n	8002a04 <AjustarHumedad+0x2b0>
			button2 = 1;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <AjustarHumedad+0x2a4>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
			break;
 80029cc:	e03f      	b.n	8002a4e <AjustarHumedad+0x2fa>
 80029ce:	bf00      	nop
 80029d0:	2000001b 	.word	0x2000001b
 80029d4:	20000184 	.word	0x20000184
 80029d8:	20000010 	.word	0x20000010
 80029dc:	08007864 	.word	0x08007864
 80029e0:	20000018 	.word	0x20000018
 80029e4:	0800786c 	.word	0x0800786c
 80029e8:	20000008 	.word	0x20000008
 80029ec:	40020000 	.word	0x40020000
 80029f0:	20000218 	.word	0x20000218
 80029f4:	20000219 	.word	0x20000219
 80029f8:	2000021a 	.word	0x2000021a
 80029fc:	08007874 	.word	0x08007874
 8002a00:	20000019 	.word	0x20000019
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002a04:	2101      	movs	r1, #1
 8002a06:	481a      	ldr	r0, [pc, #104]	; (8002a70 <AjustarHumedad+0x31c>)
 8002a08:	f001 fdb2 	bl	8004570 <HAL_GPIO_ReadPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf14      	ite	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	2300      	moveq	r3, #0
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <AjustarHumedad+0x320>)
 8002a1a:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4814      	ldr	r0, [pc, #80]	; (8002a70 <AjustarHumedad+0x31c>)
 8002a20:	f001 fda6 	bl	8004570 <HAL_GPIO_ReadPin>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf14      	ite	ne
 8002a2a:	2301      	movne	r3, #1
 8002a2c:	2300      	moveq	r3, #0
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <AjustarHumedad+0x324>)
 8002a32:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002a34:	2108      	movs	r1, #8
 8002a36:	480e      	ldr	r0, [pc, #56]	; (8002a70 <AjustarHumedad+0x31c>)
 8002a38:	f001 fd9a 	bl	8004570 <HAL_GPIO_ReadPin>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <AjustarHumedad+0x328>)
 8002a4a:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8002a4c:	e749      	b.n	80028e2 <AjustarHumedad+0x18e>
	}
	humedad_media = (humedad_minima+humedad_maxima)/2;
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <AjustarHumedad+0x32c>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <AjustarHumedad+0x330>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	0fda      	lsrs	r2, r3, #31
 8002a5c:	4413      	add	r3, r2
 8002a5e:	105b      	asrs	r3, r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <AjustarHumedad+0x334>)
 8002a64:	701a      	strb	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40020000 	.word	0x40020000
 8002a74:	20000218 	.word	0x20000218
 8002a78:	20000219 	.word	0x20000219
 8002a7c:	2000021a 	.word	0x2000021a
 8002a80:	20000018 	.word	0x20000018
 8002a84:	20000019 	.word	0x20000019
 8002a88:	2000001a 	.word	0x2000001a

08002a8c <HAL_GPIO_EXTI_Callback>:



//	Interrupción de botones
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_press = 0;
	if(HAL_GetTick() < last_press){
 8002a96:	f000 fe81 	bl	800379c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_GPIO_EXTI_Callback+0x60>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d31f      	bcc.n	8002ae4 <HAL_GPIO_EXTI_Callback+0x58>
		return;
	}

	if(GPIO_Pin==GPIO_PIN_0){
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_GPIO_EXTI_Callback+0x24>
		AbrirValvula();
 8002aaa:	f7fe f8ff 	bl	8000cac <AbrirValvula>
 8002aae:	e012      	b.n	8002ad6 <HAL_GPIO_EXTI_Callback+0x4a>
	}
	else if(GPIO_Pin==GPIO_PIN_2){
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d102      	bne.n	8002abc <HAL_GPIO_EXTI_Callback+0x30>
		CerrarValvula();
 8002ab6:	f7fe f905 	bl	8000cc4 <CerrarValvula>
 8002aba:	e00c      	b.n	8002ad6 <HAL_GPIO_EXTI_Callback+0x4a>
	}
	else if(GPIO_Pin==GPIO_PIN_3){
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d109      	bne.n	8002ad6 <HAL_GPIO_EXTI_Callback+0x4a>
		pantalla = Modo_Actual;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_GPIO_EXTI_Callback+0x64>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
		update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x68>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
		//HAL_TIM_Base_Start_IT(&htim3);
	}
	last_press = HAL_GetTick()+250;
 8002ad6:	f000 fe61 	bl	800379c <HAL_GetTick>
 8002ada:	4603      	mov	r3, r0
 8002adc:	33fa      	adds	r3, #250	; 0xfa
 8002ade:	4a03      	ldr	r2, [pc, #12]	; (8002aec <HAL_GPIO_EXTI_Callback+0x60>)
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e000      	b.n	8002ae6 <HAL_GPIO_EXTI_Callback+0x5a>
		return;
 8002ae4:	bf00      	nop
}
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000234 	.word	0x20000234
 8002af0:	20000215 	.word	0x20000215
 8002af4:	2000001b 	.word	0x2000001b
 8002af8:	20000184 	.word	0x20000184

08002afc <HAL_RTC_AlarmAEventCallback>:
//	Interrupción de RTC
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, isTimeToTurnOn);
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0e:	4807      	ldr	r0, [pc, #28]	; (8002b2c <HAL_RTC_AlarmAEventCallback+0x30>)
 8002b10:	f001 fd46 	bl	80045a0 <HAL_GPIO_WritePin>
	isTimeToTurnOn ^= isTimeToTurnOn;
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
	nextAlarma();
 8002b1a:	f000 f853 	bl	8002bc4 <nextAlarma>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2000001c 	.word	0x2000001c
 8002b2c:	40020c00 	.word	0x40020c00

08002b30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12b      	bne.n	8002b9a <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(pantalla == Estado)
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	4917      	ldr	r1, [pc, #92]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002b4e:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b50:	f002 fbbc 	bl	80052cc <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); //La fecha no se usa
 8002b54:	2200      	movs	r2, #0
 8002b56:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002b58:	4815      	ldr	r0, [pc, #84]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b5a:	f002 fc99 	bl	8005490 <HAL_RTC_GetDate>
			//Linea añadida porque para que HAL_RTC_GetTime funcione correctamente, es necesario
			//Llamar a HAL_RTC_GetDate despues
			printTime();
 8002b5e:	f7ff f95b 	bl	8001e18 <printTime>
			}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		#endif
	}
}
 8002b62:	e01a      	b.n	8002b9a <HAL_TIM_PeriodElapsedCallback+0x6a>
			pantalla = Estado;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b78:	2009      	movs	r0, #9
 8002b7a:	f001 fb4c 	bl	8004216 <HAL_NVIC_EnableIRQ>
			if(modo == Manual){
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_TIM_PeriodElapsedCallback+0x62>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b86:	2006      	movs	r0, #6
 8002b88:	f001 fb45 	bl	8004216 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b8c:	2008      	movs	r0, #8
 8002b8e:	f001 fb42 	bl	8004216 <HAL_NVIC_EnableIRQ>
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2200      	movs	r2, #0
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	20000215 	.word	0x20000215
 8002bac:	200000ac 	.word	0x200000ac
 8002bb0:	2000010c 	.word	0x2000010c
 8002bb4:	200000c0 	.word	0x200000c0
 8002bb8:	2000001b 	.word	0x2000001b
 8002bbc:	20000184 	.word	0x20000184
 8002bc0:	20000214 	.word	0x20000214

08002bc4 <nextAlarma>:
void nextAlarma(){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
	siguiente_alarma = (siguiente_alarma+1)%num_alarmas;
 8002bca:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <nextAlarma+0xdc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <nextAlarma+0xe0>)
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bd8:	fb01 f202 	mul.w	r2, r1, r2
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <nextAlarma+0xdc>)
 8002be0:	6013      	str	r3, [r2, #0]

	RTC_AlarmTypeDef sAlarm = {0};
 8002be2:	463b      	mov	r3, r7
 8002be4:	2228      	movs	r2, #40	; 0x28
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 f973 	bl	8006ed4 <memset>

	if(isTimeToTurnOn)
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <nextAlarma+0xe4>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <nextAlarma+0x60>
	{
		sAlarm.AlarmTime.Hours = alarmasON[siguiente_alarma].Hours;
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <nextAlarma+0xe8>)
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <nextAlarma+0xdc>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = alarmasON[siguiente_alarma].Minutes;
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <nextAlarma+0xe8>)
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <nextAlarma+0xdc>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	707b      	strb	r3, [r7, #1]
 8002c22:	e01a      	b.n	8002c5a <nextAlarma+0x96>
	}
	else
	{
		sAlarm.AlarmTime.Hours = alarmasOFF[siguiente_alarma].Hours;
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <nextAlarma+0xec>)
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <nextAlarma+0xdc>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = alarmasOFF[siguiente_alarma].Minutes;
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <nextAlarma+0xec>)
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <nextAlarma+0xdc>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	707b      	strb	r3, [r7, #1]
		siguiente_alarma++;
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <nextAlarma+0xdc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <nextAlarma+0xdc>)
 8002c58:	6013      	str	r3, [r2, #0]
	}


	sAlarm.AlarmTime.Seconds = 0x0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x31;
 8002c76:	2331      	movs	r3, #49	; 0x31
 8002c78:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8002c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002c82:	463b      	mov	r3, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	4619      	mov	r1, r3
 8002c88:	480a      	ldr	r0, [pc, #40]	; (8002cb4 <nextAlarma+0xf0>)
 8002c8a:	f002 fc51 	bl	8005530 <HAL_RTC_SetAlarm_IT>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <nextAlarma+0xd4>
	{
		Error_Handler();
 8002c94:	f000 f810 	bl	8002cb8 <Error_Handler>
	}
}
 8002c98:	bf00      	nop
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000228 	.word	0x20000228
 8002ca4:	20000224 	.word	0x20000224
 8002ca8:	2000001c 	.word	0x2000001c
 8002cac:	2000021c 	.word	0x2000021c
 8002cb0:	20000220 	.word	0x20000220
 8002cb4:	2000010c 	.word	0x2000010c

08002cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cbc:	b672      	cpsid	i
}
 8002cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <Error_Handler+0x8>
	...

08002cc4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2110      	movs	r1, #16
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <ST7735_Select+0x14>)
 8002cce:	f001 fc67 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020000 	.word	0x40020000

08002cdc <ST7735_Unselect>:

void ST7735_Unselect() {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <ST7735_Unselect+0x14>)
 8002ce6:	f001 fc5b 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40020000 	.word	0x40020000

08002cf4 <ST7735_Reset>:

static void ST7735_Reset() {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2140      	movs	r1, #64	; 0x40
 8002cfc:	4806      	ldr	r0, [pc, #24]	; (8002d18 <ST7735_Reset+0x24>)
 8002cfe:	f001 fc4f 	bl	80045a0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002d02:	2005      	movs	r0, #5
 8002d04:	f000 fd56 	bl	80037b4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <ST7735_Reset+0x24>)
 8002d0e:	f001 fc47 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40020000 	.word	0x40020000

08002d1c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2110      	movs	r1, #16
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <ST7735_WriteCommand+0x2c>)
 8002d2c:	f001 fc38 	bl	80045a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002d30:	1df9      	adds	r1, r7, #7
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	2201      	movs	r2, #1
 8002d38:	4804      	ldr	r0, [pc, #16]	; (8002d4c <ST7735_WriteCommand+0x30>)
 8002d3a:	f002 fed1 	bl	8005ae0 <HAL_SPI_Transmit>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	2000012c 	.word	0x2000012c

08002d50 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2110      	movs	r1, #16
 8002d5e:	4807      	ldr	r0, [pc, #28]	; (8002d7c <ST7735_WriteData+0x2c>)
 8002d60:	f001 fc1e 	bl	80045a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4804      	ldr	r0, [pc, #16]	; (8002d80 <ST7735_WriteData+0x30>)
 8002d70:	f002 feb6 	bl	8005ae0 <HAL_SPI_Transmit>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	2000012c 	.word	0x2000012c

08002d84 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002d96:	e034      	b.n	8002e02 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ffb9 	bl	8002d1c <ST7735_WriteCommand>

        numArgs = *addr++;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002db4:	7abb      	ldrb	r3, [r7, #10]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002dbe:	7abb      	ldrb	r3, [r7, #10]
 8002dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002dc6:	7abb      	ldrb	r3, [r7, #10]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002dcc:	7abb      	ldrb	r3, [r7, #10]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffbd 	bl	8002d50 <ST7735_WriteData>
            addr += numArgs;
 8002dd6:	7abb      	ldrb	r3, [r7, #10]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002dde:	89bb      	ldrh	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002dee:	89bb      	ldrh	r3, [r7, #12]
 8002df0:	2bff      	cmp	r3, #255	; 0xff
 8002df2:	d102      	bne.n	8002dfa <ST7735_ExecuteCommandList+0x76>
 8002df4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002df8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002dfa:	89bb      	ldrh	r3, [r7, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fcd9 	bl	80037b4 <HAL_Delay>
    while(numCommands--) {
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	73fa      	strb	r2, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1c5      	bne.n	8002d98 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002e16:	b590      	push	{r4, r7, lr}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	4608      	mov	r0, r1
 8002e20:	4611      	mov	r1, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	4623      	mov	r3, r4
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71bb      	strb	r3, [r7, #6]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	717b      	strb	r3, [r7, #5]
 8002e30:	4613      	mov	r3, r2
 8002e32:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002e34:	202a      	movs	r0, #42	; 0x2a
 8002e36:	f7ff ff71 	bl	8002d1c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	733b      	strb	r3, [r7, #12]
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	737b      	strb	r3, [r7, #13]
 8002e42:	2300      	movs	r3, #0
 8002e44:	73bb      	strb	r3, [r7, #14]
 8002e46:	797b      	ldrb	r3, [r7, #5]
 8002e48:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	2104      	movs	r1, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff7d 	bl	8002d50 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002e56:	202b      	movs	r0, #43	; 0x2b
 8002e58:	f7ff ff60 	bl	8002d1c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002e60:	793b      	ldrb	r3, [r7, #4]
 8002e62:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff70 	bl	8002d50 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002e70:	202c      	movs	r0, #44	; 0x2c
 8002e72:	f7ff ff53 	bl	8002d1c <ST7735_WriteCommand>
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd90      	pop	{r4, r7, pc}
	...

08002e80 <ST7735_Init>:

void ST7735_Init() {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8002e84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e88:	f000 fc94 	bl	80037b4 <HAL_Delay>
    ST7735_Select();
 8002e8c:	f7ff ff1a 	bl	8002cc4 <ST7735_Select>
    ST7735_Reset();
 8002e90:	f7ff ff30 	bl	8002cf4 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002e94:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <ST7735_Init+0x30>)
 8002e96:	f7ff ff75 	bl	8002d84 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002e9a:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <ST7735_Init+0x34>)
 8002e9c:	f7ff ff72 	bl	8002d84 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <ST7735_Init+0x38>)
 8002ea2:	f7ff ff6f 	bl	8002d84 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002ea6:	f7ff ff19 	bl	8002cdc <ST7735_Unselect>
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08028090 	.word	0x08028090
 8002eb4:	080280cc 	.word	0x080280cc
 8002eb8:	080280dc 	.word	0x080280dc

08002ebc <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	80fb      	strh	r3, [r7, #6]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	80bb      	strh	r3, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ed2:	d823      	bhi.n	8002f1c <ST7735_DrawPixel+0x60>
 8002ed4:	88bb      	ldrh	r3, [r7, #4]
 8002ed6:	2b9f      	cmp	r3, #159	; 0x9f
 8002ed8:	d820      	bhi.n	8002f1c <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8002eda:	f7ff fef3 	bl	8002cc4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	b2d8      	uxtb	r0, r3
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	b2d9      	uxtb	r1, r3
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	88bb      	ldrh	r3, [r7, #4]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f7ff ff8e 	bl	8002e16 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	733b      	strb	r3, [r7, #12]
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff1d 	bl	8002d50 <ST7735_WriteData>

    ST7735_Unselect();
 8002f16:	f7ff fee1 	bl	8002cdc <ST7735_Unselect>
 8002f1a:	e000      	b.n	8002f1e <ST7735_DrawPixel+0x62>
        return;
 8002f1c:	bf00      	nop
}
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002f24:	b082      	sub	sp, #8
 8002f26:	b590      	push	{r4, r7, lr}
 8002f28:	b089      	sub	sp, #36	; 0x24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
 8002f32:	460b      	mov	r3, r1
 8002f34:	80bb      	strh	r3, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	b2d8      	uxtb	r0, r3
 8002f3e:	88bb      	ldrh	r3, [r7, #4]
 8002f40:	b2d9      	uxtb	r1, r3
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b2dc      	uxtb	r4, r3
 8002f52:	88bb      	ldrh	r3, [r7, #4]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	4622      	mov	r2, r4
 8002f64:	f7ff ff57 	bl	8002e16 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e043      	b.n	8002ff6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	3b20      	subs	r3, #32
 8002f74:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	440b      	add	r3, r1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e029      	b.n	8002fe4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002fa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	743b      	strb	r3, [r7, #16]
 8002faa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff feca 	bl	8002d50 <ST7735_WriteData>
 8002fbc:	e00f      	b.n	8002fde <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	733b      	strb	r3, [r7, #12]
 8002fca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002fd2:	f107 030c 	add.w	r3, r7, #12
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff feb9 	bl	8002d50 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002fe8:	461a      	mov	r2, r3
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d3cf      	bcc.n	8002f90 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d3b5      	bcc.n	8002f6e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	3724      	adds	r7, #36	; 0x24
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800300e:	b002      	add	sp, #8
 8003010:	4770      	bx	lr

08003012 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003012:	b082      	sub	sp, #8
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af04      	add	r7, sp, #16
 800301a:	603a      	str	r2, [r7, #0]
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
 8003022:	460b      	mov	r3, r1
 8003024:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8003026:	f7ff fe4d 	bl	8002cc4 <ST7735_Select>

    while(*str) {
 800302a:	e02d      	b.n	8003088 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	7d3a      	ldrb	r2, [r7, #20]
 8003030:	4413      	add	r3, r2
 8003032:	2b7f      	cmp	r3, #127	; 0x7f
 8003034:	dd13      	ble.n	800305e <ST7735_WriteString+0x4c>
            x = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800303a:	7d7b      	ldrb	r3, [r7, #21]
 800303c:	b29a      	uxth	r2, r3
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8003044:	88bb      	ldrh	r3, [r7, #4]
 8003046:	7d7a      	ldrb	r2, [r7, #21]
 8003048:	4413      	add	r3, r2
 800304a:	2b9f      	cmp	r3, #159	; 0x9f
 800304c:	dc21      	bgt.n	8003092 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b20      	cmp	r3, #32
 8003054:	d103      	bne.n	800305e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	603b      	str	r3, [r7, #0]
                continue;
 800305c:	e014      	b.n	8003088 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	88b9      	ldrh	r1, [r7, #4]
 8003064:	88f8      	ldrh	r0, [r7, #6]
 8003066:	8c3b      	ldrh	r3, [r7, #32]
 8003068:	9302      	str	r3, [sp, #8]
 800306a:	8bbb      	ldrh	r3, [r7, #28]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f7ff ff56 	bl	8002f24 <ST7735_WriteChar>
        //HAL_Delay(1);
        x += font.width;
 8003078:	7d3b      	ldrb	r3, [r7, #20]
 800307a:	b29a      	uxth	r2, r3
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	4413      	add	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
        str++;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1cd      	bne.n	800302c <ST7735_WriteString+0x1a>
 8003090:	e000      	b.n	8003094 <ST7735_WriteString+0x82>
                break;
 8003092:	bf00      	nop
    }

    ST7735_Unselect();
 8003094:	f7ff fe22 	bl	8002cdc <ST7735_Unselect>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030a2:	b002      	add	sp, #8
 80030a4:	4770      	bx	lr
	...

080030a8 <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4604      	mov	r4, r0
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4623      	mov	r3, r4
 80030b8:	80fb      	strh	r3, [r7, #6]
 80030ba:	4603      	mov	r3, r0
 80030bc:	80bb      	strh	r3, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	807b      	strh	r3, [r7, #2]
 80030c2:	4613      	mov	r3, r2
 80030c4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b7f      	cmp	r3, #127	; 0x7f
 80030ca:	d869      	bhi.n	80031a0 <ST7735_FillRectangleFast+0xf8>
 80030cc:	88bb      	ldrh	r3, [r7, #4]
 80030ce:	2b9f      	cmp	r3, #159	; 0x9f
 80030d0:	d866      	bhi.n	80031a0 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80030d2:	88fa      	ldrh	r2, [r7, #6]
 80030d4:	887b      	ldrh	r3, [r7, #2]
 80030d6:	4413      	add	r3, r2
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	dd03      	ble.n	80030e4 <ST7735_FillRectangleFast+0x3c>
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80030e2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80030e4:	88ba      	ldrh	r2, [r7, #4]
 80030e6:	883b      	ldrh	r3, [r7, #0]
 80030e8:	4413      	add	r3, r2
 80030ea:	2ba0      	cmp	r3, #160	; 0xa0
 80030ec:	dd03      	ble.n	80030f6 <ST7735_FillRectangleFast+0x4e>
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80030f4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80030f6:	f7ff fde5 	bl	8002cc4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	b2d8      	uxtb	r0, r3
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	b2d9      	uxtb	r1, r3
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4413      	add	r3, r2
 800310c:	b2db      	uxtb	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b2dc      	uxtb	r4, r3
 8003112:	88bb      	ldrh	r3, [r7, #4]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	883b      	ldrh	r3, [r7, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4413      	add	r3, r2
 800311c:	b2db      	uxtb	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4622      	mov	r2, r4
 8003124:	f7ff fe77 	bl	8002e16 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8003128:	8c3b      	ldrh	r3, [r7, #32]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b29b      	uxth	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	723b      	strb	r3, [r7, #8]
 8003132:	8c3b      	ldrh	r3, [r7, #32]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f003 feb9 	bl	8006eb4 <malloc>
 8003142:	4603      	mov	r3, r0
 8003144:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8003146:	2300      	movs	r3, #0
 8003148:	80fb      	strh	r3, [r7, #6]
 800314a:	e008      	b.n	800315e <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	893a      	ldrh	r2, [r7, #8]
 8003156:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	3301      	adds	r3, #1
 800315c:	80fb      	strh	r3, [r7, #6]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3f2      	bcc.n	800314c <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003166:	2201      	movs	r2, #1
 8003168:	2110      	movs	r1, #16
 800316a:	480f      	ldr	r0, [pc, #60]	; (80031a8 <ST7735_FillRectangleFast+0x100>)
 800316c:	f001 fa18 	bl	80045a0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8003170:	883b      	ldrh	r3, [r7, #0]
 8003172:	80bb      	strh	r3, [r7, #4]
 8003174:	e00b      	b.n	800318e <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	480a      	ldr	r0, [pc, #40]	; (80031ac <ST7735_FillRectangleFast+0x104>)
 8003184:	f002 fcac 	bl	8005ae0 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8003188:	88bb      	ldrh	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	80bb      	strh	r3, [r7, #4]
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <ST7735_FillRectangleFast+0xce>

    free(line);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f003 fe95 	bl	8006ec4 <free>
    ST7735_Unselect();
 800319a:	f7ff fd9f 	bl	8002cdc <ST7735_Unselect>
 800319e:	e000      	b.n	80031a2 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80031a0:	bf00      	nop
}
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	40020800 	.word	0x40020800
 80031ac:	2000012c 	.word	0x2000012c

080031b0 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	23a0      	movs	r3, #160	; 0xa0
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	2100      	movs	r1, #0
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7ff ff6f 	bl	80030a8 <ST7735_FillRectangleFast>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4604      	mov	r4, r0
 80031da:	4608      	mov	r0, r1
 80031dc:	4611      	mov	r1, r2
 80031de:	461a      	mov	r2, r3
 80031e0:	4623      	mov	r3, r4
 80031e2:	80fb      	strh	r3, [r7, #6]
 80031e4:	4603      	mov	r3, r0
 80031e6:	80bb      	strh	r3, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b7f      	cmp	r3, #127	; 0x7f
 80031f4:	d831      	bhi.n	800325a <ST7735_DrawImage+0x88>
 80031f6:	88bb      	ldrh	r3, [r7, #4]
 80031f8:	2b9f      	cmp	r3, #159	; 0x9f
 80031fa:	d82e      	bhi.n	800325a <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 80031fc:	88fa      	ldrh	r2, [r7, #6]
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	4413      	add	r3, r2
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	dc2b      	bgt.n	800325e <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003206:	88ba      	ldrh	r2, [r7, #4]
 8003208:	883b      	ldrh	r3, [r7, #0]
 800320a:	4413      	add	r3, r2
 800320c:	2ba0      	cmp	r3, #160	; 0xa0
 800320e:	dc28      	bgt.n	8003262 <ST7735_DrawImage+0x90>

    ST7735_Select();
 8003210:	f7ff fd58 	bl	8002cc4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	b2d8      	uxtb	r0, r3
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	b2d9      	uxtb	r1, r3
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	4413      	add	r3, r2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b2dc      	uxtb	r4, r3
 800322c:	88bb      	ldrh	r3, [r7, #4]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	883b      	ldrh	r3, [r7, #0]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4413      	add	r3, r2
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4622      	mov	r2, r4
 800323e:	f7ff fdea 	bl	8002e16 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	883a      	ldrh	r2, [r7, #0]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4619      	mov	r1, r3
 800324e:	69b8      	ldr	r0, [r7, #24]
 8003250:	f7ff fd7e 	bl	8002d50 <ST7735_WriteData>
    ST7735_Unselect();
 8003254:	f7ff fd42 	bl	8002cdc <ST7735_Unselect>
 8003258:	e004      	b.n	8003264 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800325a:	bf00      	nop
 800325c:	e002      	b.n	8003264 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003262:	bf00      	nop
}
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}
	...

0800326c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_MspInit+0x4c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_MspInit+0x4c>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_MspInit+0x4c>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_MspInit+0x4c>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <HAL_MspInit+0x4c>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_MspInit+0x4c>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032aa:	2007      	movs	r0, #7
 80032ac:	f000 ff8c 	bl	80041c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a17      	ldr	r2, [pc, #92]	; (8003338 <HAL_ADC_MspInit+0x7c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d127      	bne.n	800332e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_ADC_MspInit+0x80>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <HAL_ADC_MspInit+0x80>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_ADC_MspInit+0x80>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_ADC_MspInit+0x80>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <HAL_ADC_MspInit+0x80>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_ADC_MspInit+0x80>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003316:	2302      	movs	r3, #2
 8003318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800331a:	2303      	movs	r3, #3
 800331c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	4619      	mov	r1, r3
 8003328:	4805      	ldr	r0, [pc, #20]	; (8003340 <HAL_ADC_MspInit+0x84>)
 800332a:	f000 ff9d 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800332e:	bf00      	nop
 8003330:	3728      	adds	r7, #40	; 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40012000 	.word	0x40012000
 800333c:	40023800 	.word	0x40023800
 8003340:	40020000 	.word	0x40020000

08003344 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
 800335c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_RTC_MspInit+0x60>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d119      	bne.n	800339c <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003368:	2302      	movs	r3, #2
 800336a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800336c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003370:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f001 fda8 	bl	8004ecc <HAL_RCCEx_PeriphCLKConfig>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003382:	f7ff fc99 	bl	8002cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RTC_MspInit+0x64>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	2029      	movs	r0, #41	; 0x29
 8003392:	f000 ff24 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003396:	2029      	movs	r0, #41	; 0x29
 8003398:	f000 ff3d 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800339c:	bf00      	nop
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40002800 	.word	0x40002800
 80033a8:	42470e3c 	.word	0x42470e3c

080033ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_SPI_MspInit+0x84>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12b      	bne.n	8003426 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <HAL_SPI_MspInit+0x88>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_SPI_MspInit+0x88>)
 80033d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033dc:	6453      	str	r3, [r2, #68]	; 0x44
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_SPI_MspInit+0x88>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_SPI_MspInit+0x88>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <HAL_SPI_MspInit+0x88>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_SPI_MspInit+0x88>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003406:	23a0      	movs	r3, #160	; 0xa0
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003416:	2305      	movs	r3, #5
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	4805      	ldr	r0, [pc, #20]	; (8003438 <HAL_SPI_MspInit+0x8c>)
 8003422:	f000 ff21 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40013000 	.word	0x40013000
 8003434:	40023800 	.word	0x40023800
 8003438:	40020000 	.word	0x40020000

0800343c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0e      	ldr	r2, [pc, #56]	; (8003484 <HAL_TIM_Base_MspInit+0x48>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d115      	bne.n	800347a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_TIM_Base_MspInit+0x4c>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <HAL_TIM_Base_MspInit+0x4c>)
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_TIM_Base_MspInit+0x4c>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	201d      	movs	r0, #29
 8003470:	f000 feb5 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003474:	201d      	movs	r0, #29
 8003476:	f000 fece 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40000400 	.word	0x40000400
 8003488:	40023800 	.word	0x40023800

0800348c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10d      	bne.n	80034ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_TIM_PWM_MspInit+0x40>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_TIM_PWM_MspInit+0x40>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_TIM_PWM_MspInit+0x40>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40023800 	.word	0x40023800

080034d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a12      	ldr	r2, [pc, #72]	; (8003538 <HAL_TIM_MspPostInit+0x68>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d11e      	bne.n	8003530 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_TIM_MspPostInit+0x6c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a10      	ldr	r2, [pc, #64]	; (800353c <HAL_TIM_MspPostInit+0x6c>)
 80034fc:	f043 0308 	orr.w	r3, r3, #8
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_TIM_MspPostInit+0x6c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800350e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003520:	2302      	movs	r3, #2
 8003522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003524:	f107 030c 	add.w	r3, r7, #12
 8003528:	4619      	mov	r1, r3
 800352a:	4805      	ldr	r0, [pc, #20]	; (8003540 <HAL_TIM_MspPostInit+0x70>)
 800352c:	f000 fe9c 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003530:	bf00      	nop
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40000800 	.word	0x40000800
 800353c:	40023800 	.word	0x40023800
 8003540:	40020c00 	.word	0x40020c00

08003544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <NMI_Handler+0x4>

0800354a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <MemManage_Handler+0x4>

08003556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800355a:	e7fe      	b.n	800355a <BusFault_Handler+0x4>

0800355c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <UsageFault_Handler+0x4>

08003562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003590:	f000 f8f0 	bl	8003774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}

08003598 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800359c:	2001      	movs	r0, #1
 800359e:	f001 f819 	bl	80045d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80035aa:	2004      	movs	r0, #4
 80035ac:	f001 f812 	bl	80045d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80035b8:	2008      	movs	r0, #8
 80035ba:	f001 f80b 	bl	80045d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <TIM3_IRQHandler+0x10>)
 80035ca:	f002 fe41 	bl	8006250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000184 	.word	0x20000184

080035d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <RTC_Alarm_IRQHandler+0x10>)
 80035de:	f002 f8e9 	bl	80057b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000010c 	.word	0x2000010c

080035ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <_sbrk+0x5c>)
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <_sbrk+0x60>)
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_sbrk+0x64>)
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <_sbrk+0x68>)
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d207      	bcs.n	800362c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800361c:	f003 fc20 	bl	8006e60 <__errno>
 8003620:	4603      	mov	r3, r0
 8003622:	220c      	movs	r2, #12
 8003624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	e009      	b.n	8003640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <_sbrk+0x64>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <_sbrk+0x64>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <_sbrk+0x64>)
 800363c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20020000 	.word	0x20020000
 800364c:	00000400 	.word	0x00000400
 8003650:	20000238 	.word	0x20000238
 8003654:	20000250 	.word	0x20000250

08003658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <SystemInit+0x20>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <SystemInit+0x20>)
 8003664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800367c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003682:	490e      	ldr	r1, [pc, #56]	; (80036bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003684:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800368c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003698:	4c0b      	ldr	r4, [pc, #44]	; (80036c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036a6:	f7ff ffd7 	bl	8003658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036aa:	f003 fbdf 	bl	8006e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ae:	f7fc ff69 	bl	8000584 <main>
  bx  lr    
 80036b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80036c0:	0802815c 	.word	0x0802815c
  ldr r2, =_sbss
 80036c4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80036c8:	20000250 	.word	0x20000250

080036cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC_IRQHandler>
	...

080036d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <HAL_Init+0x40>)
 80036da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_Init+0x40>)
 80036e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <HAL_Init+0x40>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 fd65 	bl	80041c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fe:	2000      	movs	r0, #0
 8003700:	f000 f808 	bl	8003714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003704:	f7ff fdb2 	bl	800326c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_InitTick+0x54>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_InitTick+0x58>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800372a:	fbb3 f3f1 	udiv	r3, r3, r1
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fd8b 	bl	800424e <HAL_SYSTICK_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00e      	b.n	8003760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d80a      	bhi.n	800375e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003748:	2200      	movs	r2, #0
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f000 fd45 	bl	80041de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <HAL_InitTick+0x5c>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000020 	.word	0x20000020
 800376c:	20000028 	.word	0x20000028
 8003770:	20000024 	.word	0x20000024

08003774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_IncTick+0x20>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_IncTick+0x24>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_IncTick+0x24>)
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000028 	.word	0x20000028
 8003798:	2000023c 	.word	0x2000023c

0800379c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return uwTick;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_GetTick+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000023c 	.word	0x2000023c

080037b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037bc:	f7ff ffee 	bl	800379c <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d005      	beq.n	80037da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_Delay+0x44>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037da:	bf00      	nop
 80037dc:	f7ff ffde 	bl	800379c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d8f7      	bhi.n	80037dc <HAL_Delay+0x28>
  {
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000028 	.word	0x20000028

080037fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e033      	b.n	800387a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fd4e 	bl	80032bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003842:	f023 0302 	bic.w	r3, r3, #2
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 faca 	bl	8003de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
 800386a:	e001      	b.n	8003870 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_ADC_Start+0x1a>
 800389a:	2302      	movs	r3, #2
 800389c:	e097      	b.n	80039ce <HAL_ADC_Start+0x14a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d018      	beq.n	80038e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038c4:	4b45      	ldr	r3, [pc, #276]	; (80039dc <HAL_ADC_Start+0x158>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a45      	ldr	r2, [pc, #276]	; (80039e0 <HAL_ADC_Start+0x15c>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0c9a      	lsrs	r2, r3, #18
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038d8:	e002      	b.n	80038e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3b01      	subs	r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f9      	bne.n	80038da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d15f      	bne.n	80039b4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800391e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003932:	d106      	bne.n	8003942 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f023 0206 	bic.w	r2, r3, #6
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
 8003940:	e002      	b.n	8003948 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003950:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_ADC_Start+0x160>)
 8003952:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800395c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10f      	bne.n	800398a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d129      	bne.n	80039cc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	e020      	b.n	80039cc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <HAL_ADC_Start+0x164>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d11b      	bne.n	80039cc <HAL_ADC_Start+0x148>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d114      	bne.n	80039cc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	e00b      	b.n	80039cc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f043 0210 	orr.w	r2, r3, #16
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000020 	.word	0x20000020
 80039e0:	431bde83 	.word	0x431bde83
 80039e4:	40012300 	.word	0x40012300
 80039e8:	40012000 	.word	0x40012000

080039ec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_Stop+0x16>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e021      	b.n	8003a46 <HAL_ADC_Stop+0x5a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	d113      	bne.n	8003a98 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7e:	d10b      	bne.n	8003a98 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e063      	b.n	8003b60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a98:	f7ff fe80 	bl	800379c <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a9e:	e021      	b.n	8003ae4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d01d      	beq.n	8003ae4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_ADC_PollForConversion+0x6c>
 8003aae:	f7ff fe75 	bl	800379c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d212      	bcs.n	8003ae4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d00b      	beq.n	8003ae4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e03d      	b.n	8003b60 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d1d6      	bne.n	8003aa0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f06f 0212 	mvn.w	r2, #18
 8003afa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d123      	bne.n	8003b5e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d11f      	bne.n	8003b5e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d111      	bne.n	8003b5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x1c>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e113      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x244>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	d925      	bls.n	8003bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3b1e      	subs	r3, #30
 8003bc6:	2207      	movs	r2, #7
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68d9      	ldr	r1, [r3, #12]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	4603      	mov	r3, r0
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4403      	add	r3, r0
 8003bee:	3b1e      	subs	r3, #30
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	e022      	b.n	8003c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6919      	ldr	r1, [r3, #16]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	2207      	movs	r2, #7
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43da      	mvns	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6919      	ldr	r1, [r3, #16]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4618      	mov	r0, r3
 8003c32:	4603      	mov	r3, r0
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4403      	add	r3, r0
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d824      	bhi.n	8003c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	3b05      	subs	r3, #5
 8003c5c:	221f      	movs	r2, #31
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43da      	mvns	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	400a      	ands	r2, r1
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	4618      	mov	r0, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	3b05      	subs	r3, #5
 8003c86:	fa00 f203 	lsl.w	r2, r0, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34
 8003c92:	e04c      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d824      	bhi.n	8003ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	3b23      	subs	r3, #35	; 0x23
 8003cae:	221f      	movs	r2, #31
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3b23      	subs	r3, #35	; 0x23
 8003cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce4:	e023      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3b41      	subs	r3, #65	; 0x41
 8003cf8:	221f      	movs	r2, #31
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	400a      	ands	r2, r1
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	4618      	mov	r0, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	3b41      	subs	r3, #65	; 0x41
 8003d22:	fa00 f203 	lsl.w	r2, r0, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d2e:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <HAL_ADC_ConfigChannel+0x250>)
 8003d30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <HAL_ADC_ConfigChannel+0x254>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d10f      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x1d8>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b12      	cmp	r3, #18
 8003d42:	d10b      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_ADC_ConfigChannel+0x254>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d12b      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x23a>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_ADC_ConfigChannel+0x258>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <HAL_ADC_ConfigChannel+0x1f4>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b11      	cmp	r3, #17
 8003d76:	d122      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <HAL_ADC_ConfigChannel+0x258>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d111      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_ADC_ConfigChannel+0x25c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <HAL_ADC_ConfigChannel+0x260>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	0c9a      	lsrs	r2, r3, #18
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003db0:	e002      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f9      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40012300 	.word	0x40012300
 8003dd8:	40012000 	.word	0x40012000
 8003ddc:	10000012 	.word	0x10000012
 8003de0:	20000020 	.word	0x20000020
 8003de4:	431bde83 	.word	0x431bde83

08003de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df0:	4b79      	ldr	r3, [pc, #484]	; (8003fd8 <ADC_Init+0x1f0>)
 8003df2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6899      	ldr	r1, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <ADC_Init+0x1f4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6899      	ldr	r1, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	e00f      	b.n	8003ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0202 	bic.w	r2, r2, #2
 8003ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6899      	ldr	r1, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7e1b      	ldrb	r3, [r3, #24]
 8003f00:	005a      	lsls	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	035a      	lsls	r2, r3, #13
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	e007      	b.n	8003f5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	051a      	lsls	r2, r3, #20
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6899      	ldr	r1, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f9e:	025a      	lsls	r2, r3, #9
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6899      	ldr	r1, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	029a      	lsls	r2, r3, #10
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40012300 	.word	0x40012300
 8003fdc:	0f000001 	.word	0x0f000001

08003fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800400c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004012:	4a04      	ldr	r2, [pc, #16]	; (8004024 <__NVIC_SetPriorityGrouping+0x44>)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	60d3      	str	r3, [r2, #12]
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <__NVIC_GetPriorityGrouping+0x18>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	f003 0307 	and.w	r3, r3, #7
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	2b00      	cmp	r3, #0
 8004054:	db0b      	blt.n	800406e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	4907      	ldr	r1, [pc, #28]	; (800407c <__NVIC_EnableIRQ+0x38>)
 800405e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2001      	movs	r0, #1
 8004066:	fa00 f202 	lsl.w	r2, r0, r2
 800406a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000e100 	.word	0xe000e100

08004080 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db12      	blt.n	80040b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	490a      	ldr	r1, [pc, #40]	; (80040c4 <__NVIC_DisableIRQ+0x44>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2001      	movs	r0, #1
 80040a2:	fa00 f202 	lsl.w	r2, r0, r2
 80040a6:	3320      	adds	r3, #32
 80040a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040ac:	f3bf 8f4f 	dsb	sy
}
 80040b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040b2:	f3bf 8f6f 	isb	sy
}
 80040b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	e000e100 	.word	0xe000e100

080040c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	6039      	str	r1, [r7, #0]
 80040d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	db0a      	blt.n	80040f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	490c      	ldr	r1, [pc, #48]	; (8004114 <__NVIC_SetPriority+0x4c>)
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	0112      	lsls	r2, r2, #4
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	440b      	add	r3, r1
 80040ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040f0:	e00a      	b.n	8004108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	4908      	ldr	r1, [pc, #32]	; (8004118 <__NVIC_SetPriority+0x50>)
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	3b04      	subs	r3, #4
 8004100:	0112      	lsls	r2, r2, #4
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	440b      	add	r3, r1
 8004106:	761a      	strb	r2, [r3, #24]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000e100 	.word	0xe000e100
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800411c:	b480      	push	{r7}
 800411e:	b089      	sub	sp, #36	; 0x24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f1c3 0307 	rsb	r3, r3, #7
 8004136:	2b04      	cmp	r3, #4
 8004138:	bf28      	it	cs
 800413a:	2304      	movcs	r3, #4
 800413c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3304      	adds	r3, #4
 8004142:	2b06      	cmp	r3, #6
 8004144:	d902      	bls.n	800414c <NVIC_EncodePriority+0x30>
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3b03      	subs	r3, #3
 800414a:	e000      	b.n	800414e <NVIC_EncodePriority+0x32>
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	f04f 32ff 	mov.w	r2, #4294967295
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	401a      	ands	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004164:	f04f 31ff 	mov.w	r1, #4294967295
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fa01 f303 	lsl.w	r3, r1, r3
 800416e:	43d9      	mvns	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004174:	4313      	orrs	r3, r2
         );
}
 8004176:	4618      	mov	r0, r3
 8004178:	3724      	adds	r7, #36	; 0x24
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3b01      	subs	r3, #1
 8004190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004194:	d301      	bcc.n	800419a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004196:	2301      	movs	r3, #1
 8004198:	e00f      	b.n	80041ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <SysTick_Config+0x40>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3b01      	subs	r3, #1
 80041a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041a2:	210f      	movs	r1, #15
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	f7ff ff8e 	bl	80040c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <SysTick_Config+0x40>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <SysTick_Config+0x40>)
 80041b4:	2207      	movs	r2, #7
 80041b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	e000e010 	.word	0xe000e010

080041c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff05 	bl	8003fe0 <__NVIC_SetPriorityGrouping>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041de:	b580      	push	{r7, lr}
 80041e0:	b086      	sub	sp, #24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041f0:	f7ff ff1a 	bl	8004028 <__NVIC_GetPriorityGrouping>
 80041f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7ff ff8e 	bl	800411c <NVIC_EncodePriority>
 8004200:	4602      	mov	r2, r0
 8004202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff5d 	bl	80040c8 <__NVIC_SetPriority>
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff0d 	bl	8004044 <__NVIC_EnableIRQ>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	4603      	mov	r3, r0
 800423a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff1d 	bl	8004080 <__NVIC_DisableIRQ>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ff94 	bl	8004184 <SysTick_Config>
 800425c:	4603      	mov	r3, r0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e159      	b.n	8004538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 8148 	bne.w	8004532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d130      	bne.n	800431c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d017      	beq.n	8004358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d123      	bne.n	80043ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	08da      	lsrs	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a2 	beq.w	8004532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b57      	ldr	r3, [pc, #348]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4a56      	ldr	r2, [pc, #344]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043fc:	6453      	str	r3, [r2, #68]	; 0x44
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_GPIO_Init+0x2ec>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a49      	ldr	r2, [pc, #292]	; (8004558 <HAL_GPIO_Init+0x2f0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d019      	beq.n	800446a <HAL_GPIO_Init+0x202>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a48      	ldr	r2, [pc, #288]	; (800455c <HAL_GPIO_Init+0x2f4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0x1fe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a47      	ldr	r2, [pc, #284]	; (8004560 <HAL_GPIO_Init+0x2f8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00d      	beq.n	8004462 <HAL_GPIO_Init+0x1fa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a46      	ldr	r2, [pc, #280]	; (8004564 <HAL_GPIO_Init+0x2fc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x1f6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a45      	ldr	r2, [pc, #276]	; (8004568 <HAL_GPIO_Init+0x300>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_GPIO_Init+0x1f2>
 8004456:	2304      	movs	r3, #4
 8004458:	e008      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445a:	2307      	movs	r3, #7
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x204>
 800446a:	2300      	movs	r3, #0
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800447c:	4935      	ldr	r1, [pc, #212]	; (8004554 <HAL_GPIO_Init+0x2ec>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_GPIO_Init+0x304>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a2f      	ldr	r2, [pc, #188]	; (800456c <HAL_GPIO_Init+0x304>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_GPIO_Init+0x304>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a24      	ldr	r2, [pc, #144]	; (800456c <HAL_GPIO_Init+0x304>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <HAL_GPIO_Init+0x304>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_GPIO_Init+0x304>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_GPIO_Init+0x304>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452c:	4a0f      	ldr	r2, [pc, #60]	; (800456c <HAL_GPIO_Init+0x304>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f aea2 	bls.w	8004284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40013c00 	.word	0x40013c00

08004570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	887b      	ldrh	r3, [r7, #2]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e001      	b.n	8004592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045bc:	e003      	b.n	80045c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045be:	887b      	ldrh	r3, [r7, #2]
 80045c0:	041a      	lsls	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	619a      	str	r2, [r3, #24]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d006      	beq.n	80045f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ea:	4a05      	ldr	r2, [pc, #20]	; (8004600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fa4a 	bl	8002a8c <HAL_GPIO_EXTI_Callback>
  }
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40013c00 	.word	0x40013c00

08004604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e267      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d075      	beq.n	800470e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	4b88      	ldr	r3, [pc, #544]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b04      	cmp	r3, #4
 800462c:	d00c      	beq.n	8004648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4b85      	ldr	r3, [pc, #532]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004636:	2b08      	cmp	r3, #8
 8004638:	d112      	bne.n	8004660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463a:	4b82      	ldr	r3, [pc, #520]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004646:	d10b      	bne.n	8004660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4b7e      	ldr	r3, [pc, #504]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05b      	beq.n	800470c <HAL_RCC_OscConfig+0x108>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d157      	bne.n	800470c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e242      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x74>
 800466a:	4b76      	ldr	r3, [pc, #472]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a75      	ldr	r2, [pc, #468]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e01d      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x98>
 8004682:	4b70      	ldr	r3, [pc, #448]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6f      	ldr	r2, [pc, #444]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a6c      	ldr	r2, [pc, #432]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 800469c:	4b69      	ldr	r3, [pc, #420]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a68      	ldr	r2, [pc, #416]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b66      	ldr	r3, [pc, #408]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a65      	ldr	r2, [pc, #404]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 80046ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7ff f86e 	bl	800379c <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c4:	f7ff f86a 	bl	800379c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	; 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e207      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0xc0>
 80046e2:	e014      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7ff f85a 	bl	800379c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ec:	f7ff f856 	bl	800379c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1f3      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fe:	4b51      	ldr	r3, [pc, #324]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0xe8>
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d063      	beq.n	80047e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	4b4a      	ldr	r3, [pc, #296]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800472e:	2b08      	cmp	r3, #8
 8004730:	d11c      	bne.n	800476c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004732:	4b44      	ldr	r3, [pc, #272]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d116      	bne.n	800476c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	4b41      	ldr	r3, [pc, #260]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_RCC_OscConfig+0x152>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d001      	beq.n	8004756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e1c7      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4937      	ldr	r1, [pc, #220]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476a:	e03a      	b.n	80047e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004774:	4b34      	ldr	r3, [pc, #208]	; (8004848 <HAL_RCC_OscConfig+0x244>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7ff f80f 	bl	800379c <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004782:	f7ff f80b 	bl	800379c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e1a8      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004794:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a0:	4b28      	ldr	r3, [pc, #160]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4925      	ldr	r1, [pc, #148]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	600b      	str	r3, [r1, #0]
 80047b4:	e015      	b.n	80047e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <HAL_RCC_OscConfig+0x244>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe ffee 	bl	800379c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c4:	f7fe ffea 	bl	800379c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e187      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d6:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d036      	beq.n	800485c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <HAL_RCC_OscConfig+0x248>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fe ffce 	bl	800379c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004804:	f7fe ffca 	bl	800379c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e167      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_OscConfig+0x240>)
 8004818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x200>
 8004822:	e01b      	b.n	800485c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_RCC_OscConfig+0x248>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482a:	f7fe ffb7 	bl	800379c <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	e00e      	b.n	8004850 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004832:	f7fe ffb3 	bl	800379c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d907      	bls.n	8004850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e150      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
 8004844:	40023800 	.word	0x40023800
 8004848:	42470000 	.word	0x42470000
 800484c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004850:	4b88      	ldr	r3, [pc, #544]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ea      	bne.n	8004832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8097 	beq.w	8004998 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486a:	2300      	movs	r3, #0
 800486c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486e:	4b81      	ldr	r3, [pc, #516]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	4b7d      	ldr	r3, [pc, #500]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a7c      	ldr	r2, [pc, #496]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
 800488a:	4b7a      	ldr	r3, [pc, #488]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4b77      	ldr	r3, [pc, #476]	; (8004a78 <HAL_RCC_OscConfig+0x474>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d118      	bne.n	80048d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a6:	4b74      	ldr	r3, [pc, #464]	; (8004a78 <HAL_RCC_OscConfig+0x474>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a73      	ldr	r2, [pc, #460]	; (8004a78 <HAL_RCC_OscConfig+0x474>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b2:	f7fe ff73 	bl	800379c <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fe ff6f 	bl	800379c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e10c      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_OscConfig+0x474>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d106      	bne.n	80048ee <HAL_RCC_OscConfig+0x2ea>
 80048e0:	4b64      	ldr	r3, [pc, #400]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4a63      	ldr	r2, [pc, #396]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	; 0x70
 80048ec:	e01c      	b.n	8004928 <HAL_RCC_OscConfig+0x324>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x30c>
 80048f6:	4b5f      	ldr	r3, [pc, #380]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a5e      	ldr	r2, [pc, #376]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 80048fc:	f043 0304 	orr.w	r3, r3, #4
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
 8004902:	4b5c      	ldr	r3, [pc, #368]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	4a5b      	ldr	r2, [pc, #364]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6713      	str	r3, [r2, #112]	; 0x70
 800490e:	e00b      	b.n	8004928 <HAL_RCC_OscConfig+0x324>
 8004910:	4b58      	ldr	r3, [pc, #352]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a57      	ldr	r2, [pc, #348]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
 800491c:	4b55      	ldr	r3, [pc, #340]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	4a54      	ldr	r2, [pc, #336]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004922:	f023 0304 	bic.w	r3, r3, #4
 8004926:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004930:	f7fe ff34 	bl	800379c <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004936:	e00a      	b.n	800494e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004938:	f7fe ff30 	bl	800379c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	; 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0cb      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494e:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0ee      	beq.n	8004938 <HAL_RCC_OscConfig+0x334>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495c:	f7fe ff1e 	bl	800379c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004962:	e00a      	b.n	800497a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fe ff1a 	bl	800379c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e0b5      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497a:	4b3e      	ldr	r3, [pc, #248]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ee      	bne.n	8004964 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498c:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	4a38      	ldr	r2, [pc, #224]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80a1 	beq.w	8004ae4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a2:	4b34      	ldr	r3, [pc, #208]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d05c      	beq.n	8004a68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d141      	bne.n	8004a3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <HAL_RCC_OscConfig+0x478>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fe feee 	bl	800379c <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fe feea 	bl	800379c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e087      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	019b      	lsls	r3, r3, #6
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	3b01      	subs	r3, #1
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	061b      	lsls	r3, r3, #24
 8004a06:	491b      	ldr	r1, [pc, #108]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x478>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fe fec3 	bl	800379c <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fe febf 	bl	800379c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e05c      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x416>
 8004a38:	e054      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <HAL_RCC_OscConfig+0x478>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fe feac 	bl	800379c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fe fea8 	bl	800379c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e045      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x444>
 8004a66:	e03d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e038      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40007000 	.word	0x40007000
 8004a7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <HAL_RCC_OscConfig+0x4ec>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d028      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d121      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d11a      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ab6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d111      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800

08004af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0cc      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b68      	ldr	r3, [pc, #416]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d90c      	bls.n	8004b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b65      	ldr	r3, [pc, #404]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b63      	ldr	r3, [pc, #396]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0b8      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d020      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b48:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a58      	ldr	r2, [pc, #352]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b60:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a52      	ldr	r2, [pc, #328]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	494d      	ldr	r1, [pc, #308]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d044      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	4b47      	ldr	r3, [pc, #284]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d119      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e07f      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d003      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e06f      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e067      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd2:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4934      	ldr	r1, [pc, #208]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be4:	f7fe fdda 	bl	800379c <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bec:	f7fe fdd6 	bl	800379c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e04f      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 020c 	and.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d1eb      	bne.n	8004bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d20c      	bcs.n	8004c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b22      	ldr	r3, [pc, #136]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e032      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4916      	ldr	r1, [pc, #88]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	490e      	ldr	r1, [pc, #56]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c7a:	f000 f821 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	490a      	ldr	r1, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	5ccb      	ldrb	r3, [r1, r3]
 8004c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fd3a 	bl	8003714 <HAL_InitTick>

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023c00 	.word	0x40023c00
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	08028108 	.word	0x08028108
 8004cb8:	20000020 	.word	0x20000020
 8004cbc:	20000024 	.word	0x20000024

08004cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc4:	b094      	sub	sp, #80	; 0x50
 8004cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ccc:	2300      	movs	r3, #0
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd8:	4b79      	ldr	r3, [pc, #484]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d00d      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x40>
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	f200 80e1 	bhi.w	8004eac <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004cf2:	e0db      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cf4:	4b73      	ldr	r3, [pc, #460]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cf8:	e0db      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cfa:	4b73      	ldr	r3, [pc, #460]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cfe:	e0d8      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d00:	4b6f      	ldr	r3, [pc, #444]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d0a:	4b6d      	ldr	r3, [pc, #436]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d063      	beq.n	8004dde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d16:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	099b      	lsrs	r3, r3, #6
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d32:	4622      	mov	r2, r4
 8004d34:	462b      	mov	r3, r5
 8004d36:	f04f 0000 	mov.w	r0, #0
 8004d3a:	f04f 0100 	mov.w	r1, #0
 8004d3e:	0159      	lsls	r1, r3, #5
 8004d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d44:	0150      	lsls	r0, r2, #5
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	1a51      	subs	r1, r2, r1
 8004d4e:	6139      	str	r1, [r7, #16]
 8004d50:	4629      	mov	r1, r5
 8004d52:	eb63 0301 	sbc.w	r3, r3, r1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d64:	4659      	mov	r1, fp
 8004d66:	018b      	lsls	r3, r1, #6
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d6e:	4651      	mov	r1, sl
 8004d70:	018a      	lsls	r2, r1, #6
 8004d72:	4651      	mov	r1, sl
 8004d74:	ebb2 0801 	subs.w	r8, r2, r1
 8004d78:	4659      	mov	r1, fp
 8004d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d92:	4690      	mov	r8, r2
 8004d94:	4699      	mov	r9, r3
 8004d96:	4623      	mov	r3, r4
 8004d98:	eb18 0303 	adds.w	r3, r8, r3
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	462b      	mov	r3, r5
 8004da0:	eb49 0303 	adc.w	r3, r9, r3
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004db2:	4629      	mov	r1, r5
 8004db4:	024b      	lsls	r3, r1, #9
 8004db6:	4621      	mov	r1, r4
 8004db8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	024a      	lsls	r2, r1, #9
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dd0:	f7fb fa56 	bl	8000280 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4613      	mov	r3, r2
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ddc:	e058      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dde:	4b38      	ldr	r3, [pc, #224]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	2200      	movs	r2, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	4611      	mov	r1, r2
 8004dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	2300      	movs	r3, #0
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	f04f 0000 	mov.w	r0, #0
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	0159      	lsls	r1, r3, #5
 8004e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0a:	0150      	lsls	r0, r2, #5
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4641      	mov	r1, r8
 8004e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e16:	4649      	mov	r1, r9
 8004e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e30:	ebb2 040a 	subs.w	r4, r2, sl
 8004e34:	eb63 050b 	sbc.w	r5, r3, fp
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	00eb      	lsls	r3, r5, #3
 8004e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e46:	00e2      	lsls	r2, r4, #3
 8004e48:	4614      	mov	r4, r2
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	18e3      	adds	r3, r4, r3
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	464b      	mov	r3, r9
 8004e54:	eb45 0303 	adc.w	r3, r5, r3
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e66:	4629      	mov	r1, r5
 8004e68:	028b      	lsls	r3, r1, #10
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e70:	4621      	mov	r1, r4
 8004e72:	028a      	lsls	r2, r1, #10
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	61fa      	str	r2, [r7, #28]
 8004e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e84:	f7fb f9fc 	bl	8000280 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3750      	adds	r7, #80	; 0x50
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	007a1200 	.word	0x007a1200

08004ecc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d038      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ef4:	4b68      	ldr	r3, [pc, #416]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004efa:	f7fe fc4f 	bl	800379c <HAL_GetTick>
 8004efe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f02:	f7fe fc4b 	bl	800379c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0bd      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f14:	4b61      	ldr	r3, [pc, #388]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	019b      	lsls	r3, r3, #6
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	071b      	lsls	r3, r3, #28
 8004f32:	495a      	ldr	r1, [pc, #360]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f3a:	4b57      	ldr	r3, [pc, #348]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f40:	f7fe fc2c 	bl	800379c <HAL_GetTick>
 8004f44:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f48:	f7fe fc28 	bl	800379c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e09a      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f5a:	4b50      	ldr	r3, [pc, #320]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8083 	beq.w	800507a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	4b48      	ldr	r3, [pc, #288]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	4a47      	ldr	r2, [pc, #284]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f82:	6413      	str	r3, [r2, #64]	; 0x40
 8004f84:	4b45      	ldr	r3, [pc, #276]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f90:	4b43      	ldr	r3, [pc, #268]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a42      	ldr	r2, [pc, #264]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9c:	f7fe fbfe 	bl	800379c <HAL_GetTick>
 8004fa0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fa4:	f7fe fbfa 	bl	800379c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e06c      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fc2:	4b36      	ldr	r3, [pc, #216]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02f      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d028      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fe0:	4b2e      	ldr	r3, [pc, #184]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fea:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff0:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ff6:	4a29      	ldr	r2, [pc, #164]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ffc:	4b27      	ldr	r3, [pc, #156]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d114      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005008:	f7fe fbc8 	bl	800379c <HAL_GetTick>
 800500c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500e:	e00a      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7fe fbc4 	bl	800379c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e034      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005026:	4b1d      	ldr	r3, [pc, #116]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ee      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503e:	d10d      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005054:	4911      	ldr	r1, [pc, #68]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
 800505a:	e005      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a0e      	ldr	r2, [pc, #56]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005062:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005066:	6093      	str	r3, [r2, #8]
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005074:	4909      	ldr	r1, [pc, #36]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005076:	4313      	orrs	r3, r2
 8005078:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	7d1a      	ldrb	r2, [r3, #20]
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800508c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	42470068 	.word	0x42470068
 800509c:	40023800 	.word	0x40023800
 80050a0:	40007000 	.word	0x40007000
 80050a4:	42470e40 	.word	0x42470e40
 80050a8:	424711e0 	.word	0x424711e0

080050ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e066      	b.n	8005190 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7f5b      	ldrb	r3, [r3, #29]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fe f936 	bl	8003344 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	22ca      	movs	r2, #202	; 0xca
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2253      	movs	r2, #83	; 0x53
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fbce 	bl	8005890 <RTC_EnterInitMode>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d12c      	bne.n	8005158 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800510c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005110:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6899      	ldr	r1, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68d2      	ldr	r2, [r2, #12]
 8005138:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6919      	ldr	r1, [r3, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	041a      	lsls	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fbd5 	bl	80058fe <RTC_ExitInitMode>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d113      	bne.n	8005186 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	7f1b      	ldrb	r3, [r3, #28]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_RTC_SetTime+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e087      	b.n	80052c4 <HAL_RTC_SetTime+0x12c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2202      	movs	r2, #2
 80051be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d126      	bne.n	8005214 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fbb2 	bl	8005948 <RTC_ByteToBcd2>
 80051e4:	4603      	mov	r3, r0
 80051e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fbab 	bl	8005948 <RTC_ByteToBcd2>
 80051f2:	4603      	mov	r3, r0
 80051f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	789b      	ldrb	r3, [r3, #2]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fba3 	bl	8005948 <RTC_ByteToBcd2>
 8005202:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005204:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	78db      	ldrb	r3, [r3, #3]
 800520c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e018      	b.n	8005246 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005234:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800523a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	78db      	ldrb	r3, [r3, #3]
 8005240:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	22ca      	movs	r2, #202	; 0xca
 800524c:	625a      	str	r2, [r3, #36]	; 0x24
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2253      	movs	r2, #83	; 0x53
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fb1a 	bl	8005890 <RTC_EnterInitMode>
 800525c:	4603      	mov	r3, r0
 800525e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d120      	bne.n	80052a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005270:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005274:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005284:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fb2d 	bl	80058fe <RTC_ExitInitMode>
 80052a4:	4603      	mov	r3, r0
 80052a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	22ff      	movs	r2, #255	; 0xff
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	771a      	strb	r2, [r3, #28]

  return status;
 80052c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd90      	pop	{r4, r7, pc}

080052cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80052fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005302:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800530e:	b2da      	uxtb	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800531e:	b2da      	uxtb	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532c:	b2da      	uxtb	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	0d9b      	lsrs	r3, r3, #22
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d11a      	bne.n	800537e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fb18 	bl	8005982 <RTC_Bcd2ToByte>
 8005352:	4603      	mov	r3, r0
 8005354:	461a      	mov	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fb0f 	bl	8005982 <RTC_Bcd2ToByte>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	789b      	ldrb	r3, [r3, #2]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fb06 	bl	8005982 <RTC_Bcd2ToByte>
 8005376:	4603      	mov	r3, r0
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	7f1b      	ldrb	r3, [r3, #28]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_RTC_SetDate+0x1c>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e071      	b.n	8005488 <HAL_RTC_SetDate+0x100>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2202      	movs	r2, #2
 80053ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10e      	bne.n	80053d4 <HAL_RTC_SetDate+0x4c>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	330a      	adds	r3, #10
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11c      	bne.n	8005414 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fab2 	bl	8005948 <RTC_ByteToBcd2>
 80053e4:	4603      	mov	r3, r0
 80053e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 faab 	bl	8005948 <RTC_ByteToBcd2>
 80053f2:	4603      	mov	r3, r0
 80053f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	789b      	ldrb	r3, [r3, #2]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 faa3 	bl	8005948 <RTC_ByteToBcd2>
 8005402:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005404:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e00e      	b.n	8005432 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	78db      	ldrb	r3, [r3, #3]
 8005418:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005420:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005426:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	22ca      	movs	r2, #202	; 0xca
 8005438:	625a      	str	r2, [r3, #36]	; 0x24
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2253      	movs	r2, #83	; 0x53
 8005440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fa24 	bl	8005890 <RTC_EnterInitMode>
 8005448:	4603      	mov	r3, r0
 800544a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10c      	bne.n	800546c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005460:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fa4b 	bl	80058fe <RTC_ExitInitMode>
 8005468:	4603      	mov	r3, r0
 800546a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	771a      	strb	r2, [r3, #28]

  return status;
 8005486:	7cfb      	ldrb	r3, [r7, #19]
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}

08005490 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	0b5b      	lsrs	r3, r3, #13
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11a      	bne.n	8005524 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	78db      	ldrb	r3, [r3, #3]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fa45 	bl	8005982 <RTC_Bcd2ToByte>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fa3c 	bl	8005982 <RTC_Bcd2ToByte>
 800550a:	4603      	mov	r3, r0
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	789b      	ldrb	r3, [r3, #2]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fa33 	bl	8005982 <RTC_Bcd2ToByte>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b089      	sub	sp, #36	; 0x24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800553c:	4b9a      	ldr	r3, [pc, #616]	; (80057a8 <HAL_RTC_SetAlarm_IT+0x278>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a9a      	ldr	r2, [pc, #616]	; (80057ac <HAL_RTC_SetAlarm_IT+0x27c>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	0adb      	lsrs	r3, r3, #11
 8005548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800554c:	fb02 f303 	mul.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	7f1b      	ldrb	r3, [r3, #28]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_RTC_SetAlarm_IT+0x36>
 8005562:	2302      	movs	r3, #2
 8005564:	e11c      	b.n	80057a0 <HAL_RTC_SetAlarm_IT+0x270>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2202      	movs	r2, #2
 8005570:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d137      	bne.n	80055e8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f9d9 	bl	8005948 <RTC_ByteToBcd2>
 8005596:	4603      	mov	r3, r0
 8005598:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f9d2 	bl	8005948 <RTC_ByteToBcd2>
 80055a4:	4603      	mov	r3, r0
 80055a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80055a8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	789b      	ldrb	r3, [r3, #2]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f9ca 	bl	8005948 <RTC_ByteToBcd2>
 80055b4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80055b6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	78db      	ldrb	r3, [r3, #3]
 80055be:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80055c0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f9bc 	bl	8005948 <RTC_ByteToBcd2>
 80055d0:	4603      	mov	r3, r0
 80055d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80055d4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80055dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	e023      	b.n	8005630 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005608:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800560e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	78db      	ldrb	r3, [r3, #3]
 8005614:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005616:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800561e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005620:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005626:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800562c:	4313      	orrs	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005638:	4313      	orrs	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	22ca      	movs	r2, #202	; 0xca
 8005642:	625a      	str	r2, [r3, #36]	; 0x24
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2253      	movs	r2, #83	; 0x53
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005654:	d141      	bne.n	80056da <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005664:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005676:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1e5a      	subs	r2, r3, #1
 800567c:	617a      	str	r2, [r7, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	22ff      	movs	r2, #255	; 0xff
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2203      	movs	r2, #3
 800568e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e082      	b.n	80057a0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0e7      	beq.n	8005678 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	e04b      	b.n	8005772 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056e8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80056fa:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80056fc:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_RTC_SetAlarm_IT+0x278>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <HAL_RTC_SetAlarm_IT+0x27c>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	0adb      	lsrs	r3, r3, #11
 8005708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800570c:	fb02 f303 	mul.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	617a      	str	r2, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2203      	movs	r2, #3
 8005728:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e035      	b.n	80057a0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0e7      	beq.n	8005712 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005760:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005770:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a0e      	ldr	r2, [pc, #56]	; (80057b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800577c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005788:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	22ff      	movs	r2, #255	; 0xff
 8005790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3724      	adds	r7, #36	; 0x24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd90      	pop	{r4, r7, pc}
 80057a8:	20000020 	.word	0x20000020
 80057ac:	10624dd3 	.word	0x10624dd3
 80057b0:	40013c00 	.word	0x40013c00

080057b4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d012      	beq.n	80057f0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fd f98f 	bl	8002afc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80057ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d012      	beq.n	8005824 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f8d4 	bl	80059ba <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005822:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RTC_AlarmIRQHandler+0x88>)
 8005826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800582a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	775a      	strb	r2, [r3, #29]
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40013c00 	.word	0x40013c00

08005840 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800585a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800585c:	f7fd ff9e 	bl	800379c <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005862:	e009      	b.n	8005878 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005864:	f7fd ff9a 	bl	800379c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005872:	d901      	bls.n	8005878 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e007      	b.n	8005888 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ee      	beq.n	8005864 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d122      	bne.n	80058f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058be:	f7fd ff6d 	bl	800379c <HAL_GetTick>
 80058c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058c4:	e00c      	b.n	80058e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058c6:	f7fd ff69 	bl	800379c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058d4:	d904      	bls.n	80058e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2204      	movs	r2, #4
 80058da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <RTC_EnterInitMode+0x64>
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d1e8      	bne.n	80058c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005918:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ff89 	bl	8005840 <HAL_RTC_WaitForSynchro>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2204      	movs	r2, #4
 8005938:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005956:	e005      	b.n	8005964 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	3301      	adds	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	3b0a      	subs	r3, #10
 8005962:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	2b09      	cmp	r3, #9
 8005968:	d8f6      	bhi.n	8005958 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	b2da      	uxtb	r2, r3
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	4313      	orrs	r3, r2
 8005974:	b2db      	uxtb	r3, r3
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	4603      	mov	r3, r0
 800598a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	0092      	lsls	r2, r2, #2
 800599a:	4413      	add	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	4413      	add	r3, r2
 80059ac:	b2db      	uxtb	r3, r3
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e07b      	b.n	8005ad8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d108      	bne.n	80059fa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059f0:	d009      	beq.n	8005a06 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	61da      	str	r2, [r3, #28]
 80059f8:	e005      	b.n	8005a06 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fd fcc3 	bl	80033ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	ea42 0103 	orr.w	r1, r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	f003 0104 	and.w	r1, r3, #4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0210 	and.w	r2, r3, #16
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_SPI_Transmit+0x22>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e126      	b.n	8005d50 <HAL_SPI_Transmit+0x270>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b0a:	f7fd fe47 	bl	800379c <HAL_GetTick>
 8005b0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d002      	beq.n	8005b26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
 8005b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b24:	e10b      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_SPI_Transmit+0x52>
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b36:	e102      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7e:	d10f      	bne.n	8005ba0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d007      	beq.n	8005bbe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc6:	d14b      	bne.n	8005c60 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_SPI_Transmit+0xf6>
 8005bd0:	8afb      	ldrh	r3, [r7, #22]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d13e      	bne.n	8005c54 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bfa:	e02b      	b.n	8005c54 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d112      	bne.n	8005c30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	881a      	ldrh	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c2e:	e011      	b.n	8005c54 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c30:	f7fd fdb4 	bl	800379c <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d803      	bhi.n	8005c48 <HAL_SPI_Transmit+0x168>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d102      	bne.n	8005c4e <HAL_SPI_Transmit+0x16e>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c52:	e074      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1ce      	bne.n	8005bfc <HAL_SPI_Transmit+0x11c>
 8005c5e:	e04c      	b.n	8005cfa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_SPI_Transmit+0x18e>
 8005c68:	8afb      	ldrh	r3, [r7, #22]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d140      	bne.n	8005cf0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	7812      	ldrb	r2, [r2, #0]
 8005c7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c94:	e02c      	b.n	8005cf0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d113      	bne.n	8005ccc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cca:	e011      	b.n	8005cf0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ccc:	f7fd fd66 	bl	800379c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d803      	bhi.n	8005ce4 <HAL_SPI_Transmit+0x204>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d102      	bne.n	8005cea <HAL_SPI_Transmit+0x20a>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cee:	e026      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1cd      	bne.n	8005c96 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f8b2 	bl	8005e68 <SPI_EndRxTxTransaction>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e000      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d68:	f7fd fd18 	bl	800379c <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	4413      	add	r3, r2
 8005d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d78:	f7fd fd10 	bl	800379c <HAL_GetTick>
 8005d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d7e:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	015b      	lsls	r3, r3, #5
 8005d84:	0d1b      	lsrs	r3, r3, #20
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8e:	e054      	b.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d050      	beq.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d98:	f7fd fd00 	bl	800379c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d902      	bls.n	8005dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d13d      	bne.n	8005e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc6:	d111      	bne.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd0:	d004      	beq.n	8005ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dda:	d107      	bne.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df4:	d10f      	bne.n	8005e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e017      	b.n	8005e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d19b      	bne.n	8005d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000020 	.word	0x20000020

08005e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e74:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <SPI_EndRxTxTransaction+0x7c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <SPI_EndRxTxTransaction+0x80>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	0d5b      	lsrs	r3, r3, #21
 8005e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
 8005e88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e92:	d112      	bne.n	8005eba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2180      	movs	r1, #128	; 0x80
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff ff5a 	bl	8005d58 <SPI_WaitFlagStateUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d016      	beq.n	8005ed8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e00f      	b.n	8005eda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed0:	2b80      	cmp	r3, #128	; 0x80
 8005ed2:	d0f2      	beq.n	8005eba <SPI_EndRxTxTransaction+0x52>
 8005ed4:	e000      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ed6:	bf00      	nop
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000020 	.word	0x20000020
 8005ee8:	165e9f81 	.word	0x165e9f81

08005eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e041      	b.n	8005f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fd fa92 	bl	800343c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f000 fc4a 	bl	80067c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d001      	beq.n	8005fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e044      	b.n	800602e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1e      	ldr	r2, [pc, #120]	; (800603c <HAL_TIM_Base_Start_IT+0xb0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_TIM_Base_Start_IT+0xb4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a19      	ldr	r2, [pc, #100]	; (8006044 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a17      	ldr	r2, [pc, #92]	; (8006048 <HAL_TIM_Base_Start_IT+0xbc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a16      	ldr	r2, [pc, #88]	; (800604c <HAL_TIM_Base_Start_IT+0xc0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d111      	bne.n	800601c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b06      	cmp	r3, #6
 8006008:	d010      	beq.n	800602c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	e007      	b.n	800602c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40000400 	.word	0x40000400
 8006044:	40000800 	.word	0x40000800
 8006048:	40000c00 	.word	0x40000c00
 800604c:	40014000 	.word	0x40014000

08006050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e041      	b.n	80060e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fd fa08 	bl	800348c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f000 fb98 	bl	80067c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <HAL_TIM_PWM_Start+0x24>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	e022      	b.n	800615a <HAL_TIM_PWM_Start+0x6a>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b04      	cmp	r3, #4
 8006118:	d109      	bne.n	800612e <HAL_TIM_PWM_Start+0x3e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	bf14      	ite	ne
 8006126:	2301      	movne	r3, #1
 8006128:	2300      	moveq	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	e015      	b.n	800615a <HAL_TIM_PWM_Start+0x6a>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d109      	bne.n	8006148 <HAL_TIM_PWM_Start+0x58>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e008      	b.n	800615a <HAL_TIM_PWM_Start+0x6a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b01      	cmp	r3, #1
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e068      	b.n	8006234 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d104      	bne.n	8006172 <HAL_TIM_PWM_Start+0x82>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006170:	e013      	b.n	800619a <HAL_TIM_PWM_Start+0xaa>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b04      	cmp	r3, #4
 8006176:	d104      	bne.n	8006182 <HAL_TIM_PWM_Start+0x92>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006180:	e00b      	b.n	800619a <HAL_TIM_PWM_Start+0xaa>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b08      	cmp	r3, #8
 8006186:	d104      	bne.n	8006192 <HAL_TIM_PWM_Start+0xa2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006190:	e003      	b.n	800619a <HAL_TIM_PWM_Start+0xaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2201      	movs	r2, #1
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fdb4 	bl	8006d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a23      	ldr	r2, [pc, #140]	; (800623c <HAL_TIM_PWM_Start+0x14c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d107      	bne.n	80061c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1d      	ldr	r2, [pc, #116]	; (800623c <HAL_TIM_PWM_Start+0x14c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d018      	beq.n	80061fe <HAL_TIM_PWM_Start+0x10e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d4:	d013      	beq.n	80061fe <HAL_TIM_PWM_Start+0x10e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a19      	ldr	r2, [pc, #100]	; (8006240 <HAL_TIM_PWM_Start+0x150>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIM_PWM_Start+0x10e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a17      	ldr	r2, [pc, #92]	; (8006244 <HAL_TIM_PWM_Start+0x154>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_PWM_Start+0x10e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a16      	ldr	r2, [pc, #88]	; (8006248 <HAL_TIM_PWM_Start+0x158>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_PWM_Start+0x10e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <HAL_TIM_PWM_Start+0x15c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d111      	bne.n	8006222 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d010      	beq.n	8006232 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006220:	e007      	b.n	8006232 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0201 	orr.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40010000 	.word	0x40010000
 8006240:	40000400 	.word	0x40000400
 8006244:	40000800 	.word	0x40000800
 8006248:	40000c00 	.word	0x40000c00
 800624c:	40014000 	.word	0x40014000

08006250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d122      	bne.n	80062ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b02      	cmp	r3, #2
 8006272:	d11b      	bne.n	80062ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0202 	mvn.w	r2, #2
 800627c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa77 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa69 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa7a 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d122      	bne.n	8006300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0204 	mvn.w	r2, #4
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa4d 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa3f 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fa50 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b08      	cmp	r3, #8
 800630c:	d122      	bne.n	8006354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b08      	cmp	r3, #8
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0208 	mvn.w	r2, #8
 8006324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2204      	movs	r2, #4
 800632a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa23 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa15 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa26 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b10      	cmp	r3, #16
 8006360:	d122      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b10      	cmp	r3, #16
 800636e:	d11b      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0210 	mvn.w	r2, #16
 8006378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2208      	movs	r2, #8
 800637e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9f9 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9eb 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f9fc 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10e      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d107      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0201 	mvn.w	r2, #1
 80063cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fc fbae 	bl	8002b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063de:	2b80      	cmp	r3, #128	; 0x80
 80063e0:	d10e      	bne.n	8006400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ec:	2b80      	cmp	r3, #128	; 0x80
 80063ee:	d107      	bne.n	8006400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd26 	bl	8006e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d10e      	bne.n	800642c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d107      	bne.n	800642c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9c1 	bl	80067ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b20      	cmp	r3, #32
 8006438:	d10e      	bne.n	8006458 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b20      	cmp	r3, #32
 8006446:	d107      	bne.n	8006458 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0220 	mvn.w	r2, #32
 8006450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fcf0 	bl	8006e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800647a:	2302      	movs	r3, #2
 800647c:	e0ae      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	f200 809f 	bhi.w	80065cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080065cd 	.word	0x080065cd
 800649c:	080065cd 	.word	0x080065cd
 80064a0:	080065cd 	.word	0x080065cd
 80064a4:	08006509 	.word	0x08006509
 80064a8:	080065cd 	.word	0x080065cd
 80064ac:	080065cd 	.word	0x080065cd
 80064b0:	080065cd 	.word	0x080065cd
 80064b4:	0800654b 	.word	0x0800654b
 80064b8:	080065cd 	.word	0x080065cd
 80064bc:	080065cd 	.word	0x080065cd
 80064c0:	080065cd 	.word	0x080065cd
 80064c4:	0800658b 	.word	0x0800658b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f9f8 	bl	80068c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0208 	orr.w	r2, r2, #8
 80064e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0204 	bic.w	r2, r2, #4
 80064f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6999      	ldr	r1, [r3, #24]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	619a      	str	r2, [r3, #24]
      break;
 8006506:	e064      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa3e 	bl	8006990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	619a      	str	r2, [r3, #24]
      break;
 8006548:	e043      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fa89 	bl	8006a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0208 	orr.w	r2, r2, #8
 8006564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0204 	bic.w	r2, r2, #4
 8006574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69d9      	ldr	r1, [r3, #28]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	61da      	str	r2, [r3, #28]
      break;
 8006588:	e023      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fad3 	bl	8006b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	021a      	lsls	r2, r3, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	61da      	str	r2, [r3, #28]
      break;
 80065ca:	e002      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
      break;
 80065d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_ConfigClockSource+0x1c>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0b4      	b.n	800676a <HAL_TIM_ConfigClockSource+0x186>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800661e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006638:	d03e      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0xd4>
 800663a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800663e:	f200 8087 	bhi.w	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	f000 8086 	beq.w	8006756 <HAL_TIM_ConfigClockSource+0x172>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	d87f      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b70      	cmp	r3, #112	; 0x70
 8006652:	d01a      	beq.n	800668a <HAL_TIM_ConfigClockSource+0xa6>
 8006654:	2b70      	cmp	r3, #112	; 0x70
 8006656:	d87b      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b60      	cmp	r3, #96	; 0x60
 800665a:	d050      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x11a>
 800665c:	2b60      	cmp	r3, #96	; 0x60
 800665e:	d877      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b50      	cmp	r3, #80	; 0x50
 8006662:	d03c      	beq.n	80066de <HAL_TIM_ConfigClockSource+0xfa>
 8006664:	2b50      	cmp	r3, #80	; 0x50
 8006666:	d873      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d058      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x13a>
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d86f      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b30      	cmp	r3, #48	; 0x30
 8006672:	d064      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d86b      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b20      	cmp	r3, #32
 800667a:	d060      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d867      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d05c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006684:	2b10      	cmp	r3, #16
 8006686:	d05a      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	e062      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6899      	ldr	r1, [r3, #8]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f000 fb19 	bl	8006cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	609a      	str	r2, [r3, #8]
      break;
 80066b6:	e04f      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f000 fb02 	bl	8006cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066da:	609a      	str	r2, [r3, #8]
      break;
 80066dc:	e03c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 fa76 	bl	8006bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2150      	movs	r1, #80	; 0x50
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 facf 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 80066fc:	e02c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	461a      	mov	r2, r3
 800670c:	f000 fa95 	bl	8006c3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2160      	movs	r1, #96	; 0x60
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fabf 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 800671c:	e01c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	461a      	mov	r2, r3
 800672c:	f000 fa56 	bl	8006bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2140      	movs	r1, #64	; 0x40
 8006736:	4618      	mov	r0, r3
 8006738:	f000 faaf 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 800673c:	e00c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f000 faa6 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 800674e:	e003      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
      break;
 8006754:	e000      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a34      	ldr	r2, [pc, #208]	; (80068a8 <TIM_Base_SetConfig+0xe4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00f      	beq.n	80067fc <TIM_Base_SetConfig+0x38>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e2:	d00b      	beq.n	80067fc <TIM_Base_SetConfig+0x38>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a31      	ldr	r2, [pc, #196]	; (80068ac <TIM_Base_SetConfig+0xe8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_Base_SetConfig+0x38>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a30      	ldr	r2, [pc, #192]	; (80068b0 <TIM_Base_SetConfig+0xec>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_Base_SetConfig+0x38>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a2f      	ldr	r2, [pc, #188]	; (80068b4 <TIM_Base_SetConfig+0xf0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d108      	bne.n	800680e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a25      	ldr	r2, [pc, #148]	; (80068a8 <TIM_Base_SetConfig+0xe4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01b      	beq.n	800684e <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681c:	d017      	beq.n	800684e <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a22      	ldr	r2, [pc, #136]	; (80068ac <TIM_Base_SetConfig+0xe8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a21      	ldr	r2, [pc, #132]	; (80068b0 <TIM_Base_SetConfig+0xec>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00f      	beq.n	800684e <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <TIM_Base_SetConfig+0xf0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00b      	beq.n	800684e <TIM_Base_SetConfig+0x8a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <TIM_Base_SetConfig+0xf4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d007      	beq.n	800684e <TIM_Base_SetConfig+0x8a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <TIM_Base_SetConfig+0xf8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d003      	beq.n	800684e <TIM_Base_SetConfig+0x8a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <TIM_Base_SetConfig+0xfc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d108      	bne.n	8006860 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <TIM_Base_SetConfig+0xe4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d103      	bne.n	8006894 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	615a      	str	r2, [r3, #20]
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40000c00 	.word	0x40000c00
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800

080068c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 0302 	bic.w	r3, r3, #2
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <TIM_OC1_SetConfig+0xc8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10c      	bne.n	800693a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f023 0308 	bic.w	r3, r3, #8
 8006926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 0304 	bic.w	r3, r3, #4
 8006938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <TIM_OC1_SetConfig+0xc8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d111      	bne.n	8006966 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40010000 	.word	0x40010000

08006990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f023 0210 	bic.w	r2, r3, #16
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0320 	bic.w	r3, r3, #32
 80069da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <TIM_OC2_SetConfig+0xd4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d10d      	bne.n	8006a0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <TIM_OC2_SetConfig+0xd4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d113      	bne.n	8006a3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40010000 	.word	0x40010000

08006a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <TIM_OC3_SetConfig+0xd0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d10d      	bne.n	8006ae2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a14      	ldr	r2, [pc, #80]	; (8006b38 <TIM_OC3_SetConfig+0xd0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d113      	bne.n	8006b12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40010000 	.word	0x40010000

08006b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	031b      	lsls	r3, r3, #12
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <TIM_OC4_SetConfig+0x9c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d109      	bne.n	8006bb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	019b      	lsls	r3, r3, #6
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000

08006bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f023 0201 	bic.w	r2, r3, #1
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f023 030a 	bic.w	r3, r3, #10
 8006c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f023 0210 	bic.w	r2, r3, #16
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	031b      	lsls	r3, r3, #12
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f043 0307 	orr.w	r3, r3, #7
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	609a      	str	r2, [r3, #8]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	021a      	lsls	r2, r3, #8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	609a      	str	r2, [r3, #8]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2201      	movs	r2, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	401a      	ands	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e050      	b.n	8006e16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1c      	ldr	r2, [pc, #112]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d018      	beq.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc0:	d013      	beq.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00e      	beq.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d009      	beq.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d004      	beq.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d10c      	bne.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40010000 	.word	0x40010000
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800
 8006e30:	40000c00 	.word	0x40000c00
 8006e34:	40014000 	.word	0x40014000

08006e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <__errno>:
 8006e60:	4b01      	ldr	r3, [pc, #4]	; (8006e68 <__errno+0x8>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	2000002c 	.word	0x2000002c

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ea4 <__libc_init_array+0x38>)
 8006e70:	4c0d      	ldr	r4, [pc, #52]	; (8006ea8 <__libc_init_array+0x3c>)
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	2600      	movs	r6, #0
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	4d0b      	ldr	r5, [pc, #44]	; (8006eac <__libc_init_array+0x40>)
 8006e7e:	4c0c      	ldr	r4, [pc, #48]	; (8006eb0 <__libc_init_array+0x44>)
 8006e80:	f000 fca4 	bl	80077cc <_init>
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08028154 	.word	0x08028154
 8006ea8:	08028154 	.word	0x08028154
 8006eac:	08028154 	.word	0x08028154
 8006eb0:	08028158 	.word	0x08028158

08006eb4 <malloc>:
 8006eb4:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <malloc+0xc>)
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f000 b87f 	b.w	8006fbc <_malloc_r>
 8006ebe:	bf00      	nop
 8006ec0:	2000002c 	.word	0x2000002c

08006ec4 <free>:
 8006ec4:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <free+0xc>)
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	f000 b80b 	b.w	8006ee4 <_free_r>
 8006ece:	bf00      	nop
 8006ed0:	2000002c 	.word	0x2000002c

08006ed4 <memset>:
 8006ed4:	4402      	add	r2, r0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>

08006ee4 <_free_r>:
 8006ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ee6:	2900      	cmp	r1, #0
 8006ee8:	d044      	beq.n	8006f74 <_free_r+0x90>
 8006eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eee:	9001      	str	r0, [sp, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ef6:	bfb8      	it	lt
 8006ef8:	18e4      	addlt	r4, r4, r3
 8006efa:	f000 f90b 	bl	8007114 <__malloc_lock>
 8006efe:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <_free_r+0x94>)
 8006f00:	9801      	ldr	r0, [sp, #4]
 8006f02:	6813      	ldr	r3, [r2, #0]
 8006f04:	b933      	cbnz	r3, 8006f14 <_free_r+0x30>
 8006f06:	6063      	str	r3, [r4, #4]
 8006f08:	6014      	str	r4, [r2, #0]
 8006f0a:	b003      	add	sp, #12
 8006f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f10:	f000 b906 	b.w	8007120 <__malloc_unlock>
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	d908      	bls.n	8006f2a <_free_r+0x46>
 8006f18:	6825      	ldr	r5, [r4, #0]
 8006f1a:	1961      	adds	r1, r4, r5
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	bf01      	itttt	eq
 8006f20:	6819      	ldreq	r1, [r3, #0]
 8006f22:	685b      	ldreq	r3, [r3, #4]
 8006f24:	1949      	addeq	r1, r1, r5
 8006f26:	6021      	streq	r1, [r4, #0]
 8006f28:	e7ed      	b.n	8006f06 <_free_r+0x22>
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	b10b      	cbz	r3, 8006f34 <_free_r+0x50>
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	d9fa      	bls.n	8006f2a <_free_r+0x46>
 8006f34:	6811      	ldr	r1, [r2, #0]
 8006f36:	1855      	adds	r5, r2, r1
 8006f38:	42a5      	cmp	r5, r4
 8006f3a:	d10b      	bne.n	8006f54 <_free_r+0x70>
 8006f3c:	6824      	ldr	r4, [r4, #0]
 8006f3e:	4421      	add	r1, r4
 8006f40:	1854      	adds	r4, r2, r1
 8006f42:	42a3      	cmp	r3, r4
 8006f44:	6011      	str	r1, [r2, #0]
 8006f46:	d1e0      	bne.n	8006f0a <_free_r+0x26>
 8006f48:	681c      	ldr	r4, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	6053      	str	r3, [r2, #4]
 8006f4e:	4421      	add	r1, r4
 8006f50:	6011      	str	r1, [r2, #0]
 8006f52:	e7da      	b.n	8006f0a <_free_r+0x26>
 8006f54:	d902      	bls.n	8006f5c <_free_r+0x78>
 8006f56:	230c      	movs	r3, #12
 8006f58:	6003      	str	r3, [r0, #0]
 8006f5a:	e7d6      	b.n	8006f0a <_free_r+0x26>
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	1961      	adds	r1, r4, r5
 8006f60:	428b      	cmp	r3, r1
 8006f62:	bf04      	itt	eq
 8006f64:	6819      	ldreq	r1, [r3, #0]
 8006f66:	685b      	ldreq	r3, [r3, #4]
 8006f68:	6063      	str	r3, [r4, #4]
 8006f6a:	bf04      	itt	eq
 8006f6c:	1949      	addeq	r1, r1, r5
 8006f6e:	6021      	streq	r1, [r4, #0]
 8006f70:	6054      	str	r4, [r2, #4]
 8006f72:	e7ca      	b.n	8006f0a <_free_r+0x26>
 8006f74:	b003      	add	sp, #12
 8006f76:	bd30      	pop	{r4, r5, pc}
 8006f78:	20000240 	.word	0x20000240

08006f7c <sbrk_aligned>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	4e0e      	ldr	r6, [pc, #56]	; (8006fb8 <sbrk_aligned+0x3c>)
 8006f80:	460c      	mov	r4, r1
 8006f82:	6831      	ldr	r1, [r6, #0]
 8006f84:	4605      	mov	r5, r0
 8006f86:	b911      	cbnz	r1, 8006f8e <sbrk_aligned+0x12>
 8006f88:	f000 f894 	bl	80070b4 <_sbrk_r>
 8006f8c:	6030      	str	r0, [r6, #0]
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 f88f 	bl	80070b4 <_sbrk_r>
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	d00a      	beq.n	8006fb0 <sbrk_aligned+0x34>
 8006f9a:	1cc4      	adds	r4, r0, #3
 8006f9c:	f024 0403 	bic.w	r4, r4, #3
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d007      	beq.n	8006fb4 <sbrk_aligned+0x38>
 8006fa4:	1a21      	subs	r1, r4, r0
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 f884 	bl	80070b4 <_sbrk_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d101      	bne.n	8006fb4 <sbrk_aligned+0x38>
 8006fb0:	f04f 34ff 	mov.w	r4, #4294967295
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	20000244 	.word	0x20000244

08006fbc <_malloc_r>:
 8006fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc0:	1ccd      	adds	r5, r1, #3
 8006fc2:	f025 0503 	bic.w	r5, r5, #3
 8006fc6:	3508      	adds	r5, #8
 8006fc8:	2d0c      	cmp	r5, #12
 8006fca:	bf38      	it	cc
 8006fcc:	250c      	movcc	r5, #12
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	db01      	blt.n	8006fd8 <_malloc_r+0x1c>
 8006fd4:	42a9      	cmp	r1, r5
 8006fd6:	d905      	bls.n	8006fe4 <_malloc_r+0x28>
 8006fd8:	230c      	movs	r3, #12
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	2600      	movs	r6, #0
 8006fde:	4630      	mov	r0, r6
 8006fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe4:	4e2e      	ldr	r6, [pc, #184]	; (80070a0 <_malloc_r+0xe4>)
 8006fe6:	f000 f895 	bl	8007114 <__malloc_lock>
 8006fea:	6833      	ldr	r3, [r6, #0]
 8006fec:	461c      	mov	r4, r3
 8006fee:	bb34      	cbnz	r4, 800703e <_malloc_r+0x82>
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	f7ff ffc2 	bl	8006f7c <sbrk_aligned>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	d14d      	bne.n	800709a <_malloc_r+0xde>
 8006ffe:	6834      	ldr	r4, [r6, #0]
 8007000:	4626      	mov	r6, r4
 8007002:	2e00      	cmp	r6, #0
 8007004:	d140      	bne.n	8007088 <_malloc_r+0xcc>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	4631      	mov	r1, r6
 800700a:	4638      	mov	r0, r7
 800700c:	eb04 0803 	add.w	r8, r4, r3
 8007010:	f000 f850 	bl	80070b4 <_sbrk_r>
 8007014:	4580      	cmp	r8, r0
 8007016:	d13a      	bne.n	800708e <_malloc_r+0xd2>
 8007018:	6821      	ldr	r1, [r4, #0]
 800701a:	3503      	adds	r5, #3
 800701c:	1a6d      	subs	r5, r5, r1
 800701e:	f025 0503 	bic.w	r5, r5, #3
 8007022:	3508      	adds	r5, #8
 8007024:	2d0c      	cmp	r5, #12
 8007026:	bf38      	it	cc
 8007028:	250c      	movcc	r5, #12
 800702a:	4629      	mov	r1, r5
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff ffa5 	bl	8006f7c <sbrk_aligned>
 8007032:	3001      	adds	r0, #1
 8007034:	d02b      	beq.n	800708e <_malloc_r+0xd2>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	442b      	add	r3, r5
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	e00e      	b.n	800705c <_malloc_r+0xa0>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	1b52      	subs	r2, r2, r5
 8007042:	d41e      	bmi.n	8007082 <_malloc_r+0xc6>
 8007044:	2a0b      	cmp	r2, #11
 8007046:	d916      	bls.n	8007076 <_malloc_r+0xba>
 8007048:	1961      	adds	r1, r4, r5
 800704a:	42a3      	cmp	r3, r4
 800704c:	6025      	str	r5, [r4, #0]
 800704e:	bf18      	it	ne
 8007050:	6059      	strne	r1, [r3, #4]
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	bf08      	it	eq
 8007056:	6031      	streq	r1, [r6, #0]
 8007058:	5162      	str	r2, [r4, r5]
 800705a:	604b      	str	r3, [r1, #4]
 800705c:	4638      	mov	r0, r7
 800705e:	f104 060b 	add.w	r6, r4, #11
 8007062:	f000 f85d 	bl	8007120 <__malloc_unlock>
 8007066:	f026 0607 	bic.w	r6, r6, #7
 800706a:	1d23      	adds	r3, r4, #4
 800706c:	1af2      	subs	r2, r6, r3
 800706e:	d0b6      	beq.n	8006fde <_malloc_r+0x22>
 8007070:	1b9b      	subs	r3, r3, r6
 8007072:	50a3      	str	r3, [r4, r2]
 8007074:	e7b3      	b.n	8006fde <_malloc_r+0x22>
 8007076:	6862      	ldr	r2, [r4, #4]
 8007078:	42a3      	cmp	r3, r4
 800707a:	bf0c      	ite	eq
 800707c:	6032      	streq	r2, [r6, #0]
 800707e:	605a      	strne	r2, [r3, #4]
 8007080:	e7ec      	b.n	800705c <_malloc_r+0xa0>
 8007082:	4623      	mov	r3, r4
 8007084:	6864      	ldr	r4, [r4, #4]
 8007086:	e7b2      	b.n	8006fee <_malloc_r+0x32>
 8007088:	4634      	mov	r4, r6
 800708a:	6876      	ldr	r6, [r6, #4]
 800708c:	e7b9      	b.n	8007002 <_malloc_r+0x46>
 800708e:	230c      	movs	r3, #12
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	4638      	mov	r0, r7
 8007094:	f000 f844 	bl	8007120 <__malloc_unlock>
 8007098:	e7a1      	b.n	8006fde <_malloc_r+0x22>
 800709a:	6025      	str	r5, [r4, #0]
 800709c:	e7de      	b.n	800705c <_malloc_r+0xa0>
 800709e:	bf00      	nop
 80070a0:	20000240 	.word	0x20000240

080070a4 <realloc>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <realloc+0xc>)
 80070a6:	460a      	mov	r2, r1
 80070a8:	4601      	mov	r1, r0
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	f000 b83e 	b.w	800712c <_realloc_r>
 80070b0:	2000002c 	.word	0x2000002c

080070b4 <_sbrk_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4d06      	ldr	r5, [pc, #24]	; (80070d0 <_sbrk_r+0x1c>)
 80070b8:	2300      	movs	r3, #0
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	602b      	str	r3, [r5, #0]
 80070c0:	f7fc fa94 	bl	80035ec <_sbrk>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_sbrk_r+0x1a>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_sbrk_r+0x1a>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20000248 	.word	0x20000248

080070d4 <siprintf>:
 80070d4:	b40e      	push	{r1, r2, r3}
 80070d6:	b500      	push	{lr}
 80070d8:	b09c      	sub	sp, #112	; 0x70
 80070da:	ab1d      	add	r3, sp, #116	; 0x74
 80070dc:	9002      	str	r0, [sp, #8]
 80070de:	9006      	str	r0, [sp, #24]
 80070e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070e4:	4809      	ldr	r0, [pc, #36]	; (800710c <siprintf+0x38>)
 80070e6:	9107      	str	r1, [sp, #28]
 80070e8:	9104      	str	r1, [sp, #16]
 80070ea:	4909      	ldr	r1, [pc, #36]	; (8007110 <siprintf+0x3c>)
 80070ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f0:	9105      	str	r1, [sp, #20]
 80070f2:	6800      	ldr	r0, [r0, #0]
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	a902      	add	r1, sp, #8
 80070f8:	f000 f8a2 	bl	8007240 <_svfiprintf_r>
 80070fc:	9b02      	ldr	r3, [sp, #8]
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	b01c      	add	sp, #112	; 0x70
 8007104:	f85d eb04 	ldr.w	lr, [sp], #4
 8007108:	b003      	add	sp, #12
 800710a:	4770      	bx	lr
 800710c:	2000002c 	.word	0x2000002c
 8007110:	ffff0208 	.word	0xffff0208

08007114 <__malloc_lock>:
 8007114:	4801      	ldr	r0, [pc, #4]	; (800711c <__malloc_lock+0x8>)
 8007116:	f000 bb27 	b.w	8007768 <__retarget_lock_acquire_recursive>
 800711a:	bf00      	nop
 800711c:	2000024c 	.word	0x2000024c

08007120 <__malloc_unlock>:
 8007120:	4801      	ldr	r0, [pc, #4]	; (8007128 <__malloc_unlock+0x8>)
 8007122:	f000 bb22 	b.w	800776a <__retarget_lock_release_recursive>
 8007126:	bf00      	nop
 8007128:	2000024c 	.word	0x2000024c

0800712c <_realloc_r>:
 800712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	4680      	mov	r8, r0
 8007132:	4614      	mov	r4, r2
 8007134:	460e      	mov	r6, r1
 8007136:	b921      	cbnz	r1, 8007142 <_realloc_r+0x16>
 8007138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800713c:	4611      	mov	r1, r2
 800713e:	f7ff bf3d 	b.w	8006fbc <_malloc_r>
 8007142:	b92a      	cbnz	r2, 8007150 <_realloc_r+0x24>
 8007144:	f7ff fece 	bl	8006ee4 <_free_r>
 8007148:	4625      	mov	r5, r4
 800714a:	4628      	mov	r0, r5
 800714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007150:	f000 fb34 	bl	80077bc <_malloc_usable_size_r>
 8007154:	4284      	cmp	r4, r0
 8007156:	4607      	mov	r7, r0
 8007158:	d802      	bhi.n	8007160 <_realloc_r+0x34>
 800715a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800715e:	d812      	bhi.n	8007186 <_realloc_r+0x5a>
 8007160:	4621      	mov	r1, r4
 8007162:	4640      	mov	r0, r8
 8007164:	f7ff ff2a 	bl	8006fbc <_malloc_r>
 8007168:	4605      	mov	r5, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	d0ed      	beq.n	800714a <_realloc_r+0x1e>
 800716e:	42bc      	cmp	r4, r7
 8007170:	4622      	mov	r2, r4
 8007172:	4631      	mov	r1, r6
 8007174:	bf28      	it	cs
 8007176:	463a      	movcs	r2, r7
 8007178:	f000 faf8 	bl	800776c <memcpy>
 800717c:	4631      	mov	r1, r6
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff feb0 	bl	8006ee4 <_free_r>
 8007184:	e7e1      	b.n	800714a <_realloc_r+0x1e>
 8007186:	4635      	mov	r5, r6
 8007188:	e7df      	b.n	800714a <_realloc_r+0x1e>

0800718a <__ssputs_r>:
 800718a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800718e:	688e      	ldr	r6, [r1, #8]
 8007190:	429e      	cmp	r6, r3
 8007192:	4682      	mov	sl, r0
 8007194:	460c      	mov	r4, r1
 8007196:	4690      	mov	r8, r2
 8007198:	461f      	mov	r7, r3
 800719a:	d838      	bhi.n	800720e <__ssputs_r+0x84>
 800719c:	898a      	ldrh	r2, [r1, #12]
 800719e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071a2:	d032      	beq.n	800720a <__ssputs_r+0x80>
 80071a4:	6825      	ldr	r5, [r4, #0]
 80071a6:	6909      	ldr	r1, [r1, #16]
 80071a8:	eba5 0901 	sub.w	r9, r5, r1
 80071ac:	6965      	ldr	r5, [r4, #20]
 80071ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071b6:	3301      	adds	r3, #1
 80071b8:	444b      	add	r3, r9
 80071ba:	106d      	asrs	r5, r5, #1
 80071bc:	429d      	cmp	r5, r3
 80071be:	bf38      	it	cc
 80071c0:	461d      	movcc	r5, r3
 80071c2:	0553      	lsls	r3, r2, #21
 80071c4:	d531      	bpl.n	800722a <__ssputs_r+0xa0>
 80071c6:	4629      	mov	r1, r5
 80071c8:	f7ff fef8 	bl	8006fbc <_malloc_r>
 80071cc:	4606      	mov	r6, r0
 80071ce:	b950      	cbnz	r0, 80071e6 <__ssputs_r+0x5c>
 80071d0:	230c      	movs	r3, #12
 80071d2:	f8ca 3000 	str.w	r3, [sl]
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e6:	6921      	ldr	r1, [r4, #16]
 80071e8:	464a      	mov	r2, r9
 80071ea:	f000 fabf 	bl	800776c <memcpy>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	6126      	str	r6, [r4, #16]
 80071fc:	6165      	str	r5, [r4, #20]
 80071fe:	444e      	add	r6, r9
 8007200:	eba5 0509 	sub.w	r5, r5, r9
 8007204:	6026      	str	r6, [r4, #0]
 8007206:	60a5      	str	r5, [r4, #8]
 8007208:	463e      	mov	r6, r7
 800720a:	42be      	cmp	r6, r7
 800720c:	d900      	bls.n	8007210 <__ssputs_r+0x86>
 800720e:	463e      	mov	r6, r7
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	4632      	mov	r2, r6
 8007214:	4641      	mov	r1, r8
 8007216:	f000 fab7 	bl	8007788 <memmove>
 800721a:	68a3      	ldr	r3, [r4, #8]
 800721c:	1b9b      	subs	r3, r3, r6
 800721e:	60a3      	str	r3, [r4, #8]
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	4433      	add	r3, r6
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	2000      	movs	r0, #0
 8007228:	e7db      	b.n	80071e2 <__ssputs_r+0x58>
 800722a:	462a      	mov	r2, r5
 800722c:	f7ff ff7e 	bl	800712c <_realloc_r>
 8007230:	4606      	mov	r6, r0
 8007232:	2800      	cmp	r0, #0
 8007234:	d1e1      	bne.n	80071fa <__ssputs_r+0x70>
 8007236:	6921      	ldr	r1, [r4, #16]
 8007238:	4650      	mov	r0, sl
 800723a:	f7ff fe53 	bl	8006ee4 <_free_r>
 800723e:	e7c7      	b.n	80071d0 <__ssputs_r+0x46>

08007240 <_svfiprintf_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	4698      	mov	r8, r3
 8007246:	898b      	ldrh	r3, [r1, #12]
 8007248:	061b      	lsls	r3, r3, #24
 800724a:	b09d      	sub	sp, #116	; 0x74
 800724c:	4607      	mov	r7, r0
 800724e:	460d      	mov	r5, r1
 8007250:	4614      	mov	r4, r2
 8007252:	d50e      	bpl.n	8007272 <_svfiprintf_r+0x32>
 8007254:	690b      	ldr	r3, [r1, #16]
 8007256:	b963      	cbnz	r3, 8007272 <_svfiprintf_r+0x32>
 8007258:	2140      	movs	r1, #64	; 0x40
 800725a:	f7ff feaf 	bl	8006fbc <_malloc_r>
 800725e:	6028      	str	r0, [r5, #0]
 8007260:	6128      	str	r0, [r5, #16]
 8007262:	b920      	cbnz	r0, 800726e <_svfiprintf_r+0x2e>
 8007264:	230c      	movs	r3, #12
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	e0d1      	b.n	8007412 <_svfiprintf_r+0x1d2>
 800726e:	2340      	movs	r3, #64	; 0x40
 8007270:	616b      	str	r3, [r5, #20]
 8007272:	2300      	movs	r3, #0
 8007274:	9309      	str	r3, [sp, #36]	; 0x24
 8007276:	2320      	movs	r3, #32
 8007278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800727c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007280:	2330      	movs	r3, #48	; 0x30
 8007282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800742c <_svfiprintf_r+0x1ec>
 8007286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800728a:	f04f 0901 	mov.w	r9, #1
 800728e:	4623      	mov	r3, r4
 8007290:	469a      	mov	sl, r3
 8007292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007296:	b10a      	cbz	r2, 800729c <_svfiprintf_r+0x5c>
 8007298:	2a25      	cmp	r2, #37	; 0x25
 800729a:	d1f9      	bne.n	8007290 <_svfiprintf_r+0x50>
 800729c:	ebba 0b04 	subs.w	fp, sl, r4
 80072a0:	d00b      	beq.n	80072ba <_svfiprintf_r+0x7a>
 80072a2:	465b      	mov	r3, fp
 80072a4:	4622      	mov	r2, r4
 80072a6:	4629      	mov	r1, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ff6e 	bl	800718a <__ssputs_r>
 80072ae:	3001      	adds	r0, #1
 80072b0:	f000 80aa 	beq.w	8007408 <_svfiprintf_r+0x1c8>
 80072b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b6:	445a      	add	r2, fp
 80072b8:	9209      	str	r2, [sp, #36]	; 0x24
 80072ba:	f89a 3000 	ldrb.w	r3, [sl]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 80a2 	beq.w	8007408 <_svfiprintf_r+0x1c8>
 80072c4:	2300      	movs	r3, #0
 80072c6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ce:	f10a 0a01 	add.w	sl, sl, #1
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	9307      	str	r3, [sp, #28]
 80072d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072da:	931a      	str	r3, [sp, #104]	; 0x68
 80072dc:	4654      	mov	r4, sl
 80072de:	2205      	movs	r2, #5
 80072e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e4:	4851      	ldr	r0, [pc, #324]	; (800742c <_svfiprintf_r+0x1ec>)
 80072e6:	f7f8 ff7b 	bl	80001e0 <memchr>
 80072ea:	9a04      	ldr	r2, [sp, #16]
 80072ec:	b9d8      	cbnz	r0, 8007326 <_svfiprintf_r+0xe6>
 80072ee:	06d0      	lsls	r0, r2, #27
 80072f0:	bf44      	itt	mi
 80072f2:	2320      	movmi	r3, #32
 80072f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f8:	0711      	lsls	r1, r2, #28
 80072fa:	bf44      	itt	mi
 80072fc:	232b      	movmi	r3, #43	; 0x2b
 80072fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007302:	f89a 3000 	ldrb.w	r3, [sl]
 8007306:	2b2a      	cmp	r3, #42	; 0x2a
 8007308:	d015      	beq.n	8007336 <_svfiprintf_r+0xf6>
 800730a:	9a07      	ldr	r2, [sp, #28]
 800730c:	4654      	mov	r4, sl
 800730e:	2000      	movs	r0, #0
 8007310:	f04f 0c0a 	mov.w	ip, #10
 8007314:	4621      	mov	r1, r4
 8007316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800731a:	3b30      	subs	r3, #48	; 0x30
 800731c:	2b09      	cmp	r3, #9
 800731e:	d94e      	bls.n	80073be <_svfiprintf_r+0x17e>
 8007320:	b1b0      	cbz	r0, 8007350 <_svfiprintf_r+0x110>
 8007322:	9207      	str	r2, [sp, #28]
 8007324:	e014      	b.n	8007350 <_svfiprintf_r+0x110>
 8007326:	eba0 0308 	sub.w	r3, r0, r8
 800732a:	fa09 f303 	lsl.w	r3, r9, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	46a2      	mov	sl, r4
 8007334:	e7d2      	b.n	80072dc <_svfiprintf_r+0x9c>
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	1d19      	adds	r1, r3, #4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	9103      	str	r1, [sp, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfbb      	ittet	lt
 8007342:	425b      	neglt	r3, r3
 8007344:	f042 0202 	orrlt.w	r2, r2, #2
 8007348:	9307      	strge	r3, [sp, #28]
 800734a:	9307      	strlt	r3, [sp, #28]
 800734c:	bfb8      	it	lt
 800734e:	9204      	strlt	r2, [sp, #16]
 8007350:	7823      	ldrb	r3, [r4, #0]
 8007352:	2b2e      	cmp	r3, #46	; 0x2e
 8007354:	d10c      	bne.n	8007370 <_svfiprintf_r+0x130>
 8007356:	7863      	ldrb	r3, [r4, #1]
 8007358:	2b2a      	cmp	r3, #42	; 0x2a
 800735a:	d135      	bne.n	80073c8 <_svfiprintf_r+0x188>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	9203      	str	r2, [sp, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfb8      	it	lt
 8007368:	f04f 33ff 	movlt.w	r3, #4294967295
 800736c:	3402      	adds	r4, #2
 800736e:	9305      	str	r3, [sp, #20]
 8007370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800743c <_svfiprintf_r+0x1fc>
 8007374:	7821      	ldrb	r1, [r4, #0]
 8007376:	2203      	movs	r2, #3
 8007378:	4650      	mov	r0, sl
 800737a:	f7f8 ff31 	bl	80001e0 <memchr>
 800737e:	b140      	cbz	r0, 8007392 <_svfiprintf_r+0x152>
 8007380:	2340      	movs	r3, #64	; 0x40
 8007382:	eba0 000a 	sub.w	r0, r0, sl
 8007386:	fa03 f000 	lsl.w	r0, r3, r0
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	4303      	orrs	r3, r0
 800738e:	3401      	adds	r4, #1
 8007390:	9304      	str	r3, [sp, #16]
 8007392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007396:	4826      	ldr	r0, [pc, #152]	; (8007430 <_svfiprintf_r+0x1f0>)
 8007398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800739c:	2206      	movs	r2, #6
 800739e:	f7f8 ff1f 	bl	80001e0 <memchr>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d038      	beq.n	8007418 <_svfiprintf_r+0x1d8>
 80073a6:	4b23      	ldr	r3, [pc, #140]	; (8007434 <_svfiprintf_r+0x1f4>)
 80073a8:	bb1b      	cbnz	r3, 80073f2 <_svfiprintf_r+0x1b2>
 80073aa:	9b03      	ldr	r3, [sp, #12]
 80073ac:	3307      	adds	r3, #7
 80073ae:	f023 0307 	bic.w	r3, r3, #7
 80073b2:	3308      	adds	r3, #8
 80073b4:	9303      	str	r3, [sp, #12]
 80073b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b8:	4433      	add	r3, r6
 80073ba:	9309      	str	r3, [sp, #36]	; 0x24
 80073bc:	e767      	b.n	800728e <_svfiprintf_r+0x4e>
 80073be:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c2:	460c      	mov	r4, r1
 80073c4:	2001      	movs	r0, #1
 80073c6:	e7a5      	b.n	8007314 <_svfiprintf_r+0xd4>
 80073c8:	2300      	movs	r3, #0
 80073ca:	3401      	adds	r4, #1
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	4619      	mov	r1, r3
 80073d0:	f04f 0c0a 	mov.w	ip, #10
 80073d4:	4620      	mov	r0, r4
 80073d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073da:	3a30      	subs	r2, #48	; 0x30
 80073dc:	2a09      	cmp	r2, #9
 80073de:	d903      	bls.n	80073e8 <_svfiprintf_r+0x1a8>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0c5      	beq.n	8007370 <_svfiprintf_r+0x130>
 80073e4:	9105      	str	r1, [sp, #20]
 80073e6:	e7c3      	b.n	8007370 <_svfiprintf_r+0x130>
 80073e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ec:	4604      	mov	r4, r0
 80073ee:	2301      	movs	r3, #1
 80073f0:	e7f0      	b.n	80073d4 <_svfiprintf_r+0x194>
 80073f2:	ab03      	add	r3, sp, #12
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	462a      	mov	r2, r5
 80073f8:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <_svfiprintf_r+0x1f8>)
 80073fa:	a904      	add	r1, sp, #16
 80073fc:	4638      	mov	r0, r7
 80073fe:	f3af 8000 	nop.w
 8007402:	1c42      	adds	r2, r0, #1
 8007404:	4606      	mov	r6, r0
 8007406:	d1d6      	bne.n	80073b6 <_svfiprintf_r+0x176>
 8007408:	89ab      	ldrh	r3, [r5, #12]
 800740a:	065b      	lsls	r3, r3, #25
 800740c:	f53f af2c 	bmi.w	8007268 <_svfiprintf_r+0x28>
 8007410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007412:	b01d      	add	sp, #116	; 0x74
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007418:	ab03      	add	r3, sp, #12
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	462a      	mov	r2, r5
 800741e:	4b06      	ldr	r3, [pc, #24]	; (8007438 <_svfiprintf_r+0x1f8>)
 8007420:	a904      	add	r1, sp, #16
 8007422:	4638      	mov	r0, r7
 8007424:	f000 f87a 	bl	800751c <_printf_i>
 8007428:	e7eb      	b.n	8007402 <_svfiprintf_r+0x1c2>
 800742a:	bf00      	nop
 800742c:	08028118 	.word	0x08028118
 8007430:	08028122 	.word	0x08028122
 8007434:	00000000 	.word	0x00000000
 8007438:	0800718b 	.word	0x0800718b
 800743c:	0802811e 	.word	0x0802811e

08007440 <_printf_common>:
 8007440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007444:	4616      	mov	r6, r2
 8007446:	4699      	mov	r9, r3
 8007448:	688a      	ldr	r2, [r1, #8]
 800744a:	690b      	ldr	r3, [r1, #16]
 800744c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007450:	4293      	cmp	r3, r2
 8007452:	bfb8      	it	lt
 8007454:	4613      	movlt	r3, r2
 8007456:	6033      	str	r3, [r6, #0]
 8007458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800745c:	4607      	mov	r7, r0
 800745e:	460c      	mov	r4, r1
 8007460:	b10a      	cbz	r2, 8007466 <_printf_common+0x26>
 8007462:	3301      	adds	r3, #1
 8007464:	6033      	str	r3, [r6, #0]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	0699      	lsls	r1, r3, #26
 800746a:	bf42      	ittt	mi
 800746c:	6833      	ldrmi	r3, [r6, #0]
 800746e:	3302      	addmi	r3, #2
 8007470:	6033      	strmi	r3, [r6, #0]
 8007472:	6825      	ldr	r5, [r4, #0]
 8007474:	f015 0506 	ands.w	r5, r5, #6
 8007478:	d106      	bne.n	8007488 <_printf_common+0x48>
 800747a:	f104 0a19 	add.w	sl, r4, #25
 800747e:	68e3      	ldr	r3, [r4, #12]
 8007480:	6832      	ldr	r2, [r6, #0]
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	42ab      	cmp	r3, r5
 8007486:	dc26      	bgt.n	80074d6 <_printf_common+0x96>
 8007488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800748c:	1e13      	subs	r3, r2, #0
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	bf18      	it	ne
 8007492:	2301      	movne	r3, #1
 8007494:	0692      	lsls	r2, r2, #26
 8007496:	d42b      	bmi.n	80074f0 <_printf_common+0xb0>
 8007498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800749c:	4649      	mov	r1, r9
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	3001      	adds	r0, #1
 80074a4:	d01e      	beq.n	80074e4 <_printf_common+0xa4>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	68e5      	ldr	r5, [r4, #12]
 80074aa:	6832      	ldr	r2, [r6, #0]
 80074ac:	f003 0306 	and.w	r3, r3, #6
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	bf08      	it	eq
 80074b4:	1aad      	subeq	r5, r5, r2
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	6922      	ldr	r2, [r4, #16]
 80074ba:	bf0c      	ite	eq
 80074bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c0:	2500      	movne	r5, #0
 80074c2:	4293      	cmp	r3, r2
 80074c4:	bfc4      	itt	gt
 80074c6:	1a9b      	subgt	r3, r3, r2
 80074c8:	18ed      	addgt	r5, r5, r3
 80074ca:	2600      	movs	r6, #0
 80074cc:	341a      	adds	r4, #26
 80074ce:	42b5      	cmp	r5, r6
 80074d0:	d11a      	bne.n	8007508 <_printf_common+0xc8>
 80074d2:	2000      	movs	r0, #0
 80074d4:	e008      	b.n	80074e8 <_printf_common+0xa8>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4652      	mov	r2, sl
 80074da:	4649      	mov	r1, r9
 80074dc:	4638      	mov	r0, r7
 80074de:	47c0      	blx	r8
 80074e0:	3001      	adds	r0, #1
 80074e2:	d103      	bne.n	80074ec <_printf_common+0xac>
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ec:	3501      	adds	r5, #1
 80074ee:	e7c6      	b.n	800747e <_printf_common+0x3e>
 80074f0:	18e1      	adds	r1, r4, r3
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	2030      	movs	r0, #48	; 0x30
 80074f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074fa:	4422      	add	r2, r4
 80074fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007504:	3302      	adds	r3, #2
 8007506:	e7c7      	b.n	8007498 <_printf_common+0x58>
 8007508:	2301      	movs	r3, #1
 800750a:	4622      	mov	r2, r4
 800750c:	4649      	mov	r1, r9
 800750e:	4638      	mov	r0, r7
 8007510:	47c0      	blx	r8
 8007512:	3001      	adds	r0, #1
 8007514:	d0e6      	beq.n	80074e4 <_printf_common+0xa4>
 8007516:	3601      	adds	r6, #1
 8007518:	e7d9      	b.n	80074ce <_printf_common+0x8e>
	...

0800751c <_printf_i>:
 800751c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	7e0f      	ldrb	r7, [r1, #24]
 8007522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007524:	2f78      	cmp	r7, #120	; 0x78
 8007526:	4691      	mov	r9, r2
 8007528:	4680      	mov	r8, r0
 800752a:	460c      	mov	r4, r1
 800752c:	469a      	mov	sl, r3
 800752e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007532:	d807      	bhi.n	8007544 <_printf_i+0x28>
 8007534:	2f62      	cmp	r7, #98	; 0x62
 8007536:	d80a      	bhi.n	800754e <_printf_i+0x32>
 8007538:	2f00      	cmp	r7, #0
 800753a:	f000 80d8 	beq.w	80076ee <_printf_i+0x1d2>
 800753e:	2f58      	cmp	r7, #88	; 0x58
 8007540:	f000 80a3 	beq.w	800768a <_printf_i+0x16e>
 8007544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800754c:	e03a      	b.n	80075c4 <_printf_i+0xa8>
 800754e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007552:	2b15      	cmp	r3, #21
 8007554:	d8f6      	bhi.n	8007544 <_printf_i+0x28>
 8007556:	a101      	add	r1, pc, #4	; (adr r1, 800755c <_printf_i+0x40>)
 8007558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800755c:	080075b5 	.word	0x080075b5
 8007560:	080075c9 	.word	0x080075c9
 8007564:	08007545 	.word	0x08007545
 8007568:	08007545 	.word	0x08007545
 800756c:	08007545 	.word	0x08007545
 8007570:	08007545 	.word	0x08007545
 8007574:	080075c9 	.word	0x080075c9
 8007578:	08007545 	.word	0x08007545
 800757c:	08007545 	.word	0x08007545
 8007580:	08007545 	.word	0x08007545
 8007584:	08007545 	.word	0x08007545
 8007588:	080076d5 	.word	0x080076d5
 800758c:	080075f9 	.word	0x080075f9
 8007590:	080076b7 	.word	0x080076b7
 8007594:	08007545 	.word	0x08007545
 8007598:	08007545 	.word	0x08007545
 800759c:	080076f7 	.word	0x080076f7
 80075a0:	08007545 	.word	0x08007545
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007545 	.word	0x08007545
 80075ac:	08007545 	.word	0x08007545
 80075b0:	080076bf 	.word	0x080076bf
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	1d1a      	adds	r2, r3, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	602a      	str	r2, [r5, #0]
 80075bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0a3      	b.n	8007710 <_printf_i+0x1f4>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	6829      	ldr	r1, [r5, #0]
 80075cc:	0606      	lsls	r6, r0, #24
 80075ce:	f101 0304 	add.w	r3, r1, #4
 80075d2:	d50a      	bpl.n	80075ea <_printf_i+0xce>
 80075d4:	680e      	ldr	r6, [r1, #0]
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	2e00      	cmp	r6, #0
 80075da:	da03      	bge.n	80075e4 <_printf_i+0xc8>
 80075dc:	232d      	movs	r3, #45	; 0x2d
 80075de:	4276      	negs	r6, r6
 80075e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e4:	485e      	ldr	r0, [pc, #376]	; (8007760 <_printf_i+0x244>)
 80075e6:	230a      	movs	r3, #10
 80075e8:	e019      	b.n	800761e <_printf_i+0x102>
 80075ea:	680e      	ldr	r6, [r1, #0]
 80075ec:	602b      	str	r3, [r5, #0]
 80075ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075f2:	bf18      	it	ne
 80075f4:	b236      	sxthne	r6, r6
 80075f6:	e7ef      	b.n	80075d8 <_printf_i+0xbc>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	1d19      	adds	r1, r3, #4
 80075fe:	6029      	str	r1, [r5, #0]
 8007600:	0601      	lsls	r1, r0, #24
 8007602:	d501      	bpl.n	8007608 <_printf_i+0xec>
 8007604:	681e      	ldr	r6, [r3, #0]
 8007606:	e002      	b.n	800760e <_printf_i+0xf2>
 8007608:	0646      	lsls	r6, r0, #25
 800760a:	d5fb      	bpl.n	8007604 <_printf_i+0xe8>
 800760c:	881e      	ldrh	r6, [r3, #0]
 800760e:	4854      	ldr	r0, [pc, #336]	; (8007760 <_printf_i+0x244>)
 8007610:	2f6f      	cmp	r7, #111	; 0x6f
 8007612:	bf0c      	ite	eq
 8007614:	2308      	moveq	r3, #8
 8007616:	230a      	movne	r3, #10
 8007618:	2100      	movs	r1, #0
 800761a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800761e:	6865      	ldr	r5, [r4, #4]
 8007620:	60a5      	str	r5, [r4, #8]
 8007622:	2d00      	cmp	r5, #0
 8007624:	bfa2      	ittt	ge
 8007626:	6821      	ldrge	r1, [r4, #0]
 8007628:	f021 0104 	bicge.w	r1, r1, #4
 800762c:	6021      	strge	r1, [r4, #0]
 800762e:	b90e      	cbnz	r6, 8007634 <_printf_i+0x118>
 8007630:	2d00      	cmp	r5, #0
 8007632:	d04d      	beq.n	80076d0 <_printf_i+0x1b4>
 8007634:	4615      	mov	r5, r2
 8007636:	fbb6 f1f3 	udiv	r1, r6, r3
 800763a:	fb03 6711 	mls	r7, r3, r1, r6
 800763e:	5dc7      	ldrb	r7, [r0, r7]
 8007640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007644:	4637      	mov	r7, r6
 8007646:	42bb      	cmp	r3, r7
 8007648:	460e      	mov	r6, r1
 800764a:	d9f4      	bls.n	8007636 <_printf_i+0x11a>
 800764c:	2b08      	cmp	r3, #8
 800764e:	d10b      	bne.n	8007668 <_printf_i+0x14c>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	07de      	lsls	r6, r3, #31
 8007654:	d508      	bpl.n	8007668 <_printf_i+0x14c>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	6861      	ldr	r1, [r4, #4]
 800765a:	4299      	cmp	r1, r3
 800765c:	bfde      	ittt	le
 800765e:	2330      	movle	r3, #48	; 0x30
 8007660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007664:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007668:	1b52      	subs	r2, r2, r5
 800766a:	6122      	str	r2, [r4, #16]
 800766c:	f8cd a000 	str.w	sl, [sp]
 8007670:	464b      	mov	r3, r9
 8007672:	aa03      	add	r2, sp, #12
 8007674:	4621      	mov	r1, r4
 8007676:	4640      	mov	r0, r8
 8007678:	f7ff fee2 	bl	8007440 <_printf_common>
 800767c:	3001      	adds	r0, #1
 800767e:	d14c      	bne.n	800771a <_printf_i+0x1fe>
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	b004      	add	sp, #16
 8007686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768a:	4835      	ldr	r0, [pc, #212]	; (8007760 <_printf_i+0x244>)
 800768c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007690:	6829      	ldr	r1, [r5, #0]
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	f851 6b04 	ldr.w	r6, [r1], #4
 8007698:	6029      	str	r1, [r5, #0]
 800769a:	061d      	lsls	r5, r3, #24
 800769c:	d514      	bpl.n	80076c8 <_printf_i+0x1ac>
 800769e:	07df      	lsls	r7, r3, #31
 80076a0:	bf44      	itt	mi
 80076a2:	f043 0320 	orrmi.w	r3, r3, #32
 80076a6:	6023      	strmi	r3, [r4, #0]
 80076a8:	b91e      	cbnz	r6, 80076b2 <_printf_i+0x196>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	f023 0320 	bic.w	r3, r3, #32
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	2310      	movs	r3, #16
 80076b4:	e7b0      	b.n	8007618 <_printf_i+0xfc>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	f043 0320 	orr.w	r3, r3, #32
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	2378      	movs	r3, #120	; 0x78
 80076c0:	4828      	ldr	r0, [pc, #160]	; (8007764 <_printf_i+0x248>)
 80076c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076c6:	e7e3      	b.n	8007690 <_printf_i+0x174>
 80076c8:	0659      	lsls	r1, r3, #25
 80076ca:	bf48      	it	mi
 80076cc:	b2b6      	uxthmi	r6, r6
 80076ce:	e7e6      	b.n	800769e <_printf_i+0x182>
 80076d0:	4615      	mov	r5, r2
 80076d2:	e7bb      	b.n	800764c <_printf_i+0x130>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	6826      	ldr	r6, [r4, #0]
 80076d8:	6961      	ldr	r1, [r4, #20]
 80076da:	1d18      	adds	r0, r3, #4
 80076dc:	6028      	str	r0, [r5, #0]
 80076de:	0635      	lsls	r5, r6, #24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0x1cc>
 80076e4:	6019      	str	r1, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0x1d2>
 80076e8:	0670      	lsls	r0, r6, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0x1c8>
 80076ec:	8019      	strh	r1, [r3, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	4615      	mov	r5, r2
 80076f4:	e7ba      	b.n	800766c <_printf_i+0x150>
 80076f6:	682b      	ldr	r3, [r5, #0]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	602a      	str	r2, [r5, #0]
 80076fc:	681d      	ldr	r5, [r3, #0]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	2100      	movs	r1, #0
 8007702:	4628      	mov	r0, r5
 8007704:	f7f8 fd6c 	bl	80001e0 <memchr>
 8007708:	b108      	cbz	r0, 800770e <_printf_i+0x1f2>
 800770a:	1b40      	subs	r0, r0, r5
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007718:	e7a8      	b.n	800766c <_printf_i+0x150>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	462a      	mov	r2, r5
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d0ab      	beq.n	8007680 <_printf_i+0x164>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d413      	bmi.n	8007756 <_printf_i+0x23a>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	4298      	cmp	r0, r3
 8007734:	bfb8      	it	lt
 8007736:	4618      	movlt	r0, r3
 8007738:	e7a4      	b.n	8007684 <_printf_i+0x168>
 800773a:	2301      	movs	r3, #1
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d09b      	beq.n	8007680 <_printf_i+0x164>
 8007748:	3501      	adds	r5, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	42ab      	cmp	r3, r5
 8007752:	dcf2      	bgt.n	800773a <_printf_i+0x21e>
 8007754:	e7eb      	b.n	800772e <_printf_i+0x212>
 8007756:	2500      	movs	r5, #0
 8007758:	f104 0619 	add.w	r6, r4, #25
 800775c:	e7f5      	b.n	800774a <_printf_i+0x22e>
 800775e:	bf00      	nop
 8007760:	08028129 	.word	0x08028129
 8007764:	0802813a 	.word	0x0802813a

08007768 <__retarget_lock_acquire_recursive>:
 8007768:	4770      	bx	lr

0800776a <__retarget_lock_release_recursive>:
 800776a:	4770      	bx	lr

0800776c <memcpy>:
 800776c:	440a      	add	r2, r1
 800776e:	4291      	cmp	r1, r2
 8007770:	f100 33ff 	add.w	r3, r0, #4294967295
 8007774:	d100      	bne.n	8007778 <memcpy+0xc>
 8007776:	4770      	bx	lr
 8007778:	b510      	push	{r4, lr}
 800777a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800777e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007782:	4291      	cmp	r1, r2
 8007784:	d1f9      	bne.n	800777a <memcpy+0xe>
 8007786:	bd10      	pop	{r4, pc}

08007788 <memmove>:
 8007788:	4288      	cmp	r0, r1
 800778a:	b510      	push	{r4, lr}
 800778c:	eb01 0402 	add.w	r4, r1, r2
 8007790:	d902      	bls.n	8007798 <memmove+0x10>
 8007792:	4284      	cmp	r4, r0
 8007794:	4623      	mov	r3, r4
 8007796:	d807      	bhi.n	80077a8 <memmove+0x20>
 8007798:	1e43      	subs	r3, r0, #1
 800779a:	42a1      	cmp	r1, r4
 800779c:	d008      	beq.n	80077b0 <memmove+0x28>
 800779e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077a6:	e7f8      	b.n	800779a <memmove+0x12>
 80077a8:	4402      	add	r2, r0
 80077aa:	4601      	mov	r1, r0
 80077ac:	428a      	cmp	r2, r1
 80077ae:	d100      	bne.n	80077b2 <memmove+0x2a>
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ba:	e7f7      	b.n	80077ac <memmove+0x24>

080077bc <_malloc_usable_size_r>:
 80077bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c0:	1f18      	subs	r0, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfbc      	itt	lt
 80077c6:	580b      	ldrlt	r3, [r1, r0]
 80077c8:	18c0      	addlt	r0, r0, r3
 80077ca:	4770      	bx	lr

080077cc <_init>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	bf00      	nop
 80077d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d2:	bc08      	pop	{r3}
 80077d4:	469e      	mov	lr, r3
 80077d6:	4770      	bx	lr

080077d8 <_fini>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	bf00      	nop
 80077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077de:	bc08      	pop	{r3}
 80077e0:	469e      	mov	lr, r3
 80077e2:	4770      	bx	lr
