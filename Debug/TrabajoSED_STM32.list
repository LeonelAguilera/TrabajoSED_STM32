
TrabajoSED_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007748  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00020968  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028250  08028250  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08028250  08028250  00038250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028258  08028258  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028258  08028258  00038258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802825c  0802825c  0003825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08028260  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000090  080282f0  00040090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080282f0  00040250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fb0  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002590  00000000  00000000  00051070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00053600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018da7  00000000  00000000  00054688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014930  00000000  00000000  0006d42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a0350  00000000  00000000  00081d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001220af  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000f58  00000000  00000000  00122100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049cc  00000000  00000000  00123058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078d0 	.word	0x080078d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080078d0 	.word	0x080078d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f003 f924 	bl	80037d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f82c 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fa6c 	bl	8000a6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000594:	f000 f894 	bl	80006c0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000598:	f000 f9f8 	bl	800098c <MX_TIM4_Init>
  MX_SPI1_Init();
 800059c:	f000 f970 	bl	8000880 <MX_SPI1_Init>
  MX_RTC_Init();
 80005a0:	f000 f8e0 	bl	8000764 <MX_RTC_Init>
  MX_TIM3_Init();
 80005a4:	f000 f9a4 	bl	80008f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80005a8:	2029      	movs	r0, #41	; 0x29
 80005aa:	f003 fec4 	bl	8004336 <HAL_NVIC_DisableIRQ>
  HAL_TIM_Base_Start_IT(&htim3);
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x5c>)
 80005b0:	f005 fd6e 	bl	8006090 <HAL_TIM_Base_Start_IT>
  Led_Init();
 80005b4:	f000 fafc 	bl	8000bb0 <Led_Init>
  ST7735_Init();
 80005b8:	f002 fce4 	bl	8002f84 <ST7735_Init>
  printMenu_Estado();
 80005bc:	f001 ff3e 	bl	800243c <printMenu_Estado>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  humedad = sensorHumedad();
 80005c0:	f000 fb08 	bl	8000bd4 <sensorHumedad>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <main+0x60>)
 80005ca:	701a      	strb	r2, [r3, #0]

	  modoHandler();
 80005cc:	f000 fc44 	bl	8000e58 <modoHandler>
	  menuHandler();
 80005d0:	f000 fc5c 	bl	8000e8c <menuHandler>

	  LED_ON_OFF(humedad);
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <main+0x60>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fb53 	bl	8000c84 <LED_ON_OFF>
	  humedad = sensorHumedad();
 80005de:	e7ef      	b.n	80005c0 <main+0x3c>
 80005e0:	20000184 	.word	0x20000184
 80005e4:	20000217 	.word	0x20000217

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fcee 	bl	8006fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <SystemClock_Config+0xd4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000644:	230a      	movs	r3, #10
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000660:	2360      	movs	r3, #96	; 0x60
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f004 f849 	bl	8004708 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f002 fb9e 	bl	8002dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 faaa 	bl	8004bf8 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f002 fb87 	bl	8002dbc <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f003 f8ed 	bl	8003900 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800072c:	f002 fb46 	bl	8002dbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000730:	2301      	movs	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f003 faa1 	bl	8003c88 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f002 fb36 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000c4 	.word	0x200000c4
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b090      	sub	sp, #64	; 0x40
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2228      	movs	r2, #40	; 0x28
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fc27 	bl	8006fd8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_RTC_Init+0x110>)
 800078c:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <MX_RTC_Init+0x114>)
 800078e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_RTC_Init+0x110>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_RTC_Init+0x110>)
 8000798:	227f      	movs	r2, #127	; 0x7f
 800079a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800079c:	4b35      	ldr	r3, [pc, #212]	; (8000874 <MX_RTC_Init+0x110>)
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_RTC_Init+0x110>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <MX_RTC_Init+0x110>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_RTC_Init+0x110>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b4:	482f      	ldr	r0, [pc, #188]	; (8000874 <MX_RTC_Init+0x110>)
 80007b6:	f004 fcfb 	bl	80051b0 <HAL_RTC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007c0:	f002 fafc 	bl	8002dbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	4823      	ldr	r0, [pc, #140]	; (8000874 <MX_RTC_Init+0x110>)
 80007e8:	f004 fd58 	bl	800529c <HAL_RTC_SetTime>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80007f2:	f002 fae3 	bl	8002dbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007f6:	2301      	movs	r3, #1
 80007f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80007fc:	2301      	movs	r3, #1
 80007fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800080e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <MX_RTC_Init+0x110>)
 8000818:	f004 fe38 	bl	800548c <HAL_RTC_SetDate>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000822:	f002 facb 	bl	8002dbc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_RTC_Init+0x118>)
 8000840:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_RTC_Init+0x110>)
 800085e:	f004 fee9 	bl	8005634 <HAL_RTC_SetAlarm_IT>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000868:	f002 faa8 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3740      	adds	r7, #64	; 0x40
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000010c 	.word	0x2000010c
 8000878:	40002800 	.word	0x40002800
 800087c:	80000080 	.word	0x80000080

08000880 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_SPI1_Init+0x68>)
 8000886:	4a19      	ldr	r2, [pc, #100]	; (80008ec <MX_SPI1_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x68>)
 800088c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_SPI1_Init+0x68>)
 8000894:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000898:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_SPI1_Init+0x68>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008ce:	220a      	movs	r2, #10
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_SPI1_Init+0x68>)
 80008d4:	f005 f8fd 	bl	8005ad2 <HAL_SPI_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008de:	f002 fa6d 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000012c 	.word	0x2000012c
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM3_Init+0x94>)
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <MX_TIM3_Init+0x98>)
 8000910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_TIM3_Init+0x94>)
 8000914:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_TIM3_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_TIM3_Init+0x94>)
 8000922:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_TIM3_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_TIM3_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_TIM3_Init+0x94>)
 8000936:	f005 fb5b 	bl	8005ff0 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000940:	f002 fa3c 	bl	8002dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_TIM3_Init+0x94>)
 8000952:	f005 fec9 	bl	80066e8 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800095c:	f002 fa2e 	bl	8002dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_TIM3_Init+0x94>)
 800096e:	f006 fa77 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000978:	f002 fa20 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000184 	.word	0x20000184
 8000988:	40000400 	.word	0x40000400

0800098c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009b0:	4a2d      	ldr	r2, [pc, #180]	; (8000a68 <MX_TIM4_Init+0xdc>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009b6:	f240 623f 	movw	r2, #1599	; 0x63f
 80009ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009d4:	4823      	ldr	r0, [pc, #140]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009d6:	f005 fbbd 	bl	8006154 <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009e0:	f002 f9ec 	bl	8002dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4619      	mov	r1, r3
 80009f2:	481c      	ldr	r0, [pc, #112]	; (8000a64 <MX_TIM4_Init+0xd8>)
 80009f4:	f006 fa34 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009fe:	f002 f9dd 	bl	8002dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	; 0x60
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a1a:	f005 fda3 	bl	8006564 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a24:	f002 f9ca 	bl	8002dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a30:	f005 fd98 	bl	8006564 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a3a:	f002 f9bf 	bl	8002dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2208      	movs	r2, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a46:	f005 fd8d 	bl	8006564 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000a50:	f002 f9b4 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM4_Init+0xd8>)
 8000a56:	f002 fdbd 	bl	80035d4 <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200001cc 	.word	0x200001cc
 8000a68:	40000800 	.word	0x40000800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a45      	ldr	r2, [pc, #276]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b3f      	ldr	r3, [pc, #252]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a3e      	ldr	r2, [pc, #248]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b3c      	ldr	r3, [pc, #240]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2150      	movs	r1, #80	; 0x50
 8000ada:	4832      	ldr	r0, [pc, #200]	; (8000ba4 <MX_GPIO_Init+0x138>)
 8000adc:	f003 fde2 	bl	80046a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4830      	ldr	r0, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000ae6:	f003 fddd 	bl	80046a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	482e      	ldr	r0, [pc, #184]	; (8000bac <MX_GPIO_Init+0x140>)
 8000af2:	f003 fdd7 	bl	80046a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230d      	movs	r3, #13
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4826      	ldr	r0, [pc, #152]	; (8000ba4 <MX_GPIO_Init+0x138>)
 8000b0c:	f003 fc2e 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b10:	2350      	movs	r3, #80	; 0x50
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <MX_GPIO_Init+0x138>)
 8000b28:	f003 fc20 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000b44:	f003 fc12 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_GPIO_Init+0x140>)
 8000b62:	f003 fc03 	bl	800436c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2006      	movs	r0, #6
 8000b6c:	f003 fbb9 	bl	80042e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b70:	2006      	movs	r0, #6
 8000b72:	f003 fbd2 	bl	800431a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2008      	movs	r0, #8
 8000b7c:	f003 fbb1 	bl	80042e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b80:	2008      	movs	r0, #8
 8000b82:	f003 fbca 	bl	800431a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2009      	movs	r0, #9
 8000b8c:	f003 fba9 	bl	80042e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b90:	2009      	movs	r0, #9
 8000b92:	f003 fbc2 	bl	800431a <HAL_NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020800 	.word	0x40020800
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <Led_Init>:
 *INICIALIZADORES*
 *****************/

//Inicializa los temporizadores necesarios para controlar
//el led RGB a través de PWM
void Led_Init(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <Led_Init+0x20>)
 8000bb8:	f005 fb1c 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <Led_Init+0x20>)
 8000bc0:	f005 fb18 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <Led_Init+0x20>)
 8000bc8:	f005 fb14 	bl	80061f4 <HAL_TIM_PWM_Start>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001cc 	.word	0x200001cc

08000bd4 <sensorHumedad>:
 *FUNCIONES AUXILIARES*
 **********************/

//Lee el valor del ADC y lo transforma en un valor de humedad comprendido entre 0 y 100
//a través de un entero sin signo de 8 bits
uint8_t sensorHumedad(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	uint8_t valor_porc_sens = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start(&hadc1);
 8000bde:	481b      	ldr	r0, [pc, #108]	; (8000c4c <sensorHumedad+0x78>)
 8000be0:	f002 fed2 	bl	8003988 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK)
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	4818      	ldr	r0, [pc, #96]	; (8000c4c <sensorHumedad+0x78>)
 8000bea:	f002 ffb4 	bl	8003b56 <HAL_ADC_PollForConversion>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d123      	bne.n	8000c3c <sensorHumedad+0x68>
	{
		uint16_t ADC_val=HAL_ADC_GetValue(&hadc1);
 8000bf4:	4815      	ldr	r0, [pc, #84]	; (8000c4c <sensorHumedad+0x78>)
 8000bf6:	f003 f839 	bl	8003c6c <HAL_ADC_GetValue>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
		ADC_val = ADC_val > ADC_HUMEDAD_MAX ? ADC_HUMEDAD_MAX : ADC_val < ADC_HUMEDAD_MIN ? ADC_HUMEDAD_MIN : ADC_val;
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	f240 3252 	movw	r2, #850	; 0x352
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d807      	bhi.n	8000c18 <sensorHumedad+0x44>
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	f240 22df 	movw	r2, #735	; 0x2df
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	bf38      	it	cc
 8000c12:	4613      	movcc	r3, r2
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	e001      	b.n	8000c1c <sensorHumedad+0x48>
 8000c18:	f240 3352 	movw	r3, #850	; 0x352
 8000c1c:	80bb      	strh	r3, [r7, #4]
		valor_porc_sens=100-(((ADC_val-ADC_HUMEDAD_MIN)*100)/(ADC_HUMEDAD_MAX-ADC_HUMEDAD_MIN));
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	f2a3 23df 	subw	r3, r3, #735	; 0x2df
 8000c24:	2264      	movs	r2, #100	; 0x64
 8000c26:	fb02 f303 	mul.w	r3, r2, r3
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <sensorHumedad+0x7c>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	1152      	asrs	r2, r2, #5
 8000c32:	17db      	asrs	r3, r3, #31
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	3364      	adds	r3, #100	; 0x64
 8000c3a:	71fb      	strb	r3, [r7, #7]
	}
	HAL_ADC_Stop(&hadc1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <sensorHumedad+0x78>)
 8000c3e:	f002 ff57 	bl	8003af0 <HAL_ADC_Stop>
	return valor_porc_sens;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000c4 	.word	0x200000c4
 8000c50:	473c1ab7 	.word	0x473c1ab7

08000c54 <AbrirValvula>:

//Abre la válvula
void AbrirValvula(){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5e:	4802      	ldr	r0, [pc, #8]	; (8000c68 <AbrirValvula+0x14>)
 8000c60:	f003 fd20 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <CerrarValvula>:

//Cierra la válvula
void CerrarValvula(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c76:	4802      	ldr	r0, [pc, #8]	; (8000c80 <CerrarValvula+0x14>)
 8000c78:	f003 fd14 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <LED_ON_OFF>:

//Cambia el color del LED RGB según la humedad medida una vez cada 0.1s
void LED_ON_OFF(uint8_t humedad)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	static uint32_t last_time = 0;
	if(HAL_GetTick() < last_time + 100){
 8000c8e:	f002 fe07 	bl	80038a0 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	4b5a      	ldr	r3, [pc, #360]	; (8000e00 <LED_ON_OFF+0x17c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3364      	adds	r3, #100	; 0x64
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	f0c0 80ab 	bcc.w	8000df6 <LED_ON_OFF+0x172>
		return;
	}

	if(humedad < humedad_minima){
 8000ca0:	4b58      	ldr	r3, [pc, #352]	; (8000e04 <LED_ON_OFF+0x180>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d21a      	bcs.n	8000ce0 <LED_ON_OFF+0x5c>
		uint8_t R = 255-(humedad*128/humedad_minima);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	01db      	lsls	r3, r3, #7
 8000cae:	4a55      	ldr	r2, [pc, #340]	; (8000e04 <LED_ON_OFF+0x180>)
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	73bb      	strb	r3, [r7, #14]
		uint8_t G = (humedad*127/humedad_minima);
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	01db      	lsls	r3, r3, #7
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	4a4f      	ldr	r2, [pc, #316]	; (8000e04 <LED_ON_OFF+0x180>)
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ccc:	737b      	strb	r3, [r7, #13]
		uint8_t B = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	733b      	strb	r3, [r7, #12]
		WriteRGB(R, G, B);
 8000cd2:	7b3a      	ldrb	r2, [r7, #12]
 8000cd4:	7b79      	ldrb	r1, [r7, #13]
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f899 	bl	8000e10 <WriteRGB>
 8000cde:	e084      	b.n	8000dea <LED_ON_OFF+0x166>
	}
	else if(humedad < humedad_media){
 8000ce0:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <LED_ON_OFF+0x184>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	79fa      	ldrb	r2, [r7, #7]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d22b      	bcs.n	8000d42 <LED_ON_OFF+0xbe>
		uint8_t R = 127-((humedad-humedad_minima)*127/(humedad_media-humedad_minima));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <LED_ON_OFF+0x180>)
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	1a9a      	subs	r2, r3, r2
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	01db      	lsls	r3, r3, #7
 8000cf6:	1a9a      	subs	r2, r3, r2
 8000cf8:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <LED_ON_OFF+0x184>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <LED_ON_OFF+0x180>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000d0e:	747b      	strb	r3, [r7, #17]
		uint8_t G = 127+((humedad-humedad_minima)*128/(humedad_media-humedad_minima));
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4a3c      	ldr	r2, [pc, #240]	; (8000e04 <LED_ON_OFF+0x180>)
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	01da      	lsls	r2, r3, #7
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <LED_ON_OFF+0x184>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <LED_ON_OFF+0x180>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	337f      	adds	r3, #127	; 0x7f
 8000d2e:	743b      	strb	r3, [r7, #16]
		uint8_t B = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
		WriteRGB(R, G, B);
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	7c39      	ldrb	r1, [r7, #16]
 8000d38:	7c7b      	ldrb	r3, [r7, #17]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f868 	bl	8000e10 <WriteRGB>
 8000d40:	e053      	b.n	8000dea <LED_ON_OFF+0x166>
	}
	else if(humedad < humedad_maxima){
 8000d42:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <LED_ON_OFF+0x188>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d229      	bcs.n	8000da0 <LED_ON_OFF+0x11c>
		uint8_t R = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	753b      	strb	r3, [r7, #20]
		uint8_t G = 127+((humedad_maxima-humedad)*128/(humedad_maxima-humedad_media));
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <LED_ON_OFF+0x188>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	01da      	lsls	r2, r3, #7
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <LED_ON_OFF+0x188>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <LED_ON_OFF+0x184>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	337f      	adds	r3, #127	; 0x7f
 8000d70:	74fb      	strb	r3, [r7, #19]
		uint8_t B = (humedad-humedad_media)*127/(humedad_maxima-humedad_media);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <LED_ON_OFF+0x184>)
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	1a9a      	subs	r2, r3, r2
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	01db      	lsls	r3, r3, #7
 8000d7e:	1a9a      	subs	r2, r3, r2
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <LED_ON_OFF+0x188>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <LED_ON_OFF+0x184>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d90:	74bb      	strb	r3, [r7, #18]
		WriteRGB(R, G, B);
 8000d92:	7cba      	ldrb	r2, [r7, #18]
 8000d94:	7cf9      	ldrb	r1, [r7, #19]
 8000d96:	7d3b      	ldrb	r3, [r7, #20]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f839 	bl	8000e10 <WriteRGB>
 8000d9e:	e024      	b.n	8000dea <LED_ON_OFF+0x166>
	}
	else{
		uint8_t R = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	75fb      	strb	r3, [r7, #23]
		uint8_t G = (100-humedad)*127/(100-humedad_maxima);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000daa:	4613      	mov	r3, r2
 8000dac:	01db      	lsls	r3, r3, #7
 8000dae:	1a9a      	subs	r2, r3, r2
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <LED_ON_OFF+0x188>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000db8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dbc:	75bb      	strb	r3, [r7, #22]
		uint8_t B = 127+((humedad-humedad_maxima)*127/(100-humedad_maxima));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <LED_ON_OFF+0x188>)
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	1a9a      	subs	r2, r3, r2
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	01db      	lsls	r3, r3, #7
 8000dca:	1a9a      	subs	r2, r3, r2
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <LED_ON_OFF+0x188>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000dd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	337f      	adds	r3, #127	; 0x7f
 8000ddc:	757b      	strb	r3, [r7, #21]
		WriteRGB(R, G, B);
 8000dde:	7d7a      	ldrb	r2, [r7, #21]
 8000de0:	7db9      	ldrb	r1, [r7, #22]
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f813 	bl	8000e10 <WriteRGB>
	}

	last_time = HAL_GetTick();
 8000dea:	f002 fd59 	bl	80038a0 <HAL_GetTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <LED_ON_OFF+0x17c>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e000      	b.n	8000df8 <LED_ON_OFF+0x174>
		return;
 8000df6:	bf00      	nop
}
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000022c 	.word	0x2000022c
 8000e04:	20000018 	.word	0x20000018
 8000e08:	2000001a 	.word	0x2000001a
 8000e0c:	20000019 	.word	0x20000019

08000e10 <WriteRGB>:

//Recibe un valor RGB y lo representa en el LED
void WriteRGB(uint8_t R, uint8_t G, uint8_t B){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	71bb      	strb	r3, [r7, #6]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 255-R);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <WriteRGB+0x44>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 255-G);
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <WriteRGB+0x44>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 255-B);
 8000e3a:	797b      	ldrb	r3, [r7, #5]
 8000e3c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <WriteRGB+0x44>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200001cc 	.word	0x200001cc

08000e58 <modoHandler>:
/********************
 *GESTIÓN DE ESTADOS*
 ********************/

//Determina qué funciones de operación llamar según el modo de trabajo en el que se encuetre el sistema
void modoHandler(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	switch(modo){
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <modoHandler+0x30>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d00c      	beq.n	8000e7e <modoHandler+0x26>
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	dc06      	bgt.n	8000e76 <modoHandler+0x1e>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00a      	beq.n	8000e82 <modoHandler+0x2a>
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d102      	bne.n	8000e76 <modoHandler+0x1e>
	case Manual:
		//Gestionado por interrupciones externas. Ver: void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
		break;
	case Automatico_Humedad:
		ControlAutomatico_Humedad();
 8000e70:	f000 fc98 	bl	80017a4 <ControlAutomatico_Humedad>
		break;
 8000e74:	e006      	b.n	8000e84 <modoHandler+0x2c>
	case Automatico_Tiempo:
		//Gestionado por interrupciones del RTC. Ver: void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
		break;
	default:
		modo = Manual;
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <modoHandler+0x30>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
		break;
 8000e7c:	e002      	b.n	8000e84 <modoHandler+0x2c>
		break;
 8000e7e:	bf00      	nop
 8000e80:	e000      	b.n	8000e84 <modoHandler+0x2c>
		break;
 8000e82:	bf00      	nop
	}
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000214 	.word	0x20000214

08000e8c <menuHandler>:
//
//Si se encuentra en la pantalla de estado comprueba si esta debe ser actualizada, de lo contrario, finaliza su ejecución.
//Si se encuentra en otra pantalla desactiva las interrupciones de los botones, ya que en este estado esta se hace por
//polling y gestiona la interfaz en función de en qué pantalla se encuentra.
//Tiene una variable estática "selección" que permite recordar cuál de las opciones de cada menú está eligiendo el usuario
void menuHandler(){
 8000e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8e:	b0a1      	sub	sp, #132	; 0x84
 8000e90:	af08      	add	r7, sp, #32
	static uint32_t seleccion = 0;
	if(pantalla == Estado){
 8000e92:	4b8a      	ldr	r3, [pc, #552]	; (80010bc <menuHandler+0x230>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d141      	bne.n	8000f1e <menuHandler+0x92>
		if((humedad < humedad_minima && !(humedad_previa < humedad_minima)) || (humedad > humedad_minima && !(humedad_previa > humedad_minima)) || (humedad < humedad_maxima && !(humedad_previa < humedad_maxima)) || (humedad > humedad_maxima && !(humedad_previa > humedad_maxima))){
 8000e9a:	4b89      	ldr	r3, [pc, #548]	; (80010c0 <menuHandler+0x234>)
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	4b89      	ldr	r3, [pc, #548]	; (80010c4 <menuHandler+0x238>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d205      	bcs.n	8000eb2 <menuHandler+0x26>
 8000ea6:	4b88      	ldr	r3, [pc, #544]	; (80010c8 <menuHandler+0x23c>)
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	4b86      	ldr	r3, [pc, #536]	; (80010c4 <menuHandler+0x238>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d223      	bcs.n	8000efa <menuHandler+0x6e>
 8000eb2:	4b83      	ldr	r3, [pc, #524]	; (80010c0 <menuHandler+0x234>)
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	4b83      	ldr	r3, [pc, #524]	; (80010c4 <menuHandler+0x238>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d905      	bls.n	8000eca <menuHandler+0x3e>
 8000ebe:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <menuHandler+0x23c>)
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <menuHandler+0x238>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d917      	bls.n	8000efa <menuHandler+0x6e>
 8000eca:	4b7d      	ldr	r3, [pc, #500]	; (80010c0 <menuHandler+0x234>)
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	4b7f      	ldr	r3, [pc, #508]	; (80010cc <menuHandler+0x240>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d205      	bcs.n	8000ee2 <menuHandler+0x56>
 8000ed6:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <menuHandler+0x23c>)
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	4b7c      	ldr	r3, [pc, #496]	; (80010cc <menuHandler+0x240>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d20b      	bcs.n	8000efa <menuHandler+0x6e>
 8000ee2:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <menuHandler+0x234>)
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	4b79      	ldr	r3, [pc, #484]	; (80010cc <menuHandler+0x240>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d908      	bls.n	8000f00 <menuHandler+0x74>
 8000eee:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <menuHandler+0x23c>)
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	4b76      	ldr	r3, [pc, #472]	; (80010cc <menuHandler+0x240>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d802      	bhi.n	8000f00 <menuHandler+0x74>
			update_screen = 1;
 8000efa:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <menuHandler+0x244>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
		}
		if(update_screen){
 8000f00:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <menuHandler+0x244>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <menuHandler+0x86>
			printMenu_Estado();
 8000f08:	f001 fa98 	bl	800243c <printMenu_Estado>
			update_screen = 0;
 8000f0c:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <menuHandler+0x244>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
		}
		humedad_previa = humedad;
 8000f12:	4b6b      	ldr	r3, [pc, #428]	; (80010c0 <menuHandler+0x234>)
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	4b6c      	ldr	r3, [pc, #432]	; (80010c8 <menuHandler+0x23c>)
 8000f18:	701a      	strb	r2, [r3, #0]
		return;
 8000f1a:	f000 bc27 	b.w	800176c <menuHandler+0x8e0>
	}
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f003 fa09 	bl	8004336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000f24:	2008      	movs	r0, #8
 8000f26:	f003 fa06 	bl	8004336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000f2a:	2009      	movs	r0, #9
 8000f2c:	f003 fa03 	bl	8004336 <HAL_NVIC_DisableIRQ>

	switch(pantalla){
 8000f30:	4b62      	ldr	r3, [pc, #392]	; (80010bc <menuHandler+0x230>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	f200 8404 	bhi.w	8001744 <menuHandler+0x8b8>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <menuHandler+0xb8>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f55 	.word	0x08000f55
 8000f48:	08000fe7 	.word	0x08000fe7
 8000f4c:	08001175 	.word	0x08001175
 8000f50:	08001723 	.word	0x08001723
	case Modo_Actual:
		//Muestra el modo en el que el sistema se encuentra operando en el momento
		//Si el usuario presiona el botón de la derecha pasa a la pantalla de
		//elección de modo
		if(update_screen){
 8000f54:	4b5e      	ldr	r3, [pc, #376]	; (80010d0 <menuHandler+0x244>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <menuHandler+0xda>
			printMenu_ModoActual();
 8000f5c:	f001 faa8 	bl	80024b0 <printMenu_ModoActual>
			update_screen = 0;
 8000f60:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <menuHandler+0x244>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8000f66:	2108      	movs	r1, #8
 8000f68:	485a      	ldr	r0, [pc, #360]	; (80010d4 <menuHandler+0x248>)
 8000f6a:	f003 fb83 	bl	8004674 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d113      	bne.n	8000f9c <menuHandler+0x110>
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <menuHandler+0x24c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00c      	beq.n	8000f9c <menuHandler+0x110>
			seleccion = 0;
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <menuHandler+0x250>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
			pantalla = Cambio_Modo;
 8000f88:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <menuHandler+0x230>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <menuHandler+0x244>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <menuHandler+0x254>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	484d      	ldr	r0, [pc, #308]	; (80010d4 <menuHandler+0x248>)
 8000fa0:	f003 fb68 	bl	8004674 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <menuHandler+0x258>)
 8000fb2:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4847      	ldr	r0, [pc, #284]	; (80010d4 <menuHandler+0x248>)
 8000fb8:	f003 fb5c 	bl	8004674 <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <menuHandler+0x25c>)
 8000fca:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4841      	ldr	r0, [pc, #260]	; (80010d4 <menuHandler+0x248>)
 8000fd0:	f003 fb50 	bl	8004674 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf14      	ite	ne
 8000fda:	2301      	movne	r3, #1
 8000fdc:	2300      	moveq	r3, #0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <menuHandler+0x24c>)
 8000fe2:	701a      	strb	r2, [r3, #0]
		break;
 8000fe4:	e3c2      	b.n	800176c <menuHandler+0x8e0>
		//y marca con un recuadro verde el seleccionado.
		//Con los dos botones izquierdos el usuario puede modificar su selección
		//Con el botón de la derecha el usuario hace efectiva su elección
		//Y a través de un switch case se decide la próxima pantalla a la que
		//debe pasar
		if(update_screen){
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <menuHandler+0x244>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00a      	beq.n	8001004 <menuHandler+0x178>
			printMenu_CambioModo();
 8000fee:	f001 fae3 	bl	80025b8 <printMenu_CambioModo>
			printSeleccion(seleccion);
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <menuHandler+0x250>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fb53 	bl	80026a4 <printSeleccion>
			update_screen = 0;
 8000ffe:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <menuHandler+0x244>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button0 == 0){
 8001004:	2104      	movs	r1, #4
 8001006:	4833      	ldr	r0, [pc, #204]	; (80010d4 <menuHandler+0x248>)
 8001008:	f003 fb34 	bl	8004674 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d118      	bne.n	8001044 <menuHandler+0x1b8>
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <menuHandler+0x258>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d011      	beq.n	8001044 <menuHandler+0x1b8>
			seleccion = seleccion==2?2:seleccion+1;
 8001020:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <menuHandler+0x250>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d003      	beq.n	8001030 <menuHandler+0x1a4>
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <menuHandler+0x250>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	e000      	b.n	8001032 <menuHandler+0x1a6>
 8001030:	2302      	movs	r3, #2
 8001032:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <menuHandler+0x250>)
 8001034:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <menuHandler+0x244>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <menuHandler+0x254>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button1 == 0){
 8001044:	2101      	movs	r1, #1
 8001046:	4823      	ldr	r0, [pc, #140]	; (80010d4 <menuHandler+0x248>)
 8001048:	f003 fb14 	bl	8004674 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d118      	bne.n	8001084 <menuHandler+0x1f8>
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <menuHandler+0x25c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d011      	beq.n	8001084 <menuHandler+0x1f8>
			seleccion = seleccion==0?0:seleccion-1;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <menuHandler+0x250>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <menuHandler+0x1e4>
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <menuHandler+0x250>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	e000      	b.n	8001072 <menuHandler+0x1e6>
 8001070:	2300      	movs	r3, #0
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <menuHandler+0x250>)
 8001074:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <menuHandler+0x244>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <menuHandler+0x254>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001084:	2108      	movs	r1, #8
 8001086:	4813      	ldr	r0, [pc, #76]	; (80010d4 <menuHandler+0x248>)
 8001088:	f003 faf4 	bl	8004674 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b01      	cmp	r3, #1
 8001090:	d14b      	bne.n	800112a <menuHandler+0x29e>
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <menuHandler+0x24c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f083 0301 	eor.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d044      	beq.n	800112a <menuHandler+0x29e>
			switch(seleccion){
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <menuHandler+0x250>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <menuHandler+0x228>
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d11f      	bne.n	80010ec <menuHandler+0x260>
			case Automatico_Tiempo:
				pantalla = Ajustes_Auto_Tiempo;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <menuHandler+0x230>)
 80010ae:	2203      	movs	r2, #3
 80010b0:	701a      	strb	r2, [r3, #0]
				break;
 80010b2:	e030      	b.n	8001116 <menuHandler+0x28a>
			case Automatico_Humedad:
				pantalla = Ajustes_Auto_Humedad;
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <menuHandler+0x230>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	701a      	strb	r2, [r3, #0]
				break;
 80010ba:	e02c      	b.n	8001116 <menuHandler+0x28a>
 80010bc:	20000215 	.word	0x20000215
 80010c0:	20000217 	.word	0x20000217
 80010c4:	20000018 	.word	0x20000018
 80010c8:	20000216 	.word	0x20000216
 80010cc:	20000019 	.word	0x20000019
 80010d0:	2000001b 	.word	0x2000001b
 80010d4:	40020000 	.word	0x40020000
 80010d8:	2000021a 	.word	0x2000021a
 80010dc:	20000230 	.word	0x20000230
 80010e0:	20000184 	.word	0x20000184
 80010e4:	20000218 	.word	0x20000218
 80010e8:	20000219 	.word	0x20000219
			default:
				modo = Manual;
 80010ec:	4b9d      	ldr	r3, [pc, #628]	; (8001364 <menuHandler+0x4d8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
				pantalla = Estado;
 80010f2:	4b9d      	ldr	r3, [pc, #628]	; (8001368 <menuHandler+0x4dc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
				printMenu_Estado();
 80010f8:	f001 f9a0 	bl	800243c <printMenu_Estado>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010fc:	2006      	movs	r0, #6
 80010fe:	f003 f90c 	bl	800431a <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001102:	2008      	movs	r0, #8
 8001104:	f003 f909 	bl	800431a <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001108:	2009      	movs	r0, #9
 800110a:	f003 f906 	bl	800431a <HAL_NVIC_EnableIRQ>
				HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 800110e:	2029      	movs	r0, #41	; 0x29
 8001110:	f003 f911 	bl	8004336 <HAL_NVIC_DisableIRQ>
				break;
 8001114:	bf00      	nop
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001116:	4b95      	ldr	r3, [pc, #596]	; (800136c <menuHandler+0x4e0>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	4b94      	ldr	r3, [pc, #592]	; (8001370 <menuHandler+0x4e4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
			seleccion = 0;
 8001124:	4b93      	ldr	r3, [pc, #588]	; (8001374 <menuHandler+0x4e8>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800112a:	2101      	movs	r1, #1
 800112c:	4892      	ldr	r0, [pc, #584]	; (8001378 <menuHandler+0x4ec>)
 800112e:	f003 faa1 	bl	8004674 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b8f      	ldr	r3, [pc, #572]	; (800137c <menuHandler+0x4f0>)
 8001140:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001142:	2104      	movs	r1, #4
 8001144:	488c      	ldr	r0, [pc, #560]	; (8001378 <menuHandler+0x4ec>)
 8001146:	f003 fa95 	bl	8004674 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf14      	ite	ne
 8001150:	2301      	movne	r3, #1
 8001152:	2300      	moveq	r3, #0
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b8a      	ldr	r3, [pc, #552]	; (8001380 <menuHandler+0x4f4>)
 8001158:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800115a:	2108      	movs	r1, #8
 800115c:	4886      	ldr	r0, [pc, #536]	; (8001378 <menuHandler+0x4ec>)
 800115e:	f003 fa89 	bl	8004674 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b85      	ldr	r3, [pc, #532]	; (8001384 <menuHandler+0x4f8>)
 8001170:	701a      	strb	r2, [r3, #0]
		break;
 8001172:	e2fb      	b.n	800176c <menuHandler+0x8e0>
	case Ajustes_Auto_Tiempo:
		//Muestra las alarmas creadas y permite al usuario desplazarse por ellas usando
		//los dos botones de la izquierda, al final de las alarmas se muestran los botones
		//para crear una nueva alarma, para aceptar y hacer efectiva la elección de modo
		//y para cambiar la hora del dispositivo.
		if(update_screen){
 8001174:	4b7d      	ldr	r3, [pc, #500]	; (800136c <menuHandler+0x4e0>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80a5 	beq.w	80012c8 <menuHandler+0x43c>
			ST7735_FillScreenFast(ST7735_CYAN);
 800117e:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001182:	f002 f897 	bl	80032b4 <ST7735_FillScreenFast>
			if(alarmasON != 0)
 8001186:	4b80      	ldr	r3, [pc, #512]	; (8001388 <menuHandler+0x4fc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8088 	beq.w	80012a0 <menuHandler+0x414>
			{
				//Si hay alarmas creadas, imprime en pantalla las alarmas desde [seleccion] hasta
				//[seleccion+2], en caso de que no existan suficientes alarmas, imprime los botones
				//extra que sean necesarios ("crear alarma", "OK" y "cambiar hora").
				if(seleccion <= num_alarmas){
 8001190:	4b78      	ldr	r3, [pc, #480]	; (8001374 <menuHandler+0x4e8>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b7d      	ldr	r3, [pc, #500]	; (800138c <menuHandler+0x500>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d86f      	bhi.n	800127c <menuHandler+0x3f0>
					for(uint8_t i = 0; i < MIN(num_alarmas-seleccion, 3); i++){
 800119c:	2300      	movs	r3, #0
 800119e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80011a2:	e025      	b.n	80011f0 <menuHandler+0x364>
						printAlarma(alarmasON[i], alarmasOFF[i], i);
 80011a4:	4b78      	ldr	r3, [pc, #480]	; (8001388 <menuHandler+0x4fc>)
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	18ce      	adds	r6, r1, r3
 80011b6:	4b76      	ldr	r3, [pc, #472]	; (8001390 <menuHandler+0x504>)
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	18ca      	adds	r2, r1, r3
 80011c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80011cc:	9306      	str	r3, [sp, #24]
 80011ce:	ac01      	add	r4, sp, #4
 80011d0:	4615      	mov	r5, r2
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	6933      	ldr	r3, [r6, #16]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011e2:	f001 faf9 	bl	80027d8 <printAlarma>
					for(uint8_t i = 0; i < MIN(num_alarmas-seleccion, 3); i++){
 80011e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80011ea:	3301      	adds	r3, #1
 80011ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80011f0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80011f4:	4b65      	ldr	r3, [pc, #404]	; (800138c <menuHandler+0x500>)
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <menuHandler+0x4e8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1acb      	subs	r3, r1, r3
 80011fe:	2b03      	cmp	r3, #3
 8001200:	bf28      	it	cs
 8001202:	2303      	movcs	r3, #3
 8001204:	429a      	cmp	r2, r3
 8001206:	d3cd      	bcc.n	80011a4 <menuHandler+0x318>
					}
					if(num_alarmas-seleccion < 3){
 8001208:	4b60      	ldr	r3, [pc, #384]	; (800138c <menuHandler+0x500>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <menuHandler+0x4e8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d80a      	bhi.n	800122c <menuHandler+0x3a0>
						printCrearAlarma(num_alarmas-seleccion);
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <menuHandler+0x500>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b55      	ldr	r3, [pc, #340]	; (8001374 <menuHandler+0x4e8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fb4a 	bl	80028c0 <printCrearAlarma>
					}
					if(num_alarmas-seleccion < 2){
 800122c:	4b57      	ldr	r3, [pc, #348]	; (800138c <menuHandler+0x500>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b50      	ldr	r3, [pc, #320]	; (8001374 <menuHandler+0x4e8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d80c      	bhi.n	8001254 <menuHandler+0x3c8>
						printOK(num_alarmas-seleccion+1);
 800123a:	4b54      	ldr	r3, [pc, #336]	; (800138c <menuHandler+0x500>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <menuHandler+0x4e8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fbe8 	bl	8002a24 <printOK>
					}
					if(num_alarmas-seleccion < 1){
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <menuHandler+0x500>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <menuHandler+0x4e8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d12d      	bne.n	80012bc <menuHandler+0x430>
						printCambiarHora(num_alarmas-seleccion+2);
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <menuHandler+0x500>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b43      	ldr	r3, [pc, #268]	; (8001374 <menuHandler+0x4e8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3302      	adds	r3, #2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fc11 	bl	8002a9c <printCambiarHora>
 800127a:	e01f      	b.n	80012bc <menuHandler+0x430>
					}
				}
				else if(seleccion == num_alarmas+1){
 800127c:	4b43      	ldr	r3, [pc, #268]	; (800138c <menuHandler+0x500>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <menuHandler+0x4e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d106      	bne.n	8001298 <menuHandler+0x40c>
					printOK(0);
 800128a:	2000      	movs	r0, #0
 800128c:	f001 fbca 	bl	8002a24 <printOK>
					printCambiarHora(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 fc03 	bl	8002a9c <printCambiarHora>
 8001296:	e011      	b.n	80012bc <menuHandler+0x430>
				}
				else{
					printCambiarHora(0);
 8001298:	2000      	movs	r0, #0
 800129a:	f001 fbff 	bl	8002a9c <printCambiarHora>
 800129e:	e00d      	b.n	80012bc <menuHandler+0x430>
			}
			else
			{
				//Si no hay alarmas creadas, solamente muestra los botones de crear alarma y
				//cambio de hora.
				if(seleccion == 0){
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <menuHandler+0x4e8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d106      	bne.n	80012b6 <menuHandler+0x42a>
					printCrearAlarma(0);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f001 fb09 	bl	80028c0 <printCrearAlarma>
					printCambiarHora(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f001 fbf4 	bl	8002a9c <printCambiarHora>
 80012b4:	e002      	b.n	80012bc <menuHandler+0x430>
				}
				else{
					printCambiarHora(0);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f001 fbf0 	bl	8002a9c <printCambiarHora>
				}
			}
			printSeleccion(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f001 f9f1 	bl	80026a4 <printSeleccion>
			update_screen = 0;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <menuHandler+0x4e0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
		}
		//Navegación por el menú de alarmas
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button0 == 0){
 80012c8:	2104      	movs	r1, #4
 80012ca:	482b      	ldr	r0, [pc, #172]	; (8001378 <menuHandler+0x4ec>)
 80012cc:	f003 f9d2 	bl	8004674 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d127      	bne.n	8001326 <menuHandler+0x49a>
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <menuHandler+0x4f0>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	f083 0301 	eor.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <menuHandler+0x49a>
			if(alarmasON == 0){
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <menuHandler+0x4fc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <menuHandler+0x46c>
				seleccion = num_alarmas+2;
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <menuHandler+0x500>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3302      	adds	r3, #2
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <menuHandler+0x4e8>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00f      	b.n	8001318 <menuHandler+0x48c>
			}
			else
			{
				seleccion = seleccion>=num_alarmas+2?num_alarmas+2:seleccion+1;
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <menuHandler+0x500>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1c9a      	adds	r2, r3, #2
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <menuHandler+0x4e8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d803      	bhi.n	800130e <menuHandler+0x482>
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <menuHandler+0x500>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3302      	adds	r3, #2
 800130c:	e002      	b.n	8001314 <menuHandler+0x488>
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <menuHandler+0x4e8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <menuHandler+0x4e8>)
 8001316:	6013      	str	r3, [r2, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <menuHandler+0x4e0>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <menuHandler+0x4e4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button1 == 0){
 8001326:	2101      	movs	r1, #1
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <menuHandler+0x4ec>)
 800132a:	f003 f9a3 	bl	8004674 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d139      	bne.n	80013a8 <menuHandler+0x51c>
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <menuHandler+0x4f4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d032      	beq.n	80013a8 <menuHandler+0x51c>
			if(alarmasON == 0){
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <menuHandler+0x4fc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <menuHandler+0x4c6>
				seleccion = 0;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <menuHandler+0x4e8>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e023      	b.n	800139a <menuHandler+0x50e>
			}
			else
			{
				seleccion = seleccion==0?0:seleccion-1;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <menuHandler+0x4e8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d01c      	beq.n	8001394 <menuHandler+0x508>
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <menuHandler+0x4e8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	e019      	b.n	8001396 <menuHandler+0x50a>
 8001362:	bf00      	nop
 8001364:	20000214 	.word	0x20000214
 8001368:	20000215 	.word	0x20000215
 800136c:	2000001b 	.word	0x2000001b
 8001370:	20000184 	.word	0x20000184
 8001374:	20000230 	.word	0x20000230
 8001378:	40020000 	.word	0x40020000
 800137c:	20000218 	.word	0x20000218
 8001380:	20000219 	.word	0x20000219
 8001384:	2000021a 	.word	0x2000021a
 8001388:	2000021c 	.word	0x2000021c
 800138c:	20000224 	.word	0x20000224
 8001390:	20000220 	.word	0x20000220
 8001394:	2300      	movs	r3, #0
 8001396:	4a84      	ldr	r2, [pc, #528]	; (80015a8 <menuHandler+0x71c>)
 8001398:	6013      	str	r3, [r2, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800139a:	4b84      	ldr	r3, [pc, #528]	; (80015ac <menuHandler+0x720>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <menuHandler+0x724>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		//Selección
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 80013a8:	2108      	movs	r1, #8
 80013aa:	4882      	ldr	r0, [pc, #520]	; (80015b4 <menuHandler+0x728>)
 80013ac:	f003 f962 	bl	8004674 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	f040 8190 	bne.w	80016d8 <menuHandler+0x84c>
 80013b8:	4b7f      	ldr	r3, [pc, #508]	; (80015b8 <menuHandler+0x72c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	f083 0301 	eor.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8188 	beq.w	80016d8 <menuHandler+0x84c>
			if(seleccion >= num_alarmas + 2){
 80013c8:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <menuHandler+0x730>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1c9a      	adds	r2, r3, #2
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <menuHandler+0x71c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d802      	bhi.n	80013dc <menuHandler+0x550>
				//Si el usuario está seleccionando el botón de cambio de hora
				CambiarHora();
 80013d6:	f000 fecb 	bl	8002170 <CambiarHora>
 80013da:	e176      	b.n	80016ca <menuHandler+0x83e>
			}
			else if(seleccion == num_alarmas + 1)
 80013dc:	4b77      	ldr	r3, [pc, #476]	; (80015bc <menuHandler+0x730>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <menuHandler+0x71c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d119      	bne.n	800141e <menuHandler+0x592>
			{
				//Si el usuario está seleccionando el botón de "OK" activa las interrupciones y genera la próxima
				modo = Automatico_Tiempo;
 80013ea:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <menuHandler+0x734>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	701a      	strb	r2, [r3, #0]
				pantalla = Estado;
 80013f0:	4b74      	ldr	r3, [pc, #464]	; (80015c4 <menuHandler+0x738>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
				printMenu_Estado();
 80013f6:	f001 f821 	bl	800243c <printMenu_Estado>
				__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF); //Se borra el flag de interrupciones del RTC para evitar comportamientos inesperados
 80013fa:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <menuHandler+0x73c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <menuHandler+0x73c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800140a:	60da      	str	r2, [r3, #12]
				HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800140c:	2009      	movs	r0, #9
 800140e:	f002 ff84 	bl	800431a <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001412:	2029      	movs	r0, #41	; 0x29
 8001414:	f002 ff81 	bl	800431a <HAL_NVIC_EnableIRQ>
				nextAlarma();
 8001418:	f001 fc5a 	bl	8002cd0 <nextAlarma>
 800141c:	e155      	b.n	80016ca <menuHandler+0x83e>
			}
			else if(seleccion == num_alarmas)
 800141e:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <menuHandler+0x71c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b66      	ldr	r3, [pc, #408]	; (80015bc <menuHandler+0x730>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	f040 8095 	bne.w	8001556 <menuHandler+0x6ca>
			{
				//Si el usuario está seleccionando el botón de crear una nueva alarma lo envía a la función
				//"crearAlarma" que proporciona la interfaz necesaria para hacerlo, reasigna la memoria dinámicamente
				//y añade la nueva alarma al vector de alarmas de encendido y apagado
				RTC_TimeTypeDef nueva_alarma[2];
				crearAlarma(nueva_alarma);
 800142c:	463b      	mov	r3, r7
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fbc8 	bl	8001bc4 <crearAlarma>
				RTC_TimeTypeDef ON  = nueva_alarma[0];
 8001434:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001438:	463d      	mov	r5, r7
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	6023      	str	r3, [r4, #0]
				RTC_TimeTypeDef OFF = nueva_alarma[1];
 8001442:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001446:	f107 0514 	add.w	r5, r7, #20
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	6023      	str	r3, [r4, #0]

				if(num_alarmas == 0){
 8001452:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <menuHandler+0x730>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d12f      	bne.n	80014ba <menuHandler+0x62e>
					alarmasON  = (RTC_TimeTypeDef*)malloc(sizeof(RTC_TimeTypeDef));
 800145a:	2014      	movs	r0, #20
 800145c:	f005 fdac 	bl	8006fb8 <malloc>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <menuHandler+0x740>)
 8001466:	601a      	str	r2, [r3, #0]
					alarmasOFF = (RTC_TimeTypeDef*)malloc(sizeof(RTC_TimeTypeDef));
 8001468:	2014      	movs	r0, #20
 800146a:	f005 fda5 	bl	8006fb8 <malloc>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <menuHandler+0x744>)
 8001474:	601a      	str	r2, [r3, #0]

					if(alarmasON == NULL || alarmasOFF == NULL){
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <menuHandler+0x740>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <menuHandler+0x5fa>
 800147e:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <menuHandler+0x744>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <menuHandler+0x5fe>
						Error_Handler();
 8001486:	f001 fc99 	bl	8002dbc <Error_Handler>
					}

					alarmasON[0] = ON;
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <menuHandler+0x740>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	461d      	mov	r5, r3
 8001490:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	602b      	str	r3, [r5, #0]
					alarmasOFF[0] = OFF;
 800149c:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <menuHandler+0x744>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461d      	mov	r5, r3
 80014a2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	602b      	str	r3, [r5, #0]

					num_alarmas++;
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <menuHandler+0x730>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a41      	ldr	r2, [pc, #260]	; (80015bc <menuHandler+0x730>)
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e107      	b.n	80016ca <menuHandler+0x83e>
				}
				else{
					alarmasON = realloc(alarmasON, (num_alarmas+1)*sizeof(RTC_TimeTypeDef));
 80014ba:	4b44      	ldr	r3, [pc, #272]	; (80015cc <menuHandler+0x740>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <menuHandler+0x730>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f005 fe6b 	bl	80071a8 <realloc>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <menuHandler+0x740>)
 80014d6:	6013      	str	r3, [r2, #0]
					alarmasOFF = realloc(alarmasOFF, (num_alarmas+1)*sizeof(RTC_TimeTypeDef));
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <menuHandler+0x744>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <menuHandler+0x730>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f005 fe5c 	bl	80071a8 <realloc>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a37      	ldr	r2, [pc, #220]	; (80015d0 <menuHandler+0x744>)
 80014f4:	6013      	str	r3, [r2, #0]

					if(alarmasON == NULL || alarmasOFF == NULL){
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <menuHandler+0x740>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <menuHandler+0x67a>
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <menuHandler+0x744>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <menuHandler+0x67e>
						Error_Handler();
 8001506:	f001 fc59 	bl	8002dbc <Error_Handler>
					}
					alarmasON[num_alarmas] = ON;
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <menuHandler+0x740>)
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <menuHandler+0x730>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	461d      	mov	r5, r3
 800151e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	602b      	str	r3, [r5, #0]
					alarmasOFF[num_alarmas] = OFF;
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <menuHandler+0x744>)
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <menuHandler+0x730>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	461d      	mov	r5, r3
 800153e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	602b      	str	r3, [r5, #0]

					num_alarmas++;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <menuHandler+0x730>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <menuHandler+0x730>)
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e0b9      	b.n	80016ca <menuHandler+0x83e>
				}
			}
			else{
				//Si el usuario está seleccionando una alarma cualquiera, entonces esta se elimina
				//Y se reasigna la memoria de forma adecuada
				if(num_alarmas == 1){
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <menuHandler+0x730>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d110      	bne.n	8001580 <menuHandler+0x6f4>
					free(alarmasON);
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <menuHandler+0x740>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fd30 	bl	8006fc8 <free>
					free(alarmasOFF);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <menuHandler+0x744>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f005 fd2b 	bl	8006fc8 <free>
					alarmasON = 0;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <menuHandler+0x740>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
					alarmasOFF = 0;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <menuHandler+0x744>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e0a4      	b.n	80016ca <menuHandler+0x83e>
				}
				else{
					RTC_TimeTypeDef* alarmasTemp = malloc((num_alarmas-1)*sizeof(RTC_TimeTypeDef));
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <menuHandler+0x730>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	3b14      	subs	r3, #20
 800158e:	4618      	mov	r0, r3
 8001590:	f005 fd12 	bl	8006fb8 <malloc>
 8001594:	4603      	mov	r3, r0
 8001596:	653b      	str	r3, [r7, #80]	; 0x50
					if(alarmasTemp == NULL){
 8001598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <menuHandler+0x716>
						Error_Handler();
 800159e:	f001 fc0d 	bl	8002dbc <Error_Handler>
					}
					for(uint32_t i = 0; i < num_alarmas-1; i++){
 80015a2:	2300      	movs	r3, #0
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80015a6:	e038      	b.n	800161a <menuHandler+0x78e>
 80015a8:	20000230 	.word	0x20000230
 80015ac:	2000001b 	.word	0x2000001b
 80015b0:	20000184 	.word	0x20000184
 80015b4:	40020000 	.word	0x40020000
 80015b8:	2000021a 	.word	0x2000021a
 80015bc:	20000224 	.word	0x20000224
 80015c0:	20000214 	.word	0x20000214
 80015c4:	20000215 	.word	0x20000215
 80015c8:	2000010c 	.word	0x2000010c
 80015cc:	2000021c 	.word	0x2000021c
 80015d0:	20000220 	.word	0x20000220
						alarmasTemp[i] = alarmasON[i+((uint32_t)i>=seleccion)];
 80015d4:	4b67      	ldr	r3, [pc, #412]	; (8001774 <menuHandler+0x8e8>)
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	4b67      	ldr	r3, [pc, #412]	; (8001778 <menuHandler+0x8ec>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015de:	429a      	cmp	r2, r3
 80015e0:	bf2c      	ite	cs
 80015e2:	2301      	movcs	r3, #1
 80015e4:	2300      	movcc	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ec:	441a      	add	r2, r3
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4419      	add	r1, r3
 80015f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	461a      	mov	r2, r3
 8001604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001606:	4413      	add	r3, r2
 8001608:	461c      	mov	r4, r3
 800160a:	460d      	mov	r5, r1
 800160c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	6023      	str	r3, [r4, #0]
					for(uint32_t i = 0; i < num_alarmas-1; i++){
 8001614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001616:	3301      	adds	r3, #1
 8001618:	65bb      	str	r3, [r7, #88]	; 0x58
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <menuHandler+0x8f0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3b01      	subs	r3, #1
 8001620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001622:	429a      	cmp	r2, r3
 8001624:	d3d6      	bcc.n	80015d4 <menuHandler+0x748>
					}
					free(alarmasON);
 8001626:	4b53      	ldr	r3, [pc, #332]	; (8001774 <menuHandler+0x8e8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f005 fccc 	bl	8006fc8 <free>
					alarmasON = alarmasTemp;
 8001630:	4a50      	ldr	r2, [pc, #320]	; (8001774 <menuHandler+0x8e8>)
 8001632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001634:	6013      	str	r3, [r2, #0]

					alarmasTemp = malloc((num_alarmas-1)*sizeof(RTC_TimeTypeDef));
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <menuHandler+0x8f0>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	3b14      	subs	r3, #20
 8001644:	4618      	mov	r0, r3
 8001646:	f005 fcb7 	bl	8006fb8 <malloc>
 800164a:	4603      	mov	r3, r0
 800164c:	653b      	str	r3, [r7, #80]	; 0x50
					if(alarmasTemp == NULL){
 800164e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <menuHandler+0x7cc>
						Error_Handler();
 8001654:	f001 fbb2 	bl	8002dbc <Error_Handler>
					}
					for(uint32_t i = 0; i < num_alarmas-1; i++){
 8001658:	2300      	movs	r3, #0
 800165a:	657b      	str	r3, [r7, #84]	; 0x54
 800165c:	e022      	b.n	80016a4 <menuHandler+0x818>
						alarmasTemp[i] = alarmasOFF[i+((uint32_t)i>=seleccion)];
 800165e:	4b48      	ldr	r3, [pc, #288]	; (8001780 <menuHandler+0x8f4>)
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <menuHandler+0x8ec>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001668:	429a      	cmp	r2, r3
 800166a:	bf2c      	ite	cs
 800166c:	2301      	movcs	r3, #1
 800166e:	2300      	movcc	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	441a      	add	r2, r3
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4419      	add	r1, r3
 8001682:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	461a      	mov	r2, r3
 800168e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001690:	4413      	add	r3, r2
 8001692:	461c      	mov	r4, r3
 8001694:	460d      	mov	r5, r1
 8001696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	6023      	str	r3, [r4, #0]
					for(uint32_t i = 0; i < num_alarmas-1; i++){
 800169e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a0:	3301      	adds	r3, #1
 80016a2:	657b      	str	r3, [r7, #84]	; 0x54
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <menuHandler+0x8f0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3d6      	bcc.n	800165e <menuHandler+0x7d2>
					}
					free(alarmasOFF);
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <menuHandler+0x8f4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 fc87 	bl	8006fc8 <free>
					alarmasOFF = alarmasTemp;
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <menuHandler+0x8f4>)
 80016bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016be:	6013      	str	r3, [r2, #0]

					num_alarmas--;
 80016c0:	4b2e      	ldr	r3, [pc, #184]	; (800177c <menuHandler+0x8f0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	4a2d      	ldr	r2, [pc, #180]	; (800177c <menuHandler+0x8f0>)
 80016c8:	6013      	str	r3, [r2, #0]
				}
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <menuHandler+0x8f8>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <menuHandler+0x8fc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80016d8:	2101      	movs	r1, #1
 80016da:	482c      	ldr	r0, [pc, #176]	; (800178c <menuHandler+0x900>)
 80016dc:	f002 ffca 	bl	8004674 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	bf14      	ite	ne
 80016e6:	2301      	movne	r3, #1
 80016e8:	2300      	moveq	r3, #0
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <menuHandler+0x904>)
 80016ee:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80016f0:	2104      	movs	r1, #4
 80016f2:	4826      	ldr	r0, [pc, #152]	; (800178c <menuHandler+0x900>)
 80016f4:	f002 ffbe 	bl	8004674 <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <menuHandler+0x908>)
 8001706:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001708:	2108      	movs	r1, #8
 800170a:	4820      	ldr	r0, [pc, #128]	; (800178c <menuHandler+0x900>)
 800170c:	f002 ffb2 	bl	8004674 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <menuHandler+0x90c>)
 800171e:	701a      	strb	r2, [r3, #0]
		break;
 8001720:	e024      	b.n	800176c <menuHandler+0x8e0>
	case Ajustes_Auto_Humedad:
		//Muestra al usuario los ajustes de humedad almacenados y le permite modificarlos antes de activar
		//el modo automático
		AjustarHumedad();
 8001722:	f000 f85b 	bl	80017dc <AjustarHumedad>
		modo = Automatico_Humedad;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <menuHandler+0x910>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
		pantalla = Estado;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <menuHandler+0x914>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
		printMenu_Estado();
 8001732:	f000 fe83 	bl	800243c <printMenu_Estado>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001736:	2009      	movs	r0, #9
 8001738:	f002 fdef 	bl	800431a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 800173c:	2029      	movs	r0, #41	; 0x29
 800173e:	f002 fdfa 	bl	8004336 <HAL_NVIC_DisableIRQ>
		break;
 8001742:	e013      	b.n	800176c <menuHandler+0x8e0>
	default:
		//Por defecto se asigna al modo manual
		modo = Manual;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <menuHandler+0x910>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
		pantalla = Estado;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <menuHandler+0x914>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
		printMenu_Estado();
 8001750:	f000 fe74 	bl	800243c <printMenu_Estado>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001754:	2006      	movs	r0, #6
 8001756:	f002 fde0 	bl	800431a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800175a:	2008      	movs	r0, #8
 800175c:	f002 fddd 	bl	800431a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001760:	2009      	movs	r0, #9
 8001762:	f002 fdda 	bl	800431a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001766:	2029      	movs	r0, #41	; 0x29
 8001768:	f002 fde5 	bl	8004336 <HAL_NVIC_DisableIRQ>
	}
}
 800176c:	3764      	adds	r7, #100	; 0x64
 800176e:	46bd      	mov	sp, r7
 8001770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001772:	bf00      	nop
 8001774:	2000021c 	.word	0x2000021c
 8001778:	20000230 	.word	0x20000230
 800177c:	20000224 	.word	0x20000224
 8001780:	20000220 	.word	0x20000220
 8001784:	2000001b 	.word	0x2000001b
 8001788:	20000184 	.word	0x20000184
 800178c:	40020000 	.word	0x40020000
 8001790:	20000218 	.word	0x20000218
 8001794:	20000219 	.word	0x20000219
 8001798:	2000021a 	.word	0x2000021a
 800179c:	20000214 	.word	0x20000214
 80017a0:	20000215 	.word	0x20000215

080017a4 <ControlAutomatico_Humedad>:
//	Control automático de riego basado en la humedad de la tierra
//
//Si la humedad medida cae por debajo de la mínima, se abre la válvula, permitiendo al agua pasar
//Si la humedad medida supera la máxima entonces cierra la válvula para evitar liberar más agua
void ControlAutomatico_Humedad()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	if (humedad >= humedad_maxima){
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <ControlAutomatico_Humedad+0x2c>)
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <ControlAutomatico_Humedad+0x30>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d302      	bcc.n	80017ba <ControlAutomatico_Humedad+0x16>
		CerrarValvula();
 80017b4:	f7ff fa5a 	bl	8000c6c <CerrarValvula>
	}
	else if(humedad <= humedad_minima){
		AbrirValvula();
	}
}
 80017b8:	e007      	b.n	80017ca <ControlAutomatico_Humedad+0x26>
	else if(humedad <= humedad_minima){
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <ControlAutomatico_Humedad+0x2c>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <ControlAutomatico_Humedad+0x34>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d801      	bhi.n	80017ca <ControlAutomatico_Humedad+0x26>
		AbrirValvula();
 80017c6:	f7ff fa45 	bl	8000c54 <AbrirValvula>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000217 	.word	0x20000217
 80017d4:	20000019 	.word	0x20000019
 80017d8:	20000018 	.word	0x20000018

080017dc <AjustarHumedad>:
//supera 100, regresa a 0.
//El mismo proceso se repite para el ajuste del valor máximo, con la diferencia de que este
//no puede ser menor al valor mínimo previamnte elegido.
//La lectura de los botones se hace por polling dentro de un bucle infinito el cual se rompe
//con el botón de la derecha permitiendo continuar con el resto del código
void AjustarHumedad(){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af04      	add	r7, sp, #16

	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80017e2:	4b98      	ldr	r3, [pc, #608]	; (8001a44 <AjustarHumedad+0x268>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	4b97      	ldr	r3, [pc, #604]	; (8001a48 <AjustarHumedad+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
	ST7735_FillScreenFast(ST7735_CYAN);
 80017f0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80017f4:	f001 fd5e 	bl	80032b4 <ST7735_FillScreenFast>
	ST7735_WriteString(16, 10, "MINIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 80017f8:	4b94      	ldr	r3, [pc, #592]	; (8001a4c <AjustarHumedad+0x270>)
 80017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fe:	9202      	str	r2, [sp, #8]
 8001800:	2200      	movs	r2, #0
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a91      	ldr	r2, [pc, #580]	; (8001a50 <AjustarHumedad+0x274>)
 800180c:	210a      	movs	r1, #10
 800180e:	2010      	movs	r0, #16
 8001810:	f001 fc81 	bl	8003116 <ST7735_WriteString>
	char valor[4];
	while(true){ //Selección de humedad minima
		if(update_screen){
 8001814:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <AjustarHumedad+0x268>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d016      	beq.n	800184a <AjustarHumedad+0x6e>
			sprintf(valor,"%02d%c",humedad_minima,37);
 800181c:	4b8d      	ldr	r3, [pc, #564]	; (8001a54 <AjustarHumedad+0x278>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	1d38      	adds	r0, r7, #4
 8001824:	2325      	movs	r3, #37	; 0x25
 8001826:	498c      	ldr	r1, [pc, #560]	; (8001a58 <AjustarHumedad+0x27c>)
 8001828:	f005 fcd6 	bl	80071d8 <siprintf>
			ST7735_WriteString(47, 40, valor, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800182c:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <AjustarHumedad+0x280>)
 800182e:	1d39      	adds	r1, r7, #4
 8001830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001834:	9202      	str	r2, [sp, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	9201      	str	r2, [sp, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	9200      	str	r2, [sp, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	460a      	mov	r2, r1
 8001842:	2128      	movs	r1, #40	; 0x28
 8001844:	202f      	movs	r0, #47	; 0x2f
 8001846:	f001 fc66 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 800184a:	2101      	movs	r1, #1
 800184c:	4884      	ldr	r0, [pc, #528]	; (8001a60 <AjustarHumedad+0x284>)
 800184e:	f002 ff11 	bl	8004674 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b01      	cmp	r3, #1
 8001856:	d12d      	bne.n	80018b4 <AjustarHumedad+0xd8>
 8001858:	4b82      	ldr	r3, [pc, #520]	; (8001a64 <AjustarHumedad+0x288>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d026      	beq.n	80018b4 <AjustarHumedad+0xd8>
			if(humedad_minima == 100){
 8001866:	4b7b      	ldr	r3, [pc, #492]	; (8001a54 <AjustarHumedad+0x278>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d115      	bne.n	800189a <AjustarHumedad+0xbe>
				humedad_minima = 0;
 800186e:	4b79      	ldr	r3, [pc, #484]	; (8001a54 <AjustarHumedad+0x278>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
				ST7735_FillScreenFast(ST7735_CYAN);
 8001874:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001878:	f001 fd1c 	bl	80032b4 <ST7735_FillScreenFast>
				ST7735_WriteString(16, 10, "MINIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 800187c:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <AjustarHumedad+0x270>)
 800187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001882:	9202      	str	r2, [sp, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	9200      	str	r2, [sp, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a70      	ldr	r2, [pc, #448]	; (8001a50 <AjustarHumedad+0x274>)
 8001890:	210a      	movs	r1, #10
 8001892:	2010      	movs	r0, #16
 8001894:	f001 fc3f 	bl	8003116 <ST7735_WriteString>
 8001898:	e005      	b.n	80018a6 <AjustarHumedad+0xca>
			}
			else{
				humedad_minima++;
 800189a:	4b6e      	ldr	r3, [pc, #440]	; (8001a54 <AjustarHumedad+0x278>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b6c      	ldr	r3, [pc, #432]	; (8001a54 <AjustarHumedad+0x278>)
 80018a4:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <AjustarHumedad+0x268>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <AjustarHumedad+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 80018b4:	2104      	movs	r1, #4
 80018b6:	486a      	ldr	r0, [pc, #424]	; (8001a60 <AjustarHumedad+0x284>)
 80018b8:	f002 fedc 	bl	8004674 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d131      	bne.n	8001926 <AjustarHumedad+0x14a>
 80018c2:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <AjustarHumedad+0x28c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	f083 0301 	eor.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d02a      	beq.n	8001926 <AjustarHumedad+0x14a>
			if(humedad_minima == 100){
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <AjustarHumedad+0x278>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b64      	cmp	r3, #100	; 0x64
 80018d6:	d111      	bne.n	80018fc <AjustarHumedad+0x120>
				ST7735_FillScreenFast(ST7735_CYAN);
 80018d8:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80018dc:	f001 fcea 	bl	80032b4 <ST7735_FillScreenFast>
				ST7735_WriteString(16, 10, "MINIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <AjustarHumedad+0x270>)
 80018e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e6:	9202      	str	r2, [sp, #8]
 80018e8:	2200      	movs	r2, #0
 80018ea:	9201      	str	r2, [sp, #4]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	9200      	str	r2, [sp, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <AjustarHumedad+0x274>)
 80018f4:	210a      	movs	r1, #10
 80018f6:	2010      	movs	r0, #16
 80018f8:	f001 fc0d 	bl	8003116 <ST7735_WriteString>
			}
			if(humedad_minima == 0){
 80018fc:	4b55      	ldr	r3, [pc, #340]	; (8001a54 <AjustarHumedad+0x278>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <AjustarHumedad+0x130>
				humedad_minima = 100;
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <AjustarHumedad+0x278>)
 8001906:	2264      	movs	r2, #100	; 0x64
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e005      	b.n	8001918 <AjustarHumedad+0x13c>
			}
			else{
				humedad_minima--;
 800190c:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <AjustarHumedad+0x278>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <AjustarHumedad+0x278>)
 8001916:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <AjustarHumedad+0x268>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <AjustarHumedad+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001926:	2108      	movs	r1, #8
 8001928:	484d      	ldr	r0, [pc, #308]	; (8001a60 <AjustarHumedad+0x284>)
 800192a:	f002 fea3 	bl	8004674 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d11d      	bne.n	8001970 <AjustarHumedad+0x194>
 8001934:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <AjustarHumedad+0x290>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <AjustarHumedad+0x194>
			button2 = 1;
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <AjustarHumedad+0x290>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
			break;
 8001948:	bf00      	nop
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
	}
	ST7735_FillScreenFast(ST7735_CYAN);
 800194a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800194e:	f001 fcb1 	bl	80032b4 <ST7735_FillScreenFast>
	ST7735_WriteString(16, 10, "MAXIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <AjustarHumedad+0x270>)
 8001954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001958:	9202      	str	r2, [sp, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	9201      	str	r2, [sp, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	9200      	str	r2, [sp, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <AjustarHumedad+0x294>)
 8001966:	210a      	movs	r1, #10
 8001968:	2010      	movs	r0, #16
 800196a:	f001 fbd4 	bl	8003116 <ST7735_WriteString>
 800196e:	e024      	b.n	80019ba <AjustarHumedad+0x1de>
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001970:	2101      	movs	r1, #1
 8001972:	483b      	ldr	r0, [pc, #236]	; (8001a60 <AjustarHumedad+0x284>)
 8001974:	f002 fe7e 	bl	8004674 <HAL_GPIO_ReadPin>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf14      	ite	ne
 800197e:	2301      	movne	r3, #1
 8001980:	2300      	moveq	r3, #0
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <AjustarHumedad+0x288>)
 8001986:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001988:	2104      	movs	r1, #4
 800198a:	4835      	ldr	r0, [pc, #212]	; (8001a60 <AjustarHumedad+0x284>)
 800198c:	f002 fe72 	bl	8004674 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <AjustarHumedad+0x28c>)
 800199e:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80019a0:	2108      	movs	r1, #8
 80019a2:	482f      	ldr	r0, [pc, #188]	; (8001a60 <AjustarHumedad+0x284>)
 80019a4:	f002 fe66 	bl	8004674 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <AjustarHumedad+0x290>)
 80019b6:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80019b8:	e72c      	b.n	8001814 <AjustarHumedad+0x38>
	while(true){ //Selección de humedad maxima
		if(update_screen){
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <AjustarHumedad+0x268>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d016      	beq.n	80019f0 <AjustarHumedad+0x214>
			sprintf(valor,"%02d%c",humedad_maxima,37);
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <AjustarHumedad+0x298>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	1d38      	adds	r0, r7, #4
 80019ca:	2325      	movs	r3, #37	; 0x25
 80019cc:	4922      	ldr	r1, [pc, #136]	; (8001a58 <AjustarHumedad+0x27c>)
 80019ce:	f005 fc03 	bl	80071d8 <siprintf>
			ST7735_WriteString(47, 40, valor, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <AjustarHumedad+0x280>)
 80019d4:	1d39      	adds	r1, r7, #4
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	9202      	str	r2, [sp, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	9200      	str	r2, [sp, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	460a      	mov	r2, r1
 80019e8:	2128      	movs	r1, #40	; 0x28
 80019ea:	202f      	movs	r0, #47	; 0x2f
 80019ec:	f001 fb93 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80019f0:	2101      	movs	r1, #1
 80019f2:	481b      	ldr	r0, [pc, #108]	; (8001a60 <AjustarHumedad+0x284>)
 80019f4:	f002 fe3e 	bl	8004674 <HAL_GPIO_ReadPin>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d149      	bne.n	8001a92 <AjustarHumedad+0x2b6>
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <AjustarHumedad+0x288>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	f083 0301 	eor.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d042      	beq.n	8001a92 <AjustarHumedad+0x2b6>
			if(humedad_maxima == 100){
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <AjustarHumedad+0x298>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d131      	bne.n	8001a78 <AjustarHumedad+0x29c>
				humedad_maxima = humedad_minima;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <AjustarHumedad+0x278>)
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <AjustarHumedad+0x298>)
 8001a1a:	701a      	strb	r2, [r3, #0]
				ST7735_FillScreenFast(ST7735_CYAN);
 8001a1c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001a20:	f001 fc48 	bl	80032b4 <ST7735_FillScreenFast>
				ST7735_WriteString(16, 10, "MAXIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <AjustarHumedad+0x270>)
 8001a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2a:	9202      	str	r2, [sp, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	9200      	str	r2, [sp, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <AjustarHumedad+0x294>)
 8001a38:	210a      	movs	r1, #10
 8001a3a:	2010      	movs	r0, #16
 8001a3c:	f001 fb6b 	bl	8003116 <ST7735_WriteString>
 8001a40:	e020      	b.n	8001a84 <AjustarHumedad+0x2a8>
 8001a42:	bf00      	nop
 8001a44:	2000001b 	.word	0x2000001b
 8001a48:	20000184 	.word	0x20000184
 8001a4c:	20000010 	.word	0x20000010
 8001a50:	080078e8 	.word	0x080078e8
 8001a54:	20000018 	.word	0x20000018
 8001a58:	080078f0 	.word	0x080078f0
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	40020000 	.word	0x40020000
 8001a64:	20000218 	.word	0x20000218
 8001a68:	20000219 	.word	0x20000219
 8001a6c:	2000021a 	.word	0x2000021a
 8001a70:	080078f8 	.word	0x080078f8
 8001a74:	20000019 	.word	0x20000019
			}
			else{
				humedad_maxima++;
 8001a78:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001a82:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <AjustarHumedad+0x3c0>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <AjustarHumedad+0x3c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001a92:	2104      	movs	r1, #4
 8001a94:	4843      	ldr	r0, [pc, #268]	; (8001ba4 <AjustarHumedad+0x3c8>)
 8001a96:	f002 fded 	bl	8004674 <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d133      	bne.n	8001b08 <AjustarHumedad+0x32c>
 8001aa0:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <AjustarHumedad+0x3cc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f083 0301 	eor.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d02c      	beq.n	8001b08 <AjustarHumedad+0x32c>
			if(humedad_maxima == 100){
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d111      	bne.n	8001ada <AjustarHumedad+0x2fe>
				ST7735_FillScreenFast(ST7735_CYAN);
 8001ab6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001aba:	f001 fbfb 	bl	80032b4 <ST7735_FillScreenFast>
				ST7735_WriteString(16, 10, "MAXIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <AjustarHumedad+0x3d0>)
 8001ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac4:	9202      	str	r2, [sp, #8]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	9201      	str	r2, [sp, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <AjustarHumedad+0x3d4>)
 8001ad2:	210a      	movs	r1, #10
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f001 fb1e 	bl	8003116 <ST7735_WriteString>
			}
			if(humedad_maxima <= humedad_minima){
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <AjustarHumedad+0x3d8>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d803      	bhi.n	8001aee <AjustarHumedad+0x312>
				humedad_maxima = 100;
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001ae8:	2264      	movs	r2, #100	; 0x64
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e005      	b.n	8001afa <AjustarHumedad+0x31e>
			}
			else{
				humedad_maxima--;
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001af8:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <AjustarHumedad+0x3c0>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <AjustarHumedad+0x3c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001b08:	2108      	movs	r1, #8
 8001b0a:	4826      	ldr	r0, [pc, #152]	; (8001ba4 <AjustarHumedad+0x3c8>)
 8001b0c:	f002 fdb2 	bl	8004674 <HAL_GPIO_ReadPin>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d10a      	bne.n	8001b2c <AjustarHumedad+0x350>
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <AjustarHumedad+0x3dc>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	f083 0301 	eor.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <AjustarHumedad+0x350>
			button2 = 1;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <AjustarHumedad+0x3dc>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
			break;
 8001b2a:	e024      	b.n	8001b76 <AjustarHumedad+0x39a>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	481d      	ldr	r0, [pc, #116]	; (8001ba4 <AjustarHumedad+0x3c8>)
 8001b30:	f002 fda0 	bl	8004674 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <AjustarHumedad+0x3e0>)
 8001b42:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001b44:	2104      	movs	r1, #4
 8001b46:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <AjustarHumedad+0x3c8>)
 8001b48:	f002 fd94 	bl	8004674 <HAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <AjustarHumedad+0x3cc>)
 8001b5a:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <AjustarHumedad+0x3c8>)
 8001b60:	f002 fd88 	bl	8004674 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <AjustarHumedad+0x3dc>)
 8001b72:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8001b74:	e721      	b.n	80019ba <AjustarHumedad+0x1de>
	}
	humedad_media = (humedad_minima+humedad_maxima)/2;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <AjustarHumedad+0x3d8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <AjustarHumedad+0x3bc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	0fda      	lsrs	r2, r3, #31
 8001b84:	4413      	add	r3, r2
 8001b86:	105b      	asrs	r3, r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <AjustarHumedad+0x3e4>)
 8001b8c:	701a      	strb	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000019 	.word	0x20000019
 8001b9c:	2000001b 	.word	0x2000001b
 8001ba0:	20000184 	.word	0x20000184
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	20000219 	.word	0x20000219
 8001bac:	20000010 	.word	0x20000010
 8001bb0:	080078f8 	.word	0x080078f8
 8001bb4:	20000018 	.word	0x20000018
 8001bb8:	2000021a 	.word	0x2000021a
 8001bbc:	20000218 	.word	0x20000218
 8001bc0:	2000001a 	.word	0x2000001a

08001bc4 <crearAlarma>:
//apagado.
//La lectura de los botones se hace por polling, cad sección se encuentra dentro de un bucle
//infinito el cual el botón de la derecha rompe para pasar a la siguiente sección de código.
//Una vez que se han elegido valores para la hora y los minutos de encendido y apagado, se
//almacenan ambos datos en el puntero que se recibió como parámetro.
void crearAlarma(RTC_TimeTypeDef* returnVal){
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b092      	sub	sp, #72	; 0x48
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	6078      	str	r0, [r7, #4]
	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001bcc:	4ba6      	ldr	r3, [pc, #664]	; (8001e68 <crearAlarma+0x2a4>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	4ba6      	ldr	r3, [pc, #664]	; (8001e6c <crearAlarma+0x2a8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_TimeTypeDef ON = {0};
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
	RTC_TimeTypeDef OFF = {0};
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
	ST7735_FillScreenFast(ST7735_CYAN);
 8001bfa:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001bfe:	f001 fb59 	bl	80032b4 <ST7735_FillScreenFast>
	ST7735_WriteString(48, 10, "ON", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001c02:	4b9b      	ldr	r3, [pc, #620]	; (8001e70 <crearAlarma+0x2ac>)
 8001c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c08:	9202      	str	r2, [sp, #8]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	9201      	str	r2, [sp, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	9200      	str	r2, [sp, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a97      	ldr	r2, [pc, #604]	; (8001e74 <crearAlarma+0x2b0>)
 8001c16:	210a      	movs	r1, #10
 8001c18:	2030      	movs	r0, #48	; 0x30
 8001c1a:	f001 fa7c 	bl	8003116 <ST7735_WriteString>
	char alarma[6];
	while(true){ //Selección de hora de encendido
		if(update_screen){
 8001c1e:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <crearAlarma+0x2a4>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d019      	beq.n	8001c5a <crearAlarma+0x96>
			sprintf(alarma,"%02d:%02d",ON.Hours,ON.Minutes);
 8001c26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c30:	f107 0008 	add.w	r0, r7, #8
 8001c34:	4990      	ldr	r1, [pc, #576]	; (8001e78 <crearAlarma+0x2b4>)
 8001c36:	f005 facf 	bl	80071d8 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001c3a:	4b90      	ldr	r3, [pc, #576]	; (8001e7c <crearAlarma+0x2b8>)
 8001c3c:	f107 0108 	add.w	r1, r7, #8
 8001c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c44:	9202      	str	r2, [sp, #8]
 8001c46:	2200      	movs	r2, #0
 8001c48:	9201      	str	r2, [sp, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	460a      	mov	r2, r1
 8001c52:	211e      	movs	r1, #30
 8001c54:	2024      	movs	r0, #36	; 0x24
 8001c56:	f001 fa5e 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4888      	ldr	r0, [pc, #544]	; (8001e80 <crearAlarma+0x2bc>)
 8001c5e:	f002 fd09 	bl	8004674 <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d11b      	bne.n	8001ca0 <crearAlarma+0xdc>
 8001c68:	4b86      	ldr	r3, [pc, #536]	; (8001e84 <crearAlarma+0x2c0>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d014      	beq.n	8001ca0 <crearAlarma+0xdc>
			if(ON.Hours == 23){
 8001c76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c7a:	2b17      	cmp	r3, #23
 8001c7c:	d103      	bne.n	8001c86 <crearAlarma+0xc2>
				ON.Hours = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001c84:	e005      	b.n	8001c92 <crearAlarma+0xce>
			}
			else{
				ON.Hours++;
 8001c86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001c92:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <crearAlarma+0x2a4>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	4b74      	ldr	r3, [pc, #464]	; (8001e6c <crearAlarma+0x2a8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	4877      	ldr	r0, [pc, #476]	; (8001e80 <crearAlarma+0x2bc>)
 8001ca4:	f002 fce6 	bl	8004674 <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d11b      	bne.n	8001ce6 <crearAlarma+0x122>
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <crearAlarma+0x2c4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	f083 0301 	eor.w	r3, r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <crearAlarma+0x122>
			if(ON.Hours == 0){
 8001cbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <crearAlarma+0x108>
				ON.Hours = 23;
 8001cc4:	2317      	movs	r3, #23
 8001cc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001cca:	e005      	b.n	8001cd8 <crearAlarma+0x114>
			}
			else{
				ON.Hours--;
 8001ccc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001cd8:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <crearAlarma+0x2a4>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <crearAlarma+0x2a8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	4865      	ldr	r0, [pc, #404]	; (8001e80 <crearAlarma+0x2bc>)
 8001cea:	f002 fcc3 	bl	8004674 <HAL_GPIO_ReadPin>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10a      	bne.n	8001d0a <crearAlarma+0x146>
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <crearAlarma+0x2c8>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <crearAlarma+0x146>
			button2 = 1;
 8001d02:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <crearAlarma+0x2c8>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
			break;
 8001d08:	e024      	b.n	8001d54 <crearAlarma+0x190>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	485c      	ldr	r0, [pc, #368]	; (8001e80 <crearAlarma+0x2bc>)
 8001d0e:	f002 fcb1 	bl	8004674 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <crearAlarma+0x2c0>)
 8001d20:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001d22:	2104      	movs	r1, #4
 8001d24:	4856      	ldr	r0, [pc, #344]	; (8001e80 <crearAlarma+0x2bc>)
 8001d26:	f002 fca5 	bl	8004674 <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <crearAlarma+0x2c4>)
 8001d38:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4850      	ldr	r0, [pc, #320]	; (8001e80 <crearAlarma+0x2bc>)
 8001d3e:	f002 fc99 	bl	8004674 <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <crearAlarma+0x2c8>)
 8001d50:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8001d52:	e764      	b.n	8001c1e <crearAlarma+0x5a>
	}
	while(true){ //Selección de minuto de encendido
		if(update_screen){
 8001d54:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <crearAlarma+0x2a4>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <crearAlarma+0x1cc>
			sprintf(alarma,"%02d:%02d",ON.Hours,ON.Minutes);
 8001d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d60:	461a      	mov	r2, r3
 8001d62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d66:	f107 0008 	add.w	r0, r7, #8
 8001d6a:	4943      	ldr	r1, [pc, #268]	; (8001e78 <crearAlarma+0x2b4>)
 8001d6c:	f005 fa34 	bl	80071d8 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <crearAlarma+0x2b8>)
 8001d72:	f107 0108 	add.w	r1, r7, #8
 8001d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7a:	9202      	str	r2, [sp, #8]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	9201      	str	r2, [sp, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	460a      	mov	r2, r1
 8001d88:	211e      	movs	r1, #30
 8001d8a:	2024      	movs	r0, #36	; 0x24
 8001d8c:	f001 f9c3 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8001d90:	2101      	movs	r1, #1
 8001d92:	483b      	ldr	r0, [pc, #236]	; (8001e80 <crearAlarma+0x2bc>)
 8001d94:	f002 fc6e 	bl	8004674 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d11b      	bne.n	8001dd6 <crearAlarma+0x212>
 8001d9e:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <crearAlarma+0x2c0>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f083 0301 	eor.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d014      	beq.n	8001dd6 <crearAlarma+0x212>
			if(ON.Minutes == 59){
 8001dac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001db0:	2b3b      	cmp	r3, #59	; 0x3b
 8001db2:	d103      	bne.n	8001dbc <crearAlarma+0x1f8>
				ON.Minutes = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001dba:	e005      	b.n	8001dc8 <crearAlarma+0x204>
			}
			else{
				ON.Minutes++;
 8001dbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <crearAlarma+0x2a4>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <crearAlarma+0x2a8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4829      	ldr	r0, [pc, #164]	; (8001e80 <crearAlarma+0x2bc>)
 8001dda:	f002 fc4b 	bl	8004674 <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d11b      	bne.n	8001e1c <crearAlarma+0x258>
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <crearAlarma+0x2c4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f083 0301 	eor.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d014      	beq.n	8001e1c <crearAlarma+0x258>
			if(ON.Minutes == 0){
 8001df2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <crearAlarma+0x23e>
				ON.Minutes = 59;
 8001dfa:	233b      	movs	r3, #59	; 0x3b
 8001dfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e00:	e005      	b.n	8001e0e <crearAlarma+0x24a>
			}
			else{
				ON.Minutes--;
 8001e02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <crearAlarma+0x2a4>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <crearAlarma+0x2a8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	4818      	ldr	r0, [pc, #96]	; (8001e80 <crearAlarma+0x2bc>)
 8001e20:	f002 fc28 	bl	8004674 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d134      	bne.n	8001e94 <crearAlarma+0x2d0>
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <crearAlarma+0x2c8>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d02d      	beq.n	8001e94 <crearAlarma+0x2d0>
			button2 = 1;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <crearAlarma+0x2c8>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
			break;
 8001e3e:	bf00      	nop
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
	}
	ST7735_FillScreenFast(ST7735_CYAN);
 8001e40:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001e44:	f001 fa36 	bl	80032b4 <ST7735_FillScreenFast>
	ST7735_WriteString(40, 10, "OFF", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <crearAlarma+0x2ac>)
 8001e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4e:	9202      	str	r2, [sp, #8]
 8001e50:	2200      	movs	r2, #0
 8001e52:	9201      	str	r2, [sp, #4]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <crearAlarma+0x2cc>)
 8001e5c:	210a      	movs	r1, #10
 8001e5e:	2028      	movs	r0, #40	; 0x28
 8001e60:	f001 f959 	bl	8003116 <ST7735_WriteString>
 8001e64:	e03b      	b.n	8001ede <crearAlarma+0x31a>
 8001e66:	bf00      	nop
 8001e68:	2000001b 	.word	0x2000001b
 8001e6c:	20000184 	.word	0x20000184
 8001e70:	20000010 	.word	0x20000010
 8001e74:	08007900 	.word	0x08007900
 8001e78:	08007904 	.word	0x08007904
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	40020000 	.word	0x40020000
 8001e84:	20000218 	.word	0x20000218
 8001e88:	20000219 	.word	0x20000219
 8001e8c:	2000021a 	.word	0x2000021a
 8001e90:	08007910 	.word	0x08007910
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001e94:	2101      	movs	r1, #1
 8001e96:	48a3      	ldr	r0, [pc, #652]	; (8002124 <crearAlarma+0x560>)
 8001e98:	f002 fbec 	bl	8004674 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b9f      	ldr	r3, [pc, #636]	; (8002128 <crearAlarma+0x564>)
 8001eaa:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001eac:	2104      	movs	r1, #4
 8001eae:	489d      	ldr	r0, [pc, #628]	; (8002124 <crearAlarma+0x560>)
 8001eb0:	f002 fbe0 	bl	8004674 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b9a      	ldr	r3, [pc, #616]	; (800212c <crearAlarma+0x568>)
 8001ec2:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001ec4:	2108      	movs	r1, #8
 8001ec6:	4897      	ldr	r0, [pc, #604]	; (8002124 <crearAlarma+0x560>)
 8001ec8:	f002 fbd4 	bl	8004674 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b95      	ldr	r3, [pc, #596]	; (8002130 <crearAlarma+0x56c>)
 8001eda:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8001edc:	e73a      	b.n	8001d54 <crearAlarma+0x190>
	while(true){ //Selección de hora de apagado
		if(update_screen){
 8001ede:	4b95      	ldr	r3, [pc, #596]	; (8002134 <crearAlarma+0x570>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d017      	beq.n	8001f16 <crearAlarma+0x352>
			sprintf(alarma,"%02d.%02d",OFF.Hours,OFF.Minutes);
 8001ee6:	7c3b      	ldrb	r3, [r7, #16]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	7c7b      	ldrb	r3, [r7, #17]
 8001eec:	f107 0008 	add.w	r0, r7, #8
 8001ef0:	4991      	ldr	r1, [pc, #580]	; (8002138 <crearAlarma+0x574>)
 8001ef2:	f005 f971 	bl	80071d8 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001ef6:	4b91      	ldr	r3, [pc, #580]	; (800213c <crearAlarma+0x578>)
 8001ef8:	f107 0108 	add.w	r1, r7, #8
 8001efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f00:	9202      	str	r2, [sp, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	9201      	str	r2, [sp, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	9200      	str	r2, [sp, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	211e      	movs	r1, #30
 8001f10:	2024      	movs	r0, #36	; 0x24
 8001f12:	f001 f900 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8001f16:	2101      	movs	r1, #1
 8001f18:	4882      	ldr	r0, [pc, #520]	; (8002124 <crearAlarma+0x560>)
 8001f1a:	f002 fbab 	bl	8004674 <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d117      	bne.n	8001f54 <crearAlarma+0x390>
 8001f24:	4b80      	ldr	r3, [pc, #512]	; (8002128 <crearAlarma+0x564>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d010      	beq.n	8001f54 <crearAlarma+0x390>
			if(OFF.Hours == 23){
 8001f32:	7c3b      	ldrb	r3, [r7, #16]
 8001f34:	2b17      	cmp	r3, #23
 8001f36:	d102      	bne.n	8001f3e <crearAlarma+0x37a>
				OFF.Hours = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	743b      	strb	r3, [r7, #16]
 8001f3c:	e003      	b.n	8001f46 <crearAlarma+0x382>
			}
			else{
				OFF.Hours++;
 8001f3e:	7c3b      	ldrb	r3, [r7, #16]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	743b      	strb	r3, [r7, #16]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f46:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <crearAlarma+0x570>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	4b7c      	ldr	r3, [pc, #496]	; (8002140 <crearAlarma+0x57c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001f54:	2104      	movs	r1, #4
 8001f56:	4873      	ldr	r0, [pc, #460]	; (8002124 <crearAlarma+0x560>)
 8001f58:	f002 fb8c 	bl	8004674 <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d117      	bne.n	8001f92 <crearAlarma+0x3ce>
 8001f62:	4b72      	ldr	r3, [pc, #456]	; (800212c <crearAlarma+0x568>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	f083 0301 	eor.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <crearAlarma+0x3ce>
			if(OFF.Hours == 0){
 8001f70:	7c3b      	ldrb	r3, [r7, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <crearAlarma+0x3b8>
				OFF.Hours = 23;
 8001f76:	2317      	movs	r3, #23
 8001f78:	743b      	strb	r3, [r7, #16]
 8001f7a:	e003      	b.n	8001f84 <crearAlarma+0x3c0>
			}
			else{
				OFF.Hours--;
 8001f7c:	7c3b      	ldrb	r3, [r7, #16]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	743b      	strb	r3, [r7, #16]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f84:	4b6b      	ldr	r3, [pc, #428]	; (8002134 <crearAlarma+0x570>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <crearAlarma+0x57c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001f92:	2108      	movs	r1, #8
 8001f94:	4863      	ldr	r0, [pc, #396]	; (8002124 <crearAlarma+0x560>)
 8001f96:	f002 fb6d 	bl	8004674 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10a      	bne.n	8001fb6 <crearAlarma+0x3f2>
 8001fa0:	4b63      	ldr	r3, [pc, #396]	; (8002130 <crearAlarma+0x56c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f083 0301 	eor.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <crearAlarma+0x3f2>
			button2 = 1;
 8001fae:	4b60      	ldr	r3, [pc, #384]	; (8002130 <crearAlarma+0x56c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
			break;
 8001fb4:	e024      	b.n	8002000 <crearAlarma+0x43c>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	485a      	ldr	r0, [pc, #360]	; (8002124 <crearAlarma+0x560>)
 8001fba:	f002 fb5b 	bl	8004674 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b57      	ldr	r3, [pc, #348]	; (8002128 <crearAlarma+0x564>)
 8001fcc:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001fce:	2104      	movs	r1, #4
 8001fd0:	4854      	ldr	r0, [pc, #336]	; (8002124 <crearAlarma+0x560>)
 8001fd2:	f002 fb4f 	bl	8004674 <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b52      	ldr	r3, [pc, #328]	; (800212c <crearAlarma+0x568>)
 8001fe4:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	484e      	ldr	r0, [pc, #312]	; (8002124 <crearAlarma+0x560>)
 8001fea:	f002 fb43 	bl	8004674 <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <crearAlarma+0x56c>)
 8001ffc:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8001ffe:	e76e      	b.n	8001ede <crearAlarma+0x31a>
	}
	while(true){ //Selección de minuto de apagado
		if(update_screen){
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <crearAlarma+0x570>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d017      	beq.n	8002038 <crearAlarma+0x474>
			sprintf(alarma,"%02d.%02d",OFF.Hours,OFF.Minutes);
 8002008:	7c3b      	ldrb	r3, [r7, #16]
 800200a:	461a      	mov	r2, r3
 800200c:	7c7b      	ldrb	r3, [r7, #17]
 800200e:	f107 0008 	add.w	r0, r7, #8
 8002012:	4949      	ldr	r1, [pc, #292]	; (8002138 <crearAlarma+0x574>)
 8002014:	f005 f8e0 	bl	80071d8 <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002018:	4b48      	ldr	r3, [pc, #288]	; (800213c <crearAlarma+0x578>)
 800201a:	f107 0108 	add.w	r1, r7, #8
 800201e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002022:	9202      	str	r2, [sp, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	9201      	str	r2, [sp, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	9200      	str	r2, [sp, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	460a      	mov	r2, r1
 8002030:	211e      	movs	r1, #30
 8002032:	2024      	movs	r0, #36	; 0x24
 8002034:	f001 f86f 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8002038:	2101      	movs	r1, #1
 800203a:	483a      	ldr	r0, [pc, #232]	; (8002124 <crearAlarma+0x560>)
 800203c:	f002 fb1a 	bl	8004674 <HAL_GPIO_ReadPin>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	d117      	bne.n	8002076 <crearAlarma+0x4b2>
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <crearAlarma+0x564>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <crearAlarma+0x4b2>
			if(OFF.Minutes == 59){
 8002054:	7c7b      	ldrb	r3, [r7, #17]
 8002056:	2b3b      	cmp	r3, #59	; 0x3b
 8002058:	d102      	bne.n	8002060 <crearAlarma+0x49c>
				OFF.Minutes = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	747b      	strb	r3, [r7, #17]
 800205e:	e003      	b.n	8002068 <crearAlarma+0x4a4>
			}
			else{
				OFF.Minutes++;
 8002060:	7c7b      	ldrb	r3, [r7, #17]
 8002062:	3301      	adds	r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	747b      	strb	r3, [r7, #17]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <crearAlarma+0x570>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	4b34      	ldr	r3, [pc, #208]	; (8002140 <crearAlarma+0x57c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002076:	2104      	movs	r1, #4
 8002078:	482a      	ldr	r0, [pc, #168]	; (8002124 <crearAlarma+0x560>)
 800207a:	f002 fafb 	bl	8004674 <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	2b01      	cmp	r3, #1
 8002082:	d117      	bne.n	80020b4 <crearAlarma+0x4f0>
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <crearAlarma+0x568>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f083 0301 	eor.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d010      	beq.n	80020b4 <crearAlarma+0x4f0>
			if(OFF.Minutes == 0){
 8002092:	7c7b      	ldrb	r3, [r7, #17]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <crearAlarma+0x4da>
				OFF.Minutes = 59;
 8002098:	233b      	movs	r3, #59	; 0x3b
 800209a:	747b      	strb	r3, [r7, #17]
 800209c:	e003      	b.n	80020a6 <crearAlarma+0x4e2>
			}
			else{
				OFF.Minutes--;
 800209e:	7c7b      	ldrb	r3, [r7, #17]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	747b      	strb	r3, [r7, #17]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <crearAlarma+0x570>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <crearAlarma+0x57c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 80020b4:	2108      	movs	r1, #8
 80020b6:	481b      	ldr	r0, [pc, #108]	; (8002124 <crearAlarma+0x560>)
 80020b8:	f002 fadc 	bl	8004674 <HAL_GPIO_ReadPin>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10a      	bne.n	80020d8 <crearAlarma+0x514>
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <crearAlarma+0x56c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <crearAlarma+0x514>
			button2 = 1;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <crearAlarma+0x56c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
			break;
 80020d6:	e035      	b.n	8002144 <crearAlarma+0x580>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80020d8:	2101      	movs	r1, #1
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <crearAlarma+0x560>)
 80020dc:	f002 faca 	bl	8004674 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <crearAlarma+0x564>)
 80020ee:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80020f0:	2104      	movs	r1, #4
 80020f2:	480c      	ldr	r0, [pc, #48]	; (8002124 <crearAlarma+0x560>)
 80020f4:	f002 fabe 	bl	8004674 <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <crearAlarma+0x568>)
 8002106:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002108:	2108      	movs	r1, #8
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <crearAlarma+0x560>)
 800210c:	f002 fab2 	bl	8004674 <HAL_GPIO_ReadPin>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <crearAlarma+0x56c>)
 800211e:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8002120:	e76e      	b.n	8002000 <crearAlarma+0x43c>
 8002122:	bf00      	nop
 8002124:	40020000 	.word	0x40020000
 8002128:	20000218 	.word	0x20000218
 800212c:	20000219 	.word	0x20000219
 8002130:	2000021a 	.word	0x2000021a
 8002134:	2000001b 	.word	0x2000001b
 8002138:	08007914 	.word	0x08007914
 800213c:	20000008 	.word	0x20000008
 8002140:	20000184 	.word	0x20000184
	}
	returnVal[0] = ON;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	461d      	mov	r5, r3
 8002148:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800214c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	602b      	str	r3, [r5, #0]
	returnVal[1] = OFF;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3314      	adds	r3, #20
 8002158:	461d      	mov	r5, r3
 800215a:	f107 0410 	add.w	r4, r7, #16
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	602b      	str	r3, [r5, #0]
}
 8002166:	bf00      	nop
 8002168:	3738      	adds	r7, #56	; 0x38
 800216a:	46bd      	mov	sp, r7
 800216c:	bdb0      	pop	{r4, r5, r7, pc}
 800216e:	bf00      	nop

08002170 <CambiarHora>:
//misma forma.
//La lectura de los botones se hace por polling, cad sección se encuentra dentro de un bucle
//infinito el cual el botón de la derecha rompe para pasar a la siguiente sección de código.
//Una vez que se han elegido valores para la hora y los minutos se guarda el valor de la
//variable Time en el RTC
void CambiarHora(){
 8002170:	b5b0      	push	{r4, r5, r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af04      	add	r7, sp, #16
	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002176:	4ba5      	ldr	r3, [pc, #660]	; (800240c <CambiarHora+0x29c>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	4ba4      	ldr	r3, [pc, #656]	; (8002410 <CambiarHora+0x2a0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2200      	movs	r2, #0
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_TimeTypeDef Time = sTime;
 8002184:	4ba3      	ldr	r3, [pc, #652]	; (8002414 <CambiarHora+0x2a4>)
 8002186:	f107 040c 	add.w	r4, r7, #12
 800218a:	461d      	mov	r5, r3
 800218c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002190:	682b      	ldr	r3, [r5, #0]
 8002192:	6023      	str	r3, [r4, #0]
	ST7735_FillScreenFast(ST7735_CYAN);
 8002194:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002198:	f001 f88c 	bl	80032b4 <ST7735_FillScreenFast>
	ST7735_WriteString(42, 10, "Hora", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 800219c:	4b9e      	ldr	r3, [pc, #632]	; (8002418 <CambiarHora+0x2a8>)
 800219e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a2:	9202      	str	r2, [sp, #8]
 80021a4:	2200      	movs	r2, #0
 80021a6:	9201      	str	r2, [sp, #4]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	9200      	str	r2, [sp, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a9b      	ldr	r2, [pc, #620]	; (800241c <CambiarHora+0x2ac>)
 80021b0:	210a      	movs	r1, #10
 80021b2:	202a      	movs	r0, #42	; 0x2a
 80021b4:	f000 ffaf 	bl	8003116 <ST7735_WriteString>
	char hora[6];
	while(true){ //Selección de hora de encendido
		if(update_screen){
 80021b8:	4b94      	ldr	r3, [pc, #592]	; (800240c <CambiarHora+0x29c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <CambiarHora+0x7c>
			sprintf(hora,"%02d:%02d",Time.Hours,Time.Minutes);
 80021c0:	7b3b      	ldrb	r3, [r7, #12]
 80021c2:	461a      	mov	r2, r3
 80021c4:	7b7b      	ldrb	r3, [r7, #13]
 80021c6:	1d38      	adds	r0, r7, #4
 80021c8:	4995      	ldr	r1, [pc, #596]	; (8002420 <CambiarHora+0x2b0>)
 80021ca:	f005 f805 	bl	80071d8 <siprintf>
			ST7735_WriteString(36, 40, hora, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80021ce:	4b95      	ldr	r3, [pc, #596]	; (8002424 <CambiarHora+0x2b4>)
 80021d0:	1d39      	adds	r1, r7, #4
 80021d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d6:	9202      	str	r2, [sp, #8]
 80021d8:	2200      	movs	r2, #0
 80021da:	9201      	str	r2, [sp, #4]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	9200      	str	r2, [sp, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	460a      	mov	r2, r1
 80021e4:	2128      	movs	r1, #40	; 0x28
 80021e6:	2024      	movs	r0, #36	; 0x24
 80021e8:	f000 ff95 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80021ec:	2101      	movs	r1, #1
 80021ee:	488e      	ldr	r0, [pc, #568]	; (8002428 <CambiarHora+0x2b8>)
 80021f0:	f002 fa40 	bl	8004674 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d117      	bne.n	800222a <CambiarHora+0xba>
 80021fa:	4b8c      	ldr	r3, [pc, #560]	; (800242c <CambiarHora+0x2bc>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d010      	beq.n	800222a <CambiarHora+0xba>
			if(Time.Hours == 23){
 8002208:	7b3b      	ldrb	r3, [r7, #12]
 800220a:	2b17      	cmp	r3, #23
 800220c:	d102      	bne.n	8002214 <CambiarHora+0xa4>
				Time.Hours = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	733b      	strb	r3, [r7, #12]
 8002212:	e003      	b.n	800221c <CambiarHora+0xac>
			}
			else{
				Time.Hours++;
 8002214:	7b3b      	ldrb	r3, [r7, #12]
 8002216:	3301      	adds	r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	733b      	strb	r3, [r7, #12]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <CambiarHora+0x29c>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <CambiarHora+0x2a0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 800222a:	2104      	movs	r1, #4
 800222c:	487e      	ldr	r0, [pc, #504]	; (8002428 <CambiarHora+0x2b8>)
 800222e:	f002 fa21 	bl	8004674 <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	d117      	bne.n	8002268 <CambiarHora+0xf8>
 8002238:	4b7d      	ldr	r3, [pc, #500]	; (8002430 <CambiarHora+0x2c0>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <CambiarHora+0xf8>
			if(Time.Hours == 0){
 8002246:	7b3b      	ldrb	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <CambiarHora+0xe2>
				Time.Hours = 23;
 800224c:	2317      	movs	r3, #23
 800224e:	733b      	strb	r3, [r7, #12]
 8002250:	e003      	b.n	800225a <CambiarHora+0xea>
			}
			else{
				Time.Hours--;
 8002252:	7b3b      	ldrb	r3, [r7, #12]
 8002254:	3b01      	subs	r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	733b      	strb	r3, [r7, #12]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800225a:	4b6c      	ldr	r3, [pc, #432]	; (800240c <CambiarHora+0x29c>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <CambiarHora+0x2a0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8002268:	2108      	movs	r1, #8
 800226a:	486f      	ldr	r0, [pc, #444]	; (8002428 <CambiarHora+0x2b8>)
 800226c:	f002 fa02 	bl	8004674 <HAL_GPIO_ReadPin>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10a      	bne.n	800228c <CambiarHora+0x11c>
 8002276:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <CambiarHora+0x2c4>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <CambiarHora+0x11c>
			button2 = 1;
 8002284:	4b6b      	ldr	r3, [pc, #428]	; (8002434 <CambiarHora+0x2c4>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
			break;
 800228a:	e024      	b.n	80022d6 <CambiarHora+0x166>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800228c:	2101      	movs	r1, #1
 800228e:	4866      	ldr	r0, [pc, #408]	; (8002428 <CambiarHora+0x2b8>)
 8002290:	f002 f9f0 	bl	8004674 <HAL_GPIO_ReadPin>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b62      	ldr	r3, [pc, #392]	; (800242c <CambiarHora+0x2bc>)
 80022a2:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80022a4:	2104      	movs	r1, #4
 80022a6:	4860      	ldr	r0, [pc, #384]	; (8002428 <CambiarHora+0x2b8>)
 80022a8:	f002 f9e4 	bl	8004674 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <CambiarHora+0x2c0>)
 80022ba:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80022bc:	2108      	movs	r1, #8
 80022be:	485a      	ldr	r0, [pc, #360]	; (8002428 <CambiarHora+0x2b8>)
 80022c0:	f002 f9d8 	bl	8004674 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b58      	ldr	r3, [pc, #352]	; (8002434 <CambiarHora+0x2c4>)
 80022d2:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80022d4:	e770      	b.n	80021b8 <CambiarHora+0x48>
	}
	while(true){ //Selección de minuto de encendido
		if(update_screen){
 80022d6:	4b4d      	ldr	r3, [pc, #308]	; (800240c <CambiarHora+0x29c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <CambiarHora+0x19a>
			sprintf(hora,"%02d:%02d",Time.Hours,Time.Minutes);
 80022de:	7b3b      	ldrb	r3, [r7, #12]
 80022e0:	461a      	mov	r2, r3
 80022e2:	7b7b      	ldrb	r3, [r7, #13]
 80022e4:	1d38      	adds	r0, r7, #4
 80022e6:	494e      	ldr	r1, [pc, #312]	; (8002420 <CambiarHora+0x2b0>)
 80022e8:	f004 ff76 	bl	80071d8 <siprintf>
			ST7735_WriteString(36, 40, hora, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <CambiarHora+0x2b4>)
 80022ee:	1d39      	adds	r1, r7, #4
 80022f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f4:	9202      	str	r2, [sp, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	9201      	str	r2, [sp, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	9200      	str	r2, [sp, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	460a      	mov	r2, r1
 8002302:	2128      	movs	r1, #40	; 0x28
 8002304:	2024      	movs	r0, #36	; 0x24
 8002306:	f000 ff06 	bl	8003116 <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 800230a:	2101      	movs	r1, #1
 800230c:	4846      	ldr	r0, [pc, #280]	; (8002428 <CambiarHora+0x2b8>)
 800230e:	f002 f9b1 	bl	8004674 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d117      	bne.n	8002348 <CambiarHora+0x1d8>
 8002318:	4b44      	ldr	r3, [pc, #272]	; (800242c <CambiarHora+0x2bc>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f083 0301 	eor.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <CambiarHora+0x1d8>
			if(Time.Minutes == 59){
 8002326:	7b7b      	ldrb	r3, [r7, #13]
 8002328:	2b3b      	cmp	r3, #59	; 0x3b
 800232a:	d102      	bne.n	8002332 <CambiarHora+0x1c2>
				Time.Minutes = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	737b      	strb	r3, [r7, #13]
 8002330:	e003      	b.n	800233a <CambiarHora+0x1ca>
			}
			else{
				Time.Minutes++;
 8002332:	7b7b      	ldrb	r3, [r7, #13]
 8002334:	3301      	adds	r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	737b      	strb	r3, [r7, #13]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <CambiarHora+0x29c>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	4b33      	ldr	r3, [pc, #204]	; (8002410 <CambiarHora+0x2a0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002348:	2104      	movs	r1, #4
 800234a:	4837      	ldr	r0, [pc, #220]	; (8002428 <CambiarHora+0x2b8>)
 800234c:	f002 f992 	bl	8004674 <HAL_GPIO_ReadPin>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d117      	bne.n	8002386 <CambiarHora+0x216>
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <CambiarHora+0x2c0>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <CambiarHora+0x216>
			if(Time.Minutes == 0){
 8002364:	7b7b      	ldrb	r3, [r7, #13]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <CambiarHora+0x200>
				Time.Minutes = 59;
 800236a:	233b      	movs	r3, #59	; 0x3b
 800236c:	737b      	strb	r3, [r7, #13]
 800236e:	e003      	b.n	8002378 <CambiarHora+0x208>
			}
			else{
				Time.Minutes--;
 8002370:	7b7b      	ldrb	r3, [r7, #13]
 8002372:	3b01      	subs	r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	737b      	strb	r3, [r7, #13]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <CambiarHora+0x29c>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <CambiarHora+0x2a0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8002386:	2108      	movs	r1, #8
 8002388:	4827      	ldr	r0, [pc, #156]	; (8002428 <CambiarHora+0x2b8>)
 800238a:	f002 f973 	bl	8004674 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10a      	bne.n	80023aa <CambiarHora+0x23a>
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <CambiarHora+0x2c4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f083 0301 	eor.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <CambiarHora+0x23a>
			button2 = 1;
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <CambiarHora+0x2c4>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
			break;
 80023a8:	e024      	b.n	80023f4 <CambiarHora+0x284>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80023aa:	2101      	movs	r1, #1
 80023ac:	481e      	ldr	r0, [pc, #120]	; (8002428 <CambiarHora+0x2b8>)
 80023ae:	f002 f961 	bl	8004674 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <CambiarHora+0x2bc>)
 80023c0:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80023c2:	2104      	movs	r1, #4
 80023c4:	4818      	ldr	r0, [pc, #96]	; (8002428 <CambiarHora+0x2b8>)
 80023c6:	f002 f955 	bl	8004674 <HAL_GPIO_ReadPin>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <CambiarHora+0x2c0>)
 80023d8:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80023da:	2108      	movs	r1, #8
 80023dc:	4812      	ldr	r0, [pc, #72]	; (8002428 <CambiarHora+0x2b8>)
 80023de:	f002 f949 	bl	8004674 <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <CambiarHora+0x2c4>)
 80023f0:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80023f2:	e770      	b.n	80022d6 <CambiarHora+0x166>
	}
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	4619      	mov	r1, r3
 80023fc:	480e      	ldr	r0, [pc, #56]	; (8002438 <CambiarHora+0x2c8>)
 80023fe:	f002 ff4d 	bl	800529c <HAL_RTC_SetTime>
}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bdb0      	pop	{r4, r5, r7, pc}
 800240a:	bf00      	nop
 800240c:	2000001b 	.word	0x2000001b
 8002410:	20000184 	.word	0x20000184
 8002414:	200000ac 	.word	0x200000ac
 8002418:	20000010 	.word	0x20000010
 800241c:	08007920 	.word	0x08007920
 8002420:	08007904 	.word	0x08007904
 8002424:	20000008 	.word	0x20000008
 8002428:	40020000 	.word	0x40020000
 800242c:	20000218 	.word	0x20000218
 8002430:	20000219 	.word	0x20000219
 8002434:	2000021a 	.word	0x2000021a
 8002438:	2000010c 	.word	0x2000010c

0800243c <printMenu_Estado>:
//Pantalla de inicio que muestra información sobre el nivel de humedad y la hora del dispositivo
//
//Para esto, según el nivel de humedad dibuja una de 3 imágenes cuya información se encuentra
//almacenada dentro de testimg.h
//Una vez dibujada la imagen correcta se superpone la hora
void printMenu_Estado(){
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af02      	add	r7, sp, #8
	if(humedad > humedad_maxima){
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <printMenu_Estado+0x5c>)
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <printMenu_Estado+0x60>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d908      	bls.n	8002460 <printMenu_Estado+0x24>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)DEMASIADA_AGUA);
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <printMenu_Estado+0x64>)
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	23a0      	movs	r3, #160	; 0xa0
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	2100      	movs	r1, #0
 8002458:	2000      	movs	r0, #0
 800245a:	f000 ff3c 	bl	80032d6 <ST7735_DrawImage>
 800245e:	e016      	b.n	800248e <printMenu_Estado+0x52>
	}
	else if(humedad > humedad_minima){
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <printMenu_Estado+0x5c>)
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <printMenu_Estado+0x68>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d908      	bls.n	800247e <printMenu_Estado+0x42>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)BIEN_AGUA);
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <printMenu_Estado+0x6c>)
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	23a0      	movs	r3, #160	; 0xa0
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	2100      	movs	r1, #0
 8002476:	2000      	movs	r0, #0
 8002478:	f000 ff2d 	bl	80032d6 <ST7735_DrawImage>
 800247c:	e007      	b.n	800248e <printMenu_Estado+0x52>
	}
	else{
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)POCA_AGUA);
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <printMenu_Estado+0x70>)
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	23a0      	movs	r3, #160	; 0xa0
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	2100      	movs	r1, #0
 8002488:	2000      	movs	r0, #0
 800248a:	f000 ff24 	bl	80032d6 <ST7735_DrawImage>
	}
	printTime();
 800248e:	f000 fb5d 	bl	8002b4c <printTime>
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000217 	.word	0x20000217
 800249c:	20000019 	.word	0x20000019
 80024a0:	0800a194 	.word	0x0800a194
 80024a4:	20000018 	.word	0x20000018
 80024a8:	0801e194 	.word	0x0801e194
 80024ac:	08014194 	.word	0x08014194

080024b0 <printMenu_ModoActual>:
//
//Para esto llena la imagen del color base (cián) y dibuja un rectángulo blanco sobre
//el que escribe el nombre del modo en el que se encuentra actualmente
//
//TODO: Incluir debajo un aviso de que para cambiar el modo debe pulsar el botón de la derecha
void printMenu_ModoActual(){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af04      	add	r7, sp, #16
	ST7735_FillScreenFast(ST7735_CYAN);
 80024b6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80024ba:	f000 fefb 	bl	80032b4 <ST7735_FillScreenFast>
	ST7735_FillRectangleFast(5, 5, ST7735_WIDTH-10, 40, ST7735_WHITE);
 80024be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2328      	movs	r3, #40	; 0x28
 80024c6:	2276      	movs	r2, #118	; 0x76
 80024c8:	2105      	movs	r1, #5
 80024ca:	2005      	movs	r0, #5
 80024cc:	f000 fe6e 	bl	80031ac <ST7735_FillRectangleFast>
	switch(modo){
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <printMenu_ModoActual+0xec>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d032      	beq.n	800253e <printMenu_ModoActual+0x8e>
 80024d8:	2b02      	cmp	r3, #2
 80024da:	dc4d      	bgt.n	8002578 <printMenu_ModoActual+0xc8>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <printMenu_ModoActual+0x36>
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d00f      	beq.n	8002504 <printMenu_ModoActual+0x54>
 80024e4:	e048      	b.n	8002578 <printMenu_ModoActual+0xc8>
	case Manual:
		ST7735_WriteString(31, 16, "Manual", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <printMenu_ModoActual+0xf0>)
 80024e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ec:	9202      	str	r2, [sp, #8]
 80024ee:	2200      	movs	r2, #0
 80024f0:	9201      	str	r2, [sp, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	9200      	str	r2, [sp, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <printMenu_ModoActual+0xf4>)
 80024fa:	2110      	movs	r1, #16
 80024fc:	201f      	movs	r0, #31
 80024fe:	f000 fe0a 	bl	8003116 <ST7735_WriteString>
		break;
 8002502:	e048      	b.n	8002596 <printMenu_ModoActual+0xe6>
	case Automatico_Humedad:
		ST7735_WriteString(9, 6, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <printMenu_ModoActual+0xf0>)
 8002506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250a:	9202      	str	r2, [sp, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	9201      	str	r2, [sp, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	9200      	str	r2, [sp, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <printMenu_ModoActual+0xf8>)
 8002518:	2106      	movs	r1, #6
 800251a:	2009      	movs	r0, #9
 800251c:	f000 fdfb 	bl	8003116 <ST7735_WriteString>
		ST7735_WriteString(25, 26, "Humedad", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <printMenu_ModoActual+0xf0>)
 8002522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002526:	9202      	str	r2, [sp, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	9201      	str	r2, [sp, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	9200      	str	r2, [sp, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <printMenu_ModoActual+0xfc>)
 8002534:	211a      	movs	r1, #26
 8002536:	2019      	movs	r0, #25
 8002538:	f000 fded 	bl	8003116 <ST7735_WriteString>
		break;
 800253c:	e02b      	b.n	8002596 <printMenu_ModoActual+0xe6>
	case Automatico_Tiempo:
		ST7735_WriteString(9, 6, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <printMenu_ModoActual+0xf0>)
 8002540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002544:	9202      	str	r2, [sp, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	9200      	str	r2, [sp, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <printMenu_ModoActual+0xf8>)
 8002552:	2106      	movs	r1, #6
 8002554:	2009      	movs	r0, #9
 8002556:	f000 fdde 	bl	8003116 <ST7735_WriteString>
		ST7735_WriteString(31, 26, "Tiempo", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <printMenu_ModoActual+0xf0>)
 800255c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002560:	9202      	str	r2, [sp, #8]
 8002562:	2200      	movs	r2, #0
 8002564:	9201      	str	r2, [sp, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	9200      	str	r2, [sp, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <printMenu_ModoActual+0x100>)
 800256e:	211a      	movs	r1, #26
 8002570:	201f      	movs	r0, #31
 8002572:	f000 fdd0 	bl	8003116 <ST7735_WriteString>
		break;
 8002576:	e00e      	b.n	8002596 <printMenu_ModoActual+0xe6>
	default:
		ST7735_WriteString(36, 16, "Error", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <printMenu_ModoActual+0xf0>)
 800257a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257e:	9202      	str	r2, [sp, #8]
 8002580:	2200      	movs	r2, #0
 8002582:	9201      	str	r2, [sp, #4]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	9200      	str	r2, [sp, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <printMenu_ModoActual+0x104>)
 800258c:	2110      	movs	r1, #16
 800258e:	2024      	movs	r0, #36	; 0x24
 8002590:	f000 fdc1 	bl	8003116 <ST7735_WriteString>
		break;
 8002594:	bf00      	nop
	}
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000214 	.word	0x20000214
 80025a0:	20000008 	.word	0x20000008
 80025a4:	08007928 	.word	0x08007928
 80025a8:	08007930 	.word	0x08007930
 80025ac:	0800793c 	.word	0x0800793c
 80025b0:	08007944 	.word	0x08007944
 80025b4:	0800794c 	.word	0x0800794c

080025b8 <printMenu_CambioModo>:

//Pantalla que muestra los distintos modos de funcionamiento del sistema
//
//Para esto llena la imagen del color base (cián) y dibuja tres rectángulos blanco sobre
//los cuales escribe el nombre de los distintos modos en los que opera el sistema
void printMenu_CambioModo(){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af04      	add	r7, sp, #16
	ST7735_FillScreenFast(ST7735_CYAN);
 80025be:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80025c2:	f000 fe77 	bl	80032b4 <ST7735_FillScreenFast>
	ST7735_FillRectangleFast(5, 5, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80025c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2330      	movs	r3, #48	; 0x30
 80025ce:	2276      	movs	r2, #118	; 0x76
 80025d0:	2105      	movs	r1, #5
 80025d2:	2005      	movs	r0, #5
 80025d4:	f000 fdea 	bl	80031ac <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(5, 56, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80025d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2330      	movs	r3, #48	; 0x30
 80025e0:	2276      	movs	r2, #118	; 0x76
 80025e2:	2138      	movs	r1, #56	; 0x38
 80025e4:	2005      	movs	r0, #5
 80025e6:	f000 fde1 	bl	80031ac <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(5, 107, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80025ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2330      	movs	r3, #48	; 0x30
 80025f2:	2276      	movs	r2, #118	; 0x76
 80025f4:	216b      	movs	r1, #107	; 0x6b
 80025f6:	2005      	movs	r0, #5
 80025f8:	f000 fdd8 	bl	80031ac <ST7735_FillRectangleFast>

	ST7735_WriteString(31, 20, "Manual", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <printMenu_CambioModo+0xd8>)
 80025fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002602:	9202      	str	r2, [sp, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	9201      	str	r2, [sp, #4]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	9200      	str	r2, [sp, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <printMenu_CambioModo+0xdc>)
 8002610:	2114      	movs	r1, #20
 8002612:	201f      	movs	r0, #31
 8002614:	f000 fd7f 	bl	8003116 <ST7735_WriteString>

	ST7735_WriteString(9, 61, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <printMenu_CambioModo+0xd8>)
 800261a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261e:	9202      	str	r2, [sp, #8]
 8002620:	2200      	movs	r2, #0
 8002622:	9201      	str	r2, [sp, #4]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	9200      	str	r2, [sp, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <printMenu_CambioModo+0xe0>)
 800262c:	213d      	movs	r1, #61	; 0x3d
 800262e:	2009      	movs	r0, #9
 8002630:	f000 fd71 	bl	8003116 <ST7735_WriteString>
	ST7735_WriteString(25, 81, "Humedad", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <printMenu_CambioModo+0xd8>)
 8002636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800263a:	9202      	str	r2, [sp, #8]
 800263c:	2200      	movs	r2, #0
 800263e:	9201      	str	r2, [sp, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	9200      	str	r2, [sp, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <printMenu_CambioModo+0xe4>)
 8002648:	2151      	movs	r1, #81	; 0x51
 800264a:	2019      	movs	r0, #25
 800264c:	f000 fd63 	bl	8003116 <ST7735_WriteString>

	ST7735_WriteString(9, 112, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <printMenu_CambioModo+0xd8>)
 8002652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002656:	9202      	str	r2, [sp, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	9200      	str	r2, [sp, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <printMenu_CambioModo+0xe0>)
 8002664:	2170      	movs	r1, #112	; 0x70
 8002666:	2009      	movs	r0, #9
 8002668:	f000 fd55 	bl	8003116 <ST7735_WriteString>
	ST7735_WriteString(31, 132, "Tiempo", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <printMenu_CambioModo+0xd8>)
 800266e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002672:	9202      	str	r2, [sp, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	9201      	str	r2, [sp, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	9200      	str	r2, [sp, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <printMenu_CambioModo+0xe8>)
 8002680:	2184      	movs	r1, #132	; 0x84
 8002682:	201f      	movs	r0, #31
 8002684:	f000 fd47 	bl	8003116 <ST7735_WriteString>
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000008 	.word	0x20000008
 8002694:	08007928 	.word	0x08007928
 8002698:	08007930 	.word	0x08007930
 800269c:	0800793c 	.word	0x0800793c
 80026a0:	08007944 	.word	0x08007944

080026a4 <printSeleccion>:

/*Funciones auxiliares*/

//Dibuja los lados de un rectángulo verde con la intención de que marque al usuario la opción
//que está eligiendo
void printSeleccion(uint8_t altura){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
	for(int x = 5; x < ST7735_WIDTH-5; x++) {
 80026ae:	2305      	movs	r3, #5
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e052      	b.n	800275a <printSeleccion+0xb6>
		ST7735_DrawPixel(x, 5+(altura*51), ST7735_GREEN);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	b298      	uxth	r0, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	0052      	lsls	r2, r2, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	461a      	mov	r2, r3
 80026c4:	0111      	lsls	r1, r2, #4
 80026c6:	461a      	mov	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	4413      	add	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3305      	adds	r3, #5
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026d6:	4619      	mov	r1, r3
 80026d8:	f000 fc72 	bl	8002fc0 <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 6+(altura*51), ST7735_GREEN);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	b298      	uxth	r0, r3
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	0052      	lsls	r2, r2, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	461a      	mov	r2, r3
 80026ec:	0111      	lsls	r1, r2, #4
 80026ee:	461a      	mov	r2, r3
 80026f0:	460b      	mov	r3, r1
 80026f2:	4413      	add	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3306      	adds	r3, #6
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026fe:	4619      	mov	r1, r3
 8002700:	f000 fc5e 	bl	8002fc0 <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 5+48+(altura*51), ST7735_GREEN);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	b298      	uxth	r0, r3
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	0052      	lsls	r2, r2, #1
 8002710:	4413      	add	r3, r2
 8002712:	461a      	mov	r2, r3
 8002714:	0111      	lsls	r1, r2, #4
 8002716:	461a      	mov	r2, r3
 8002718:	460b      	mov	r3, r1
 800271a:	4413      	add	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	3335      	adds	r3, #53	; 0x35
 8002720:	b29b      	uxth	r3, r3
 8002722:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002726:	4619      	mov	r1, r3
 8002728:	f000 fc4a 	bl	8002fc0 <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 4+48+(altura*51), ST7735_GREEN);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	b298      	uxth	r0, r3
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	0052      	lsls	r2, r2, #1
 8002738:	4413      	add	r3, r2
 800273a:	461a      	mov	r2, r3
 800273c:	0111      	lsls	r1, r2, #4
 800273e:	461a      	mov	r2, r3
 8002740:	460b      	mov	r3, r1
 8002742:	4413      	add	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	3334      	adds	r3, #52	; 0x34
 8002748:	b29b      	uxth	r3, r3
 800274a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800274e:	4619      	mov	r1, r3
 8002750:	f000 fc36 	bl	8002fc0 <ST7735_DrawPixel>
	for(int x = 5; x < ST7735_WIDTH-5; x++) {
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3301      	adds	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b7a      	cmp	r3, #122	; 0x7a
 800275e:	dda9      	ble.n	80026b4 <printSeleccion+0x10>
	}

	for(int y = 5+(altura*51); y < 5+48+(altura*51); y++) {
 8002760:	79fa      	ldrb	r2, [r7, #7]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	011a      	lsls	r2, r3, #4
 800276a:	4413      	add	r3, r2
 800276c:	3305      	adds	r3, #5
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	e022      	b.n	80027b8 <printSeleccion+0x114>
		ST7735_DrawPixel(5, y, ST7735_GREEN);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800277a:	4619      	mov	r1, r3
 800277c:	2005      	movs	r0, #5
 800277e:	f000 fc1f 	bl	8002fc0 <ST7735_DrawPixel>
		ST7735_DrawPixel(6, y, ST7735_GREEN);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800278a:	4619      	mov	r1, r3
 800278c:	2006      	movs	r0, #6
 800278e:	f000 fc17 	bl	8002fc0 <ST7735_DrawPixel>
		ST7735_DrawPixel(ST7735_WIDTH-5, y, ST7735_GREEN);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800279a:	4619      	mov	r1, r3
 800279c:	207b      	movs	r0, #123	; 0x7b
 800279e:	f000 fc0f 	bl	8002fc0 <ST7735_DrawPixel>
		ST7735_DrawPixel(ST7735_WIDTH-6, y, ST7735_GREEN);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80027aa:	4619      	mov	r1, r3
 80027ac:	207a      	movs	r0, #122	; 0x7a
 80027ae:	f000 fc07 	bl	8002fc0 <ST7735_DrawPixel>
	for(int y = 5+(altura*51); y < 5+48+(altura*51); y++) {
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	79fa      	ldrb	r2, [r7, #7]
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	011a      	lsls	r2, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	3334      	adds	r3, #52	; 0x34
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	ddd2      	ble.n	8002772 <printSeleccion+0xce>
	}
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <printAlarma>:

//Dibuja la hora de inicio y de fin de una alarma determinada
void printAlarma(RTC_TimeTypeDef horaON, RTC_TimeTypeDef horaOFF, uint8_t altura){
 80027d8:	b084      	sub	sp, #16
 80027da:	b580      	push	{r7, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af04      	add	r7, sp, #16
 80027e0:	f107 0c18 	add.w	ip, r7, #24
 80027e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80027e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	0052      	lsls	r2, r2, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	0111      	lsls	r1, r2, #4
 80027f8:	461a      	mov	r2, r3
 80027fa:	460b      	mov	r3, r1
 80027fc:	4413      	add	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3305      	adds	r3, #5
 8002802:	b299      	uxth	r1, r3
 8002804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2330      	movs	r3, #48	; 0x30
 800280c:	2276      	movs	r2, #118	; 0x76
 800280e:	2005      	movs	r0, #5
 8002810:	f000 fccc 	bl	80031ac <ST7735_FillRectangleFast>
	char alarma[12];
	sprintf(alarma,"ON:  %02d:%02d",horaON.Hours,horaON.Minutes);
 8002814:	7e3b      	ldrb	r3, [r7, #24]
 8002816:	461a      	mov	r2, r3
 8002818:	7e7b      	ldrb	r3, [r7, #25]
 800281a:	1d38      	adds	r0, r7, #4
 800281c:	4925      	ldr	r1, [pc, #148]	; (80028b4 <printAlarma+0xdc>)
 800281e:	f004 fcdb 	bl	80071d8 <siprintf>
	ST7735_WriteString(10, 10+51*altura, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002822:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	4413      	add	r3, r2
 800282e:	461a      	mov	r2, r3
 8002830:	0111      	lsls	r1, r2, #4
 8002832:	461a      	mov	r2, r3
 8002834:	460b      	mov	r3, r1
 8002836:	4413      	add	r3, r2
 8002838:	b29b      	uxth	r3, r3
 800283a:	330a      	adds	r3, #10
 800283c:	b299      	uxth	r1, r3
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <printAlarma+0xe0>)
 8002840:	1d38      	adds	r0, r7, #4
 8002842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002846:	9202      	str	r2, [sp, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	9201      	str	r2, [sp, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	9200      	str	r2, [sp, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4602      	mov	r2, r0
 8002854:	200a      	movs	r0, #10
 8002856:	f000 fc5e 	bl	8003116 <ST7735_WriteString>
	sprintf(alarma,"OFF: %02d:%02d",horaOFF.Hours,horaOFF.Minutes);
 800285a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800285e:	461a      	mov	r2, r3
 8002860:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002864:	1d38      	adds	r0, r7, #4
 8002866:	4915      	ldr	r1, [pc, #84]	; (80028bc <printAlarma+0xe4>)
 8002868:	f004 fcb6 	bl	80071d8 <siprintf>
	ST7735_WriteString(10, 30+51*altura, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800286c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	0052      	lsls	r2, r2, #1
 8002876:	4413      	add	r3, r2
 8002878:	461a      	mov	r2, r3
 800287a:	0111      	lsls	r1, r2, #4
 800287c:	461a      	mov	r2, r3
 800287e:	460b      	mov	r3, r1
 8002880:	4413      	add	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	331e      	adds	r3, #30
 8002886:	b299      	uxth	r1, r3
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <printAlarma+0xe0>)
 800288a:	1d38      	adds	r0, r7, #4
 800288c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002890:	9202      	str	r2, [sp, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	9201      	str	r2, [sp, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	9200      	str	r2, [sp, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4602      	mov	r2, r0
 800289e:	200a      	movs	r0, #10
 80028a0:	f000 fc39 	bl	8003116 <ST7735_WriteString>
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028ae:	b004      	add	sp, #16
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	08007954 	.word	0x08007954
 80028b8:	20000008 	.word	0x20000008
 80028bc:	08007964 	.word	0x08007964

080028c0 <printCrearAlarma>:

//Dibuja el botón de creación de alarmas
void printCrearAlarma(uint8_t altura){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	0052      	lsls	r2, r2, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	0111      	lsls	r1, r2, #4
 80028d8:	461a      	mov	r2, r3
 80028da:	460b      	mov	r3, r1
 80028dc:	4413      	add	r3, r2
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3305      	adds	r3, #5
 80028e2:	b299      	uxth	r1, r3
 80028e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2330      	movs	r3, #48	; 0x30
 80028ec:	2276      	movs	r2, #118	; 0x76
 80028ee:	2005      	movs	r0, #5
 80028f0:	f000 fc5c 	bl	80031ac <ST7735_FillRectangleFast>
	for(uint16_t x = 0; x <= 17; x++){
 80028f4:	2300      	movs	r3, #0
 80028f6:	81fb      	strh	r3, [r7, #14]
 80028f8:	e08a      	b.n	8002a10 <printCrearAlarma+0x150>
		for(uint16_t y = 0; y <= 17; y++){
 80028fa:	2300      	movs	r3, #0
 80028fc:	81bb      	strh	r3, [r7, #12]
 80028fe:	e080      	b.n	8002a02 <printCrearAlarma+0x142>
			if(x*x+y*y < 289){
 8002900:	89fb      	ldrh	r3, [r7, #14]
 8002902:	89fa      	ldrh	r2, [r7, #14]
 8002904:	fb03 f202 	mul.w	r2, r3, r2
 8002908:	89bb      	ldrh	r3, [r7, #12]
 800290a:	89b9      	ldrh	r1, [r7, #12]
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002916:	dc71      	bgt.n	80029fc <printCrearAlarma+0x13c>
				if(x < 3 && y < 12){
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d802      	bhi.n	8002924 <printCrearAlarma+0x64>
 800291e:	89bb      	ldrh	r3, [r7, #12]
 8002920:	2b0b      	cmp	r3, #11
 8002922:	d968      	bls.n	80029f6 <printCrearAlarma+0x136>
					continue;
				}
				if(x < 12 && y < 3){
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	2b0b      	cmp	r3, #11
 8002928:	d802      	bhi.n	8002930 <printCrearAlarma+0x70>
 800292a:	89bb      	ldrh	r3, [r7, #12]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d964      	bls.n	80029fa <printCrearAlarma+0x13a>
					continue;
				}
				ST7735_DrawPixel(64+x, (29+51*altura)+y, ST7735_GREEN);
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	3340      	adds	r3, #64	; 0x40
 8002934:	b298      	uxth	r0, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	0052      	lsls	r2, r2, #1
 800293e:	4413      	add	r3, r2
 8002940:	461a      	mov	r2, r3
 8002942:	0111      	lsls	r1, r2, #4
 8002944:	461a      	mov	r2, r3
 8002946:	460b      	mov	r3, r1
 8002948:	4413      	add	r3, r2
 800294a:	b29a      	uxth	r2, r3
 800294c:	89bb      	ldrh	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	b29b      	uxth	r3, r3
 8002952:	331d      	adds	r3, #29
 8002954:	b29b      	uxth	r3, r3
 8002956:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800295a:	4619      	mov	r1, r3
 800295c:	f000 fb30 	bl	8002fc0 <ST7735_DrawPixel>
				ST7735_DrawPixel(64+x, (29+51*altura)-y, ST7735_GREEN);
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	3340      	adds	r3, #64	; 0x40
 8002964:	b298      	uxth	r0, r3
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	b29b      	uxth	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	0052      	lsls	r2, r2, #1
 800296e:	4413      	add	r3, r2
 8002970:	461a      	mov	r2, r3
 8002972:	0111      	lsls	r1, r2, #4
 8002974:	461a      	mov	r2, r3
 8002976:	460b      	mov	r3, r1
 8002978:	4413      	add	r3, r2
 800297a:	b29a      	uxth	r2, r3
 800297c:	89bb      	ldrh	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	b29b      	uxth	r3, r3
 8002982:	331d      	adds	r3, #29
 8002984:	b29b      	uxth	r3, r3
 8002986:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800298a:	4619      	mov	r1, r3
 800298c:	f000 fb18 	bl	8002fc0 <ST7735_DrawPixel>
				ST7735_DrawPixel(64-x, (29+51*altura)+y, ST7735_GREEN);
 8002990:	89fb      	ldrh	r3, [r7, #14]
 8002992:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002996:	b298      	uxth	r0, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	0052      	lsls	r2, r2, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	461a      	mov	r2, r3
 80029a4:	0111      	lsls	r1, r2, #4
 80029a6:	461a      	mov	r2, r3
 80029a8:	460b      	mov	r3, r1
 80029aa:	4413      	add	r3, r2
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	89bb      	ldrh	r3, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	331d      	adds	r3, #29
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80029bc:	4619      	mov	r1, r3
 80029be:	f000 faff 	bl	8002fc0 <ST7735_DrawPixel>
				ST7735_DrawPixel(64-x, (29+51*altura)-y, ST7735_GREEN);
 80029c2:	89fb      	ldrh	r3, [r7, #14]
 80029c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80029c8:	b298      	uxth	r0, r3
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	0052      	lsls	r2, r2, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	0111      	lsls	r1, r2, #4
 80029d8:	461a      	mov	r2, r3
 80029da:	460b      	mov	r3, r1
 80029dc:	4413      	add	r3, r2
 80029de:	b29a      	uxth	r2, r3
 80029e0:	89bb      	ldrh	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	331d      	adds	r3, #29
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80029ee:	4619      	mov	r1, r3
 80029f0:	f000 fae6 	bl	8002fc0 <ST7735_DrawPixel>
 80029f4:	e002      	b.n	80029fc <printCrearAlarma+0x13c>
					continue;
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <printCrearAlarma+0x13c>
					continue;
 80029fa:	bf00      	nop
		for(uint16_t y = 0; y <= 17; y++){
 80029fc:	89bb      	ldrh	r3, [r7, #12]
 80029fe:	3301      	adds	r3, #1
 8002a00:	81bb      	strh	r3, [r7, #12]
 8002a02:	89bb      	ldrh	r3, [r7, #12]
 8002a04:	2b11      	cmp	r3, #17
 8002a06:	f67f af7b 	bls.w	8002900 <printCrearAlarma+0x40>
	for(uint16_t x = 0; x <= 17; x++){
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	81fb      	strh	r3, [r7, #14]
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	2b11      	cmp	r3, #17
 8002a14:	f67f af71 	bls.w	80028fa <printCrearAlarma+0x3a>
			}
		}
	}
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <printOK>:

//Dibuja el botón de "OK"
void printOK(uint8_t altura){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	0052      	lsls	r2, r2, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	0111      	lsls	r1, r2, #4
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4413      	add	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3305      	adds	r3, #5
 8002a46:	b299      	uxth	r1, r3
 8002a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2330      	movs	r3, #48	; 0x30
 8002a50:	2276      	movs	r2, #118	; 0x76
 8002a52:	2005      	movs	r0, #5
 8002a54:	f000 fbaa 	bl	80031ac <ST7735_FillRectangleFast>
	ST7735_WriteString(48, 16+51*altura, "OK", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	0052      	lsls	r2, r2, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	461a      	mov	r2, r3
 8002a64:	0111      	lsls	r1, r2, #4
 8002a66:	461a      	mov	r2, r3
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3310      	adds	r3, #16
 8002a70:	b299      	uxth	r1, r3
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <printOK+0x70>)
 8002a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a78:	9202      	str	r2, [sp, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	9201      	str	r2, [sp, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	9200      	str	r2, [sp, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <printOK+0x74>)
 8002a86:	2030      	movs	r0, #48	; 0x30
 8002a88:	f000 fb45 	bl	8003116 <ST7735_WriteString>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000010 	.word	0x20000010
 8002a98:	08007974 	.word	0x08007974

08002a9c <printCambiarHora>:

//Dibuja el botón de cambiar hora
void printCambiarHora(uint8_t altura){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af04      	add	r7, sp, #16
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	0052      	lsls	r2, r2, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	0111      	lsls	r1, r2, #4
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4413      	add	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3305      	adds	r3, #5
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2330      	movs	r3, #48	; 0x30
 8002ac8:	2276      	movs	r2, #118	; 0x76
 8002aca:	2005      	movs	r0, #5
 8002acc:	f000 fb6e 	bl	80031ac <ST7735_FillRectangleFast>
	ST7735_WriteString(25, 10+51*altura, "Cambiar", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	0052      	lsls	r2, r2, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	461a      	mov	r2, r3
 8002adc:	0111      	lsls	r1, r2, #4
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	330a      	adds	r3, #10
 8002ae8:	b299      	uxth	r1, r3
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <printCambiarHora+0xa4>)
 8002aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	9201      	str	r2, [sp, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <printCambiarHora+0xa8>)
 8002afe:	2019      	movs	r0, #25
 8002b00:	f000 fb09 	bl	8003116 <ST7735_WriteString>
	ST7735_WriteString(42, 30+51*altura, "Hora", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	0052      	lsls	r2, r2, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	461a      	mov	r2, r3
 8002b10:	0111      	lsls	r1, r2, #4
 8002b12:	461a      	mov	r2, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	4413      	add	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	331e      	adds	r3, #30
 8002b1c:	b299      	uxth	r1, r3
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <printCambiarHora+0xa4>)
 8002b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b24:	9202      	str	r2, [sp, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	9200      	str	r2, [sp, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <printCambiarHora+0xac>)
 8002b32:	202a      	movs	r0, #42	; 0x2a
 8002b34:	f000 faef 	bl	8003116 <ST7735_WriteString>
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000008 	.word	0x20000008
 8002b44:	08007978 	.word	0x08007978
 8002b48:	08007920 	.word	0x08007920

08002b4c <printTime>:

//Dibuja la hora actual del sistema en la esquina superior derecha
void printTime(){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af04      	add	r7, sp, #16
	char hora[6];
	sprintf(hora,"%02d:%02d",sTime.Hours,sTime.Minutes);
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <printTime+0x40>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <printTime+0x40>)
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	490c      	ldr	r1, [pc, #48]	; (8002b90 <printTime+0x44>)
 8002b60:	f004 fb3a 	bl	80071d8 <siprintf>
	ST7735_WriteString(92, 0, hora, Font_7x10, ST7735_BLACK, ST7735_WHITE);
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <printTime+0x48>)
 8002b66:	4639      	mov	r1, r7
 8002b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6c:	9202      	str	r2, [sp, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	9201      	str	r2, [sp, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	9200      	str	r2, [sp, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	460a      	mov	r2, r1
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	205c      	movs	r0, #92	; 0x5c
 8002b7e:	f000 faca 	bl	8003116 <ST7735_WriteString>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200000ac 	.word	0x200000ac
 8002b90:	08007904 	.word	0x08007904
 8002b94:	20000000 	.word	0x20000000

08002b98 <HAL_GPIO_EXTI_Callback>:
 *GESTIÓN DE INTERRUPCIONES*
 ***************************/

//Interrupción de botones
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_press = 0;
	if(HAL_GetTick() < last_press){ //Debouncer
 8002ba2:	f000 fe7d 	bl	80038a0 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d31f      	bcc.n	8002bf0 <HAL_GPIO_EXTI_Callback+0x58>
		return;
	}

	if(GPIO_Pin==GPIO_PIN_0){
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_GPIO_EXTI_Callback+0x24>
		AbrirValvula();
 8002bb6:	f7fe f84d 	bl	8000c54 <AbrirValvula>
 8002bba:	e012      	b.n	8002be2 <HAL_GPIO_EXTI_Callback+0x4a>
	}
	else if(GPIO_Pin==GPIO_PIN_2){
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d102      	bne.n	8002bc8 <HAL_GPIO_EXTI_Callback+0x30>
		CerrarValvula();
 8002bc2:	f7fe f853 	bl	8000c6c <CerrarValvula>
 8002bc6:	e00c      	b.n	8002be2 <HAL_GPIO_EXTI_Callback+0x4a>
	}
	else if(GPIO_Pin==GPIO_PIN_3){
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d109      	bne.n	8002be2 <HAL_GPIO_EXTI_Callback+0x4a>
		pantalla = Modo_Actual;
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_GPIO_EXTI_Callback+0x64>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
		update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_GPIO_EXTI_Callback+0x68>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	last_press = HAL_GetTick()+50;
 8002be2:	f000 fe5d 	bl	80038a0 <HAL_GetTick>
 8002be6:	4603      	mov	r3, r0
 8002be8:	3332      	adds	r3, #50	; 0x32
 8002bea:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e000      	b.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x5a>
		return;
 8002bf0:	bf00      	nop
}
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000234 	.word	0x20000234
 8002bfc:	20000215 	.word	0x20000215
 8002c00:	2000001b 	.word	0x2000001b
 8002c04:	20000184 	.word	0x20000184

08002c08 <HAL_RTC_AlarmAEventCallback>:
//
//Según la flag "isTimeToTurnOn", enciende o apaga la electroválvula
//y la invierte para la próxima alarma.
//Luego llama a la función "nextAlarma()" para generar la siguiente interrupción
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, isTimeToTurnOn);
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c1a:	4807      	ldr	r0, [pc, #28]	; (8002c38 <HAL_RTC_AlarmAEventCallback+0x30>)
 8002c1c:	f001 fd42 	bl	80046a4 <HAL_GPIO_WritePin>
	isTimeToTurnOn ^= isTimeToTurnOn;
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
	nextAlarma();
 8002c26:	f000 f853 	bl	8002cd0 <nextAlarma>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000001c 	.word	0x2000001c
 8002c38:	40020c00 	.word	0x40020c00

08002c3c <HAL_TIM_PeriodElapsedCallback>:
//Interrupción de temporizador
//
//Si está en la pantalla estado, usa esta interrupción para actualizar la hora mostrada en la pantalla
//De lo contrario, si salta, significa que el usuario lleva mucho tiempo sin interactuar con el menú y
//regresa a la pantalla de estado.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d12b      	bne.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(pantalla == Estado)
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002c56:	2200      	movs	r2, #0
 8002c58:	4917      	ldr	r1, [pc, #92]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002c5a:	4818      	ldr	r0, [pc, #96]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c5c:	f002 fbb8 	bl	80053d0 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); //La fecha no se usa
 8002c60:	2200      	movs	r2, #0
 8002c62:	4917      	ldr	r1, [pc, #92]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002c64:	4815      	ldr	r0, [pc, #84]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c66:	f002 fc95 	bl	8005594 <HAL_RTC_GetDate>
			//Linea añadida porque para que HAL_RTC_GetTime funcione correctamente, es necesario
			//Llamar a HAL_RTC_GetDate despues
			printTime();
 8002c6a:	f7ff ff6f 	bl	8002b4c <printTime>
			}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		#endif
	}
}
 8002c6e:	e01a      	b.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			pantalla = Estado;
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c84:	2009      	movs	r0, #9
 8002c86:	f001 fb48 	bl	800431a <HAL_NVIC_EnableIRQ>
			if(modo == Manual){
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_TIM_PeriodElapsedCallback+0x62>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c92:	2006      	movs	r0, #6
 8002c94:	f001 fb41 	bl	800431a <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c98:	2008      	movs	r0, #8
 8002c9a:	f001 fb3e 	bl	800431a <HAL_NVIC_EnableIRQ>
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	20000215 	.word	0x20000215
 8002cb8:	200000ac 	.word	0x200000ac
 8002cbc:	2000010c 	.word	0x2000010c
 8002cc0:	200000c0 	.word	0x200000c0
 8002cc4:	2000001b 	.word	0x2000001b
 8002cc8:	20000184 	.word	0x20000184
 8002ccc:	20000214 	.word	0x20000214

08002cd0 <nextAlarma>:
//alarma se debe encender o apagar la bomba, en función de esto toma la siguiente
//hora del vector de horas de encendido o del vector de horas de apagado
//El índice "siguiente_alarma" se incrementa en 1 cada vez que se genera una
//interrupción de apagado de la bomba, ya que el apagado se considera el fin de
//cada ciclo de alarmas
void nextAlarma(){
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0

	RTC_AlarmTypeDef sAlarm = {0};
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	2228      	movs	r2, #40	; 0x28
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 f97b 	bl	8006fd8 <memset>

	if(isTimeToTurnOn)
 8002ce2:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <nextAlarma+0xd4>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <nextAlarma+0x48>
	{
		sAlarm.AlarmTime.Hours = alarmasON[siguiente_alarma].Hours;
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <nextAlarma+0xd8>)
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <nextAlarma+0xdc>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = alarmasON[siguiente_alarma].Minutes;
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <nextAlarma+0xd8>)
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <nextAlarma+0xdc>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	707b      	strb	r3, [r7, #1]
 8002d16:	e021      	b.n	8002d5c <nextAlarma+0x8c>
	}
	else
	{
		sAlarm.AlarmTime.Hours = alarmasOFF[siguiente_alarma].Hours;
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <nextAlarma+0xe0>)
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	4b23      	ldr	r3, [pc, #140]	; (8002dac <nextAlarma+0xdc>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = alarmasOFF[siguiente_alarma].Minutes;
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <nextAlarma+0xe0>)
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <nextAlarma+0xdc>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	707b      	strb	r3, [r7, #1]
		siguiente_alarma = (siguiente_alarma+1)%num_alarmas;
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <nextAlarma+0xdc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <nextAlarma+0xe4>)
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d52:	fb01 f202 	mul.w	r2, r1, r2
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <nextAlarma+0xdc>)
 8002d5a:	6013      	str	r3, [r2, #0]
	}


	sAlarm.AlarmTime.Seconds = 0x0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x31;
 8002d78:	2331      	movs	r3, #49	; 0x31
 8002d7a:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8002d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002d84:	463b      	mov	r3, r7
 8002d86:	2200      	movs	r2, #0
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480b      	ldr	r0, [pc, #44]	; (8002db8 <nextAlarma+0xe8>)
 8002d8c:	f002 fc52 	bl	8005634 <HAL_RTC_SetAlarm_IT>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <nextAlarma+0xca>
	{
		Error_Handler();
 8002d96:	f000 f811 	bl	8002dbc <Error_Handler>
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000001c 	.word	0x2000001c
 8002da8:	2000021c 	.word	0x2000021c
 8002dac:	20000228 	.word	0x20000228
 8002db0:	20000220 	.word	0x20000220
 8002db4:	20000224 	.word	0x20000224
 8002db8:	2000010c 	.word	0x2000010c

08002dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc0:	b672      	cpsid	i
}
 8002dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <Error_Handler+0x8>
	...

08002dc8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2110      	movs	r1, #16
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <ST7735_Select+0x14>)
 8002dd2:	f001 fc67 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020000 	.word	0x40020000

08002de0 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2110      	movs	r1, #16
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <ST7735_Unselect+0x14>)
 8002dea:	f001 fc5b 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40020000 	.word	0x40020000

08002df8 <ST7735_Reset>:

static void ST7735_Reset() {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2140      	movs	r1, #64	; 0x40
 8002e00:	4806      	ldr	r0, [pc, #24]	; (8002e1c <ST7735_Reset+0x24>)
 8002e02:	f001 fc4f 	bl	80046a4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002e06:	2005      	movs	r0, #5
 8002e08:	f000 fd56 	bl	80038b8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <ST7735_Reset+0x24>)
 8002e12:	f001 fc47 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40020000 	.word	0x40020000

08002e20 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	4807      	ldr	r0, [pc, #28]	; (8002e4c <ST7735_WriteCommand+0x2c>)
 8002e30:	f001 fc38 	bl	80046a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002e34:	1df9      	adds	r1, r7, #7
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <ST7735_WriteCommand+0x30>)
 8002e3e:	f002 fed1 	bl	8005be4 <HAL_SPI_Transmit>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	2000012c 	.word	0x2000012c

08002e54 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2110      	movs	r1, #16
 8002e62:	4807      	ldr	r0, [pc, #28]	; (8002e80 <ST7735_WriteData+0x2c>)
 8002e64:	f001 fc1e 	bl	80046a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4804      	ldr	r0, [pc, #16]	; (8002e84 <ST7735_WriteData+0x30>)
 8002e74:	f002 feb6 	bl	8005be4 <HAL_SPI_Transmit>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40020800 	.word	0x40020800
 8002e84:	2000012c 	.word	0x2000012c

08002e88 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002e9a:	e034      	b.n	8002f06 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ffb9 	bl	8002e20 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002eb8:	7abb      	ldrb	r3, [r7, #10]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002ec2:	7abb      	ldrb	r3, [r7, #10]
 8002ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002eca:	7abb      	ldrb	r3, [r7, #10]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002ed0:	7abb      	ldrb	r3, [r7, #10]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ffbd 	bl	8002e54 <ST7735_WriteData>
            addr += numArgs;
 8002eda:	7abb      	ldrb	r3, [r7, #10]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002ee2:	89bb      	ldrh	r3, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002ef2:	89bb      	ldrh	r3, [r7, #12]
 8002ef4:	2bff      	cmp	r3, #255	; 0xff
 8002ef6:	d102      	bne.n	8002efe <ST7735_ExecuteCommandList+0x76>
 8002ef8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002efc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002efe:	89bb      	ldrh	r3, [r7, #12]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fcd9 	bl	80038b8 <HAL_Delay>
    while(numCommands--) {
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	73fa      	strb	r2, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1c5      	bne.n	8002e9c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002f1a:	b590      	push	{r4, r7, lr}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4604      	mov	r4, r0
 8002f22:	4608      	mov	r0, r1
 8002f24:	4611      	mov	r1, r2
 8002f26:	461a      	mov	r2, r3
 8002f28:	4623      	mov	r3, r4
 8002f2a:	71fb      	strb	r3, [r7, #7]
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71bb      	strb	r3, [r7, #6]
 8002f30:	460b      	mov	r3, r1
 8002f32:	717b      	strb	r3, [r7, #5]
 8002f34:	4613      	mov	r3, r2
 8002f36:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002f38:	202a      	movs	r0, #42	; 0x2a
 8002f3a:	f7ff ff71 	bl	8002e20 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002f3e:	2300      	movs	r3, #0
 8002f40:	733b      	strb	r3, [r7, #12]
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	737b      	strb	r3, [r7, #13]
 8002f46:	2300      	movs	r3, #0
 8002f48:	73bb      	strb	r3, [r7, #14]
 8002f4a:	797b      	ldrb	r3, [r7, #5]
 8002f4c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	2104      	movs	r1, #4
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff7d 	bl	8002e54 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002f5a:	202b      	movs	r0, #43	; 0x2b
 8002f5c:	f7ff ff60 	bl	8002e20 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002f60:	79bb      	ldrb	r3, [r7, #6]
 8002f62:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002f64:	793b      	ldrb	r3, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff70 	bl	8002e54 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002f74:	202c      	movs	r0, #44	; 0x2c
 8002f76:	f7ff ff53 	bl	8002e20 <ST7735_WriteCommand>
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
	...

08002f84 <ST7735_Init>:

void ST7735_Init() {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8002f88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f8c:	f000 fc94 	bl	80038b8 <HAL_Delay>
    ST7735_Select();
 8002f90:	f7ff ff1a 	bl	8002dc8 <ST7735_Select>
    ST7735_Reset();
 8002f94:	f7ff ff30 	bl	8002df8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002f98:	4806      	ldr	r0, [pc, #24]	; (8002fb4 <ST7735_Init+0x30>)
 8002f9a:	f7ff ff75 	bl	8002e88 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002f9e:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <ST7735_Init+0x34>)
 8002fa0:	f7ff ff72 	bl	8002e88 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002fa4:	4805      	ldr	r0, [pc, #20]	; (8002fbc <ST7735_Init+0x38>)
 8002fa6:	f7ff ff6f 	bl	8002e88 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002faa:	f7ff ff19 	bl	8002de0 <ST7735_Unselect>
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	08028194 	.word	0x08028194
 8002fb8:	080281d0 	.word	0x080281d0
 8002fbc:	080281e0 	.word	0x080281e0

08002fc0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	80bb      	strh	r3, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fd6:	d823      	bhi.n	8003020 <ST7735_DrawPixel+0x60>
 8002fd8:	88bb      	ldrh	r3, [r7, #4]
 8002fda:	2b9f      	cmp	r3, #159	; 0x9f
 8002fdc:	d820      	bhi.n	8003020 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8002fde:	f7ff fef3 	bl	8002dc8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	b2d8      	uxtb	r0, r3
 8002fe6:	88bb      	ldrh	r3, [r7, #4]
 8002fe8:	b2d9      	uxtb	r1, r3
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	88bb      	ldrh	r3, [r7, #4]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f7ff ff8e 	bl	8002f1a <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	b29b      	uxth	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	733b      	strb	r3, [r7, #12]
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800300e:	f107 030c 	add.w	r3, r7, #12
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff1d 	bl	8002e54 <ST7735_WriteData>

    ST7735_Unselect();
 800301a:	f7ff fee1 	bl	8002de0 <ST7735_Unselect>
 800301e:	e000      	b.n	8003022 <ST7735_DrawPixel+0x62>
        return;
 8003020:	bf00      	nop
}
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003028:	b082      	sub	sp, #8
 800302a:	b590      	push	{r4, r7, lr}
 800302c:	b089      	sub	sp, #36	; 0x24
 800302e:	af00      	add	r7, sp, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	4603      	mov	r3, r0
 8003034:	80fb      	strh	r3, [r7, #6]
 8003036:	460b      	mov	r3, r1
 8003038:	80bb      	strh	r3, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	b2d8      	uxtb	r0, r3
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	b2d9      	uxtb	r1, r3
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800304e:	4413      	add	r3, r2
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b2dc      	uxtb	r4, r3
 8003056:	88bb      	ldrh	r3, [r7, #4]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800305e:	4413      	add	r3, r2
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4622      	mov	r2, r4
 8003068:	f7ff ff57 	bl	8002f1a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	e043      	b.n	80030fa <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8003072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	3b20      	subs	r3, #32
 8003078:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4619      	mov	r1, r3
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	440b      	add	r3, r1
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e029      	b.n	80030e8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00e      	beq.n	80030c2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80030a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	743b      	strb	r3, [r7, #16]
 80030ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff feca 	bl	8002e54 <ST7735_WriteData>
 80030c0:	e00f      	b.n	80030e2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80030c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	733b      	strb	r3, [r7, #12]
 80030ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80030d6:	f107 030c 	add.w	r3, r7, #12
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff feb9 	bl	8002e54 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80030ec:	461a      	mov	r2, r3
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d3cf      	bcc.n	8003094 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	3301      	adds	r3, #1
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80030fe:	461a      	mov	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4293      	cmp	r3, r2
 8003104:	d3b5      	bcc.n	8003072 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	3724      	adds	r7, #36	; 0x24
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003112:	b002      	add	sp, #8
 8003114:	4770      	bx	lr

08003116 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003116:	b082      	sub	sp, #8
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af04      	add	r7, sp, #16
 800311e:	603a      	str	r2, [r7, #0]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	4603      	mov	r3, r0
 8003124:	80fb      	strh	r3, [r7, #6]
 8003126:	460b      	mov	r3, r1
 8003128:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800312a:	f7ff fe4d 	bl	8002dc8 <ST7735_Select>

    while(*str) {
 800312e:	e02d      	b.n	800318c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	7d3a      	ldrb	r2, [r7, #20]
 8003134:	4413      	add	r3, r2
 8003136:	2b7f      	cmp	r3, #127	; 0x7f
 8003138:	dd13      	ble.n	8003162 <ST7735_WriteString+0x4c>
            x = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800313e:	7d7b      	ldrb	r3, [r7, #21]
 8003140:	b29a      	uxth	r2, r3
 8003142:	88bb      	ldrh	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8003148:	88bb      	ldrh	r3, [r7, #4]
 800314a:	7d7a      	ldrb	r2, [r7, #21]
 800314c:	4413      	add	r3, r2
 800314e:	2b9f      	cmp	r3, #159	; 0x9f
 8003150:	dc21      	bgt.n	8003196 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b20      	cmp	r3, #32
 8003158:	d103      	bne.n	8003162 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	603b      	str	r3, [r7, #0]
                continue;
 8003160:	e014      	b.n	800318c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	88b9      	ldrh	r1, [r7, #4]
 8003168:	88f8      	ldrh	r0, [r7, #6]
 800316a:	8c3b      	ldrh	r3, [r7, #32]
 800316c:	9302      	str	r3, [sp, #8]
 800316e:	8bbb      	ldrh	r3, [r7, #28]
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f7ff ff56 	bl	8003028 <ST7735_WriteChar>
        //HAL_Delay(1);
        x += font.width;
 800317c:	7d3b      	ldrb	r3, [r7, #20]
 800317e:	b29a      	uxth	r2, r3
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4413      	add	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
        str++;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1cd      	bne.n	8003130 <ST7735_WriteString+0x1a>
 8003194:	e000      	b.n	8003198 <ST7735_WriteString+0x82>
                break;
 8003196:	bf00      	nop
    }

    ST7735_Unselect();
 8003198:	f7ff fe22 	bl	8002de0 <ST7735_Unselect>
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031a6:	b002      	add	sp, #8
 80031a8:	4770      	bx	lr
	...

080031ac <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4604      	mov	r4, r0
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	80fb      	strh	r3, [r7, #6]
 80031be:	4603      	mov	r3, r0
 80031c0:	80bb      	strh	r3, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	807b      	strh	r3, [r7, #2]
 80031c6:	4613      	mov	r3, r2
 80031c8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b7f      	cmp	r3, #127	; 0x7f
 80031ce:	d869      	bhi.n	80032a4 <ST7735_FillRectangleFast+0xf8>
 80031d0:	88bb      	ldrh	r3, [r7, #4]
 80031d2:	2b9f      	cmp	r3, #159	; 0x9f
 80031d4:	d866      	bhi.n	80032a4 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80031d6:	88fa      	ldrh	r2, [r7, #6]
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	4413      	add	r3, r2
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	dd03      	ble.n	80031e8 <ST7735_FillRectangleFast+0x3c>
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80031e6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80031e8:	88ba      	ldrh	r2, [r7, #4]
 80031ea:	883b      	ldrh	r3, [r7, #0]
 80031ec:	4413      	add	r3, r2
 80031ee:	2ba0      	cmp	r3, #160	; 0xa0
 80031f0:	dd03      	ble.n	80031fa <ST7735_FillRectangleFast+0x4e>
 80031f2:	88bb      	ldrh	r3, [r7, #4]
 80031f4:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80031f8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80031fa:	f7ff fde5 	bl	8002dc8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	b2d8      	uxtb	r0, r3
 8003202:	88bb      	ldrh	r3, [r7, #4]
 8003204:	b2d9      	uxtb	r1, r3
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4413      	add	r3, r2
 8003210:	b2db      	uxtb	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b2dc      	uxtb	r4, r3
 8003216:	88bb      	ldrh	r3, [r7, #4]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	883b      	ldrh	r3, [r7, #0]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4413      	add	r3, r2
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4622      	mov	r2, r4
 8003228:	f7ff fe77 	bl	8002f1a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800322c:	8c3b      	ldrh	r3, [r7, #32]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	b29b      	uxth	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	723b      	strb	r3, [r7, #8]
 8003236:	8c3b      	ldrh	r3, [r7, #32]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800323c:	887b      	ldrh	r3, [r7, #2]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f003 feb9 	bl	8006fb8 <malloc>
 8003246:	4603      	mov	r3, r0
 8003248:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800324a:	2300      	movs	r3, #0
 800324c:	80fb      	strh	r3, [r7, #6]
 800324e:	e008      	b.n	8003262 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	893a      	ldrh	r2, [r7, #8]
 800325a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	3301      	adds	r3, #1
 8003260:	80fb      	strh	r3, [r7, #6]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3f2      	bcc.n	8003250 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800326a:	2201      	movs	r2, #1
 800326c:	2110      	movs	r1, #16
 800326e:	480f      	ldr	r0, [pc, #60]	; (80032ac <ST7735_FillRectangleFast+0x100>)
 8003270:	f001 fa18 	bl	80046a4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8003274:	883b      	ldrh	r3, [r7, #0]
 8003276:	80bb      	strh	r3, [r7, #4]
 8003278:	e00b      	b.n	8003292 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	480a      	ldr	r0, [pc, #40]	; (80032b0 <ST7735_FillRectangleFast+0x104>)
 8003288:	f002 fcac 	bl	8005be4 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800328c:	88bb      	ldrh	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	80bb      	strh	r3, [r7, #4]
 8003292:	88bb      	ldrh	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <ST7735_FillRectangleFast+0xce>

    free(line);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f003 fe95 	bl	8006fc8 <free>
    ST7735_Unselect();
 800329e:	f7ff fd9f 	bl	8002de0 <ST7735_Unselect>
 80032a2:	e000      	b.n	80032a6 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80032a4:	bf00      	nop
}
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}
 80032ac:	40020800 	.word	0x40020800
 80032b0:	2000012c 	.word	0x2000012c

080032b4 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	4603      	mov	r3, r0
 80032bc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	23a0      	movs	r3, #160	; 0xa0
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	2100      	movs	r1, #0
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7ff ff6f 	bl	80031ac <ST7735_FillRectangleFast>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80032d6:	b590      	push	{r4, r7, lr}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4604      	mov	r4, r0
 80032de:	4608      	mov	r0, r1
 80032e0:	4611      	mov	r1, r2
 80032e2:	461a      	mov	r2, r3
 80032e4:	4623      	mov	r3, r4
 80032e6:	80fb      	strh	r3, [r7, #6]
 80032e8:	4603      	mov	r3, r0
 80032ea:	80bb      	strh	r3, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	2b7f      	cmp	r3, #127	; 0x7f
 80032f8:	d831      	bhi.n	800335e <ST7735_DrawImage+0x88>
 80032fa:	88bb      	ldrh	r3, [r7, #4]
 80032fc:	2b9f      	cmp	r3, #159	; 0x9f
 80032fe:	d82e      	bhi.n	800335e <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003300:	88fa      	ldrh	r2, [r7, #6]
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	4413      	add	r3, r2
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	dc2b      	bgt.n	8003362 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800330a:	88ba      	ldrh	r2, [r7, #4]
 800330c:	883b      	ldrh	r3, [r7, #0]
 800330e:	4413      	add	r3, r2
 8003310:	2ba0      	cmp	r3, #160	; 0xa0
 8003312:	dc28      	bgt.n	8003366 <ST7735_DrawImage+0x90>

    ST7735_Select();
 8003314:	f7ff fd58 	bl	8002dc8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	88bb      	ldrh	r3, [r7, #4]
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	4413      	add	r3, r2
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b2dc      	uxtb	r4, r3
 8003330:	88bb      	ldrh	r3, [r7, #4]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	883b      	ldrh	r3, [r7, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	4413      	add	r3, r2
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4622      	mov	r2, r4
 8003342:	f7ff fdea 	bl	8002f1a <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	883a      	ldrh	r2, [r7, #0]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4619      	mov	r1, r3
 8003352:	69b8      	ldr	r0, [r7, #24]
 8003354:	f7ff fd7e 	bl	8002e54 <ST7735_WriteData>
    ST7735_Unselect();
 8003358:	f7ff fd42 	bl	8002de0 <ST7735_Unselect>
 800335c:	e004      	b.n	8003368 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003366:	bf00      	nop
}
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
	...

08003370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_MspInit+0x4c>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <HAL_MspInit+0x4c>)
 8003380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_MspInit+0x4c>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_MspInit+0x4c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_MspInit+0x4c>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_MspInit+0x4c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033ae:	2007      	movs	r0, #7
 80033b0:	f000 ff8c 	bl	80042cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_ADC_MspInit+0x7c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d127      	bne.n	8003432 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	4b16      	ldr	r3, [pc, #88]	; (8003440 <HAL_ADC_MspInit+0x80>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_ADC_MspInit+0x80>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_ADC_MspInit+0x80>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_ADC_MspInit+0x80>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_ADC_MspInit+0x80>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_ADC_MspInit+0x80>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800341a:	2302      	movs	r3, #2
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341e:	2303      	movs	r3, #3
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	4805      	ldr	r0, [pc, #20]	; (8003444 <HAL_ADC_MspInit+0x84>)
 800342e:	f000 ff9d 	bl	800436c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003432:	bf00      	nop
 8003434:	3728      	adds	r7, #40	; 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40012000 	.word	0x40012000
 8003440:	40023800 	.word	0x40023800
 8003444:	40020000 	.word	0x40020000

08003448 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
 8003460:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_RTC_MspInit+0x60>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d119      	bne.n	80034a0 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800346c:	2302      	movs	r3, #2
 800346e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003474:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003476:	f107 0308 	add.w	r3, r7, #8
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fda8 	bl	8004fd0 <HAL_RCCEx_PeriphCLKConfig>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003486:	f7ff fc99 	bl	8002dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_RTC_MspInit+0x64>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003490:	2200      	movs	r2, #0
 8003492:	2100      	movs	r1, #0
 8003494:	2029      	movs	r0, #41	; 0x29
 8003496:	f000 ff24 	bl	80042e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800349a:	2029      	movs	r0, #41	; 0x29
 800349c:	f000 ff3d 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034a0:	bf00      	nop
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40002800 	.word	0x40002800
 80034ac:	42470e3c 	.word	0x42470e3c

080034b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_SPI_MspInit+0x84>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d12b      	bne.n	800352a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_SPI_MspInit+0x88>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_SPI_MspInit+0x88>)
 80034dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_SPI_MspInit+0x88>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_SPI_MspInit+0x88>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_SPI_MspInit+0x88>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_SPI_MspInit+0x88>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800350a:	23a0      	movs	r3, #160	; 0xa0
 800350c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003516:	2303      	movs	r3, #3
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800351a:	2305      	movs	r3, #5
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351e:	f107 0314 	add.w	r3, r7, #20
 8003522:	4619      	mov	r1, r3
 8003524:	4805      	ldr	r0, [pc, #20]	; (800353c <HAL_SPI_MspInit+0x8c>)
 8003526:	f000 ff21 	bl	800436c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800352a:	bf00      	nop
 800352c:	3728      	adds	r7, #40	; 0x28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40013000 	.word	0x40013000
 8003538:	40023800 	.word	0x40023800
 800353c:	40020000 	.word	0x40020000

08003540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <HAL_TIM_Base_MspInit+0x48>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d115      	bne.n	800357e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_TIM_Base_MspInit+0x4c>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a0c      	ldr	r2, [pc, #48]	; (800358c <HAL_TIM_Base_MspInit+0x4c>)
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_TIM_Base_MspInit+0x4c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	201d      	movs	r0, #29
 8003574:	f000 feb5 	bl	80042e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003578:	201d      	movs	r0, #29
 800357a:	f000 fece 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40000400 	.word	0x40000400
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_TIM_PWM_MspInit+0x3c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10d      	bne.n	80035be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_TIM_PWM_MspInit+0x40>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_TIM_PWM_MspInit+0x40>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_TIM_PWM_MspInit+0x40>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <HAL_TIM_MspPostInit+0x68>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d11e      	bne.n	8003634 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_TIM_MspPostInit+0x6c>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4a10      	ldr	r2, [pc, #64]	; (8003640 <HAL_TIM_MspPostInit+0x6c>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6313      	str	r3, [r2, #48]	; 0x30
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_TIM_MspPostInit+0x6c>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003612:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003624:	2302      	movs	r3, #2
 8003626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	4619      	mov	r1, r3
 800362e:	4805      	ldr	r0, [pc, #20]	; (8003644 <HAL_TIM_MspPostInit+0x70>)
 8003630:	f000 fe9c 	bl	800436c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003634:	bf00      	nop
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40000800 	.word	0x40000800
 8003640:	40023800 	.word	0x40023800
 8003644:	40020c00 	.word	0x40020c00

08003648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800364c:	e7fe      	b.n	800364c <NMI_Handler+0x4>

0800364e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003652:	e7fe      	b.n	8003652 <HardFault_Handler+0x4>

08003654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003658:	e7fe      	b.n	8003658 <MemManage_Handler+0x4>

0800365a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800365e:	e7fe      	b.n	800365e <BusFault_Handler+0x4>

08003660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003664:	e7fe      	b.n	8003664 <UsageFault_Handler+0x4>

08003666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003694:	f000 f8f0 	bl	8003878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80036a0:	2001      	movs	r0, #1
 80036a2:	f001 f819 	bl	80046d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}

080036aa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80036ae:	2004      	movs	r0, #4
 80036b0:	f001 f812 	bl	80046d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80036bc:	2008      	movs	r0, #8
 80036be:	f001 f80b 	bl	80046d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <TIM3_IRQHandler+0x10>)
 80036ce:	f002 fe41 	bl	8006354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000184 	.word	0x20000184

080036dc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80036e0:	4802      	ldr	r0, [pc, #8]	; (80036ec <RTC_Alarm_IRQHandler+0x10>)
 80036e2:	f002 f8e9 	bl	80058b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000010c 	.word	0x2000010c

080036f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <_sbrk+0x5c>)
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <_sbrk+0x60>)
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <_sbrk+0x64>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <_sbrk+0x68>)
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <_sbrk+0x64>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003720:	f003 fc20 	bl	8006f64 <__errno>
 8003724:	4603      	mov	r3, r0
 8003726:	220c      	movs	r2, #12
 8003728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	e009      	b.n	8003744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <_sbrk+0x64>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <_sbrk+0x64>)
 8003740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20020000 	.word	0x20020000
 8003750:	00000400 	.word	0x00000400
 8003754:	20000238 	.word	0x20000238
 8003758:	20000250 	.word	0x20000250

0800375c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <SystemInit+0x20>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <SystemInit+0x20>)
 8003768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800376c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003784:	480d      	ldr	r0, [pc, #52]	; (80037bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003786:	490e      	ldr	r1, [pc, #56]	; (80037c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003788:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800378c:	e002      	b.n	8003794 <LoopCopyDataInit>

0800378e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003792:	3304      	adds	r3, #4

08003794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003798:	d3f9      	bcc.n	800378e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379a:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800379c:	4c0b      	ldr	r4, [pc, #44]	; (80037cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a0:	e001      	b.n	80037a6 <LoopFillZerobss>

080037a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a4:	3204      	adds	r2, #4

080037a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a8:	d3fb      	bcc.n	80037a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037aa:	f7ff ffd7 	bl	800375c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ae:	f003 fbdf 	bl	8006f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b2:	f7fc fee7 	bl	8000584 <main>
  bx  lr    
 80037b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80037c4:	08028260 	.word	0x08028260
  ldr r2, =_sbss
 80037c8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80037cc:	20000250 	.word	0x20000250

080037d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d0:	e7fe      	b.n	80037d0 <ADC_IRQHandler>
	...

080037d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_Init+0x40>)
 80037de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <HAL_Init+0x40>)
 80037ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_Init+0x40>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_Init+0x40>)
 80037f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fc:	2003      	movs	r0, #3
 80037fe:	f000 fd65 	bl	80042cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003802:	2000      	movs	r0, #0
 8003804:	f000 f808 	bl	8003818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003808:	f7ff fdb2 	bl	8003370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023c00 	.word	0x40023c00

08003818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_InitTick+0x54>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_InitTick+0x58>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fd8b 	bl	8004352 <HAL_SYSTICK_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e00e      	b.n	8003864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b0f      	cmp	r3, #15
 800384a:	d80a      	bhi.n	8003862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800384c:	2200      	movs	r2, #0
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	f000 fd45 	bl	80042e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003858:	4a06      	ldr	r2, [pc, #24]	; (8003874 <HAL_InitTick+0x5c>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000020 	.word	0x20000020
 8003870:	20000028 	.word	0x20000028
 8003874:	20000024 	.word	0x20000024

08003878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_IncTick+0x20>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_IncTick+0x24>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4413      	add	r3, r2
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_IncTick+0x24>)
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000028 	.word	0x20000028
 800389c:	2000023c 	.word	0x2000023c

080038a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return uwTick;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_GetTick+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000023c 	.word	0x2000023c

080038b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff ffee 	bl	80038a0 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d005      	beq.n	80038de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_Delay+0x44>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038de:	bf00      	nop
 80038e0:	f7ff ffde 	bl	80038a0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d8f7      	bhi.n	80038e0 <HAL_Delay+0x28>
  {
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000028 	.word	0x20000028

08003900 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e033      	b.n	800397e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fd4e 	bl	80033c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d118      	bne.n	8003970 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003946:	f023 0302 	bic.w	r3, r3, #2
 800394a:	f043 0202 	orr.w	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 faca 	bl	8003eec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
 800396e:	e001      	b.n	8003974 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_Start+0x1a>
 800399e:	2302      	movs	r3, #2
 80039a0:	e097      	b.n	8003ad2 <HAL_ADC_Start+0x14a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d018      	beq.n	80039ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039c8:	4b45      	ldr	r3, [pc, #276]	; (8003ae0 <HAL_ADC_Start+0x158>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a45      	ldr	r2, [pc, #276]	; (8003ae4 <HAL_ADC_Start+0x15c>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0c9a      	lsrs	r2, r3, #18
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039dc:	e002      	b.n	80039e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f9      	bne.n	80039de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d15f      	bne.n	8003ab8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d106      	bne.n	8003a46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f023 0206 	bic.w	r2, r3, #6
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
 8003a44:	e002      	b.n	8003a4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_ADC_Start+0x160>)
 8003a56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d129      	bne.n	8003ad0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	e020      	b.n	8003ad0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_ADC_Start+0x164>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d11b      	bne.n	8003ad0 <HAL_ADC_Start+0x148>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d114      	bne.n	8003ad0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000020 	.word	0x20000020
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	40012300 	.word	0x40012300
 8003aec:	40012000 	.word	0x40012000

08003af0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_Stop+0x16>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e021      	b.n	8003b4a <HAL_ADC_Stop+0x5a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d113      	bne.n	8003b9c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d10b      	bne.n	8003b9c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e063      	b.n	8003c64 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003b9c:	f7ff fe80 	bl	80038a0 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ba2:	e021      	b.n	8003be8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d01d      	beq.n	8003be8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_ADC_PollForConversion+0x6c>
 8003bb2:	f7ff fe75 	bl	80038a0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d212      	bcs.n	8003be8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d00b      	beq.n	8003be8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e03d      	b.n	8003c64 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d1d6      	bne.n	8003ba4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0212 	mvn.w	r2, #18
 8003bfe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d123      	bne.n	8003c62 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11f      	bne.n	8003c62 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d111      	bne.n	8003c62 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0201 	orr.w	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e113      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x244>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d925      	bls.n	8003d00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68d9      	ldr	r1, [r3, #12]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b1e      	subs	r3, #30
 8003cca:	2207      	movs	r2, #7
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68d9      	ldr	r1, [r3, #12]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	4618      	mov	r0, r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4403      	add	r3, r0
 8003cf2:	3b1e      	subs	r3, #30
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e022      	b.n	8003d46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6919      	ldr	r1, [r3, #16]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	2207      	movs	r2, #7
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	400a      	ands	r2, r1
 8003d22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6919      	ldr	r1, [r3, #16]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	4618      	mov	r0, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4403      	add	r3, r0
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d824      	bhi.n	8003d98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b05      	subs	r3, #5
 8003d60:	221f      	movs	r2, #31
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	3b05      	subs	r3, #5
 8003d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
 8003d96:	e04c      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d824      	bhi.n	8003dea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	3b23      	subs	r3, #35	; 0x23
 8003db2:	221f      	movs	r2, #31
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43da      	mvns	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	400a      	ands	r2, r1
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	3b23      	subs	r3, #35	; 0x23
 8003ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
 8003de8:	e023      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	3b41      	subs	r3, #65	; 0x41
 8003dfc:	221f      	movs	r2, #31
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	400a      	ands	r2, r1
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b41      	subs	r3, #65	; 0x41
 8003e26:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <HAL_ADC_ConfigChannel+0x250>)
 8003e34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a28      	ldr	r2, [pc, #160]	; (8003edc <HAL_ADC_ConfigChannel+0x254>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10f      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x1d8>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b12      	cmp	r3, #18
 8003e46:	d10b      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_ADC_ConfigChannel+0x254>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d12b      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x23a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ee0 <HAL_ADC_ConfigChannel+0x258>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x1f4>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b11      	cmp	r3, #17
 8003e7a:	d122      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_ADC_ConfigChannel+0x258>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <HAL_ADC_ConfigChannel+0x25c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <HAL_ADC_ConfigChannel+0x260>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	0c9a      	lsrs	r2, r3, #18
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003eb4:	e002      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f9      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40012300 	.word	0x40012300
 8003edc:	40012000 	.word	0x40012000
 8003ee0:	10000012 	.word	0x10000012
 8003ee4:	20000020 	.word	0x20000020
 8003ee8:	431bde83 	.word	0x431bde83

08003eec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ef4:	4b79      	ldr	r3, [pc, #484]	; (80040dc <ADC_Init+0x1f0>)
 8003ef6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	021a      	lsls	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6899      	ldr	r1, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <ADC_Init+0x1f4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e00f      	b.n	8003fea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fe8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0202 	bic.w	r2, r2, #2
 8003ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6899      	ldr	r1, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7e1b      	ldrb	r3, [r3, #24]
 8004004:	005a      	lsls	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01b      	beq.n	8004050 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004026:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004036:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	3b01      	subs	r3, #1
 8004044:	035a      	lsls	r2, r3, #13
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	e007      	b.n	8004060 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	3b01      	subs	r3, #1
 800407c:	051a      	lsls	r2, r3, #20
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040a2:	025a      	lsls	r2, r3, #9
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6899      	ldr	r1, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	029a      	lsls	r2, r3, #10
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40012300 	.word	0x40012300
 80040e0:	0f000001 	.word	0x0f000001

080040e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800410c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004116:	4a04      	ldr	r2, [pc, #16]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	60d3      	str	r3, [r2, #12]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <__NVIC_GetPriorityGrouping+0x18>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	f003 0307 	and.w	r3, r3, #7
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004156:	2b00      	cmp	r3, #0
 8004158:	db0b      	blt.n	8004172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	4907      	ldr	r1, [pc, #28]	; (8004180 <__NVIC_EnableIRQ+0x38>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2001      	movs	r0, #1
 800416a:	fa00 f202 	lsl.w	r2, r0, r2
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000e100 	.word	0xe000e100

08004184 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	2b00      	cmp	r3, #0
 8004194:	db12      	blt.n	80041bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	490a      	ldr	r1, [pc, #40]	; (80041c8 <__NVIC_DisableIRQ+0x44>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2001      	movs	r0, #1
 80041a6:	fa00 f202 	lsl.w	r2, r0, r2
 80041aa:	3320      	adds	r3, #32
 80041ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041b0:	f3bf 8f4f 	dsb	sy
}
 80041b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041b6:	f3bf 8f6f 	isb	sy
}
 80041ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000e100 	.word	0xe000e100

080041cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	6039      	str	r1, [r7, #0]
 80041d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	db0a      	blt.n	80041f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	490c      	ldr	r1, [pc, #48]	; (8004218 <__NVIC_SetPriority+0x4c>)
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	0112      	lsls	r2, r2, #4
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	440b      	add	r3, r1
 80041f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f4:	e00a      	b.n	800420c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4908      	ldr	r1, [pc, #32]	; (800421c <__NVIC_SetPriority+0x50>)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	3b04      	subs	r3, #4
 8004204:	0112      	lsls	r2, r2, #4
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	440b      	add	r3, r1
 800420a:	761a      	strb	r2, [r3, #24]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	e000e100 	.word	0xe000e100
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f1c3 0307 	rsb	r3, r3, #7
 800423a:	2b04      	cmp	r3, #4
 800423c:	bf28      	it	cs
 800423e:	2304      	movcs	r3, #4
 8004240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3304      	adds	r3, #4
 8004246:	2b06      	cmp	r3, #6
 8004248:	d902      	bls.n	8004250 <NVIC_EncodePriority+0x30>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3b03      	subs	r3, #3
 800424e:	e000      	b.n	8004252 <NVIC_EncodePriority+0x32>
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	401a      	ands	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004268:	f04f 31ff 	mov.w	r1, #4294967295
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	43d9      	mvns	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004278:	4313      	orrs	r3, r2
         );
}
 800427a:	4618      	mov	r0, r3
 800427c:	3724      	adds	r7, #36	; 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004298:	d301      	bcc.n	800429e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429a:	2301      	movs	r3, #1
 800429c:	e00f      	b.n	80042be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429e:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <SysTick_Config+0x40>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a6:	210f      	movs	r1, #15
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	f7ff ff8e 	bl	80041cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <SysTick_Config+0x40>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b6:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <SysTick_Config+0x40>)
 80042b8:	2207      	movs	r2, #7
 80042ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	e000e010 	.word	0xe000e010

080042cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff05 	bl	80040e4 <__NVIC_SetPriorityGrouping>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	4603      	mov	r3, r0
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f4:	f7ff ff1a 	bl	800412c <__NVIC_GetPriorityGrouping>
 80042f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	6978      	ldr	r0, [r7, #20]
 8004300:	f7ff ff8e 	bl	8004220 <NVIC_EncodePriority>
 8004304:	4602      	mov	r2, r0
 8004306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff5d 	bl	80041cc <__NVIC_SetPriority>
}
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff0d 	bl	8004148 <__NVIC_EnableIRQ>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff1d 	bl	8004184 <__NVIC_DisableIRQ>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ff94 	bl	8004288 <SysTick_Config>
 8004360:	4603      	mov	r3, r0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e159      	b.n	800463c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004388:	2201      	movs	r2, #1
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	f040 8148 	bne.w	8004636 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d005      	beq.n	80043be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d130      	bne.n	8004420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f4:	2201      	movs	r2, #1
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 0201 	and.w	r2, r3, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b03      	cmp	r3, #3
 800442a:	d017      	beq.n	800445c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	2203      	movs	r2, #3
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d123      	bne.n	80044b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	08da      	lsrs	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3208      	adds	r2, #8
 8004470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	220f      	movs	r2, #15
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	08da      	lsrs	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3208      	adds	r2, #8
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 0203 	and.w	r2, r3, #3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a2 	beq.w	8004636 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	4b57      	ldr	r3, [pc, #348]	; (8004654 <HAL_GPIO_Init+0x2e8>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	4a56      	ldr	r2, [pc, #344]	; (8004654 <HAL_GPIO_Init+0x2e8>)
 80044fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004500:	6453      	str	r3, [r2, #68]	; 0x44
 8004502:	4b54      	ldr	r3, [pc, #336]	; (8004654 <HAL_GPIO_Init+0x2e8>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450e:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_GPIO_Init+0x2ec>)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	3302      	adds	r3, #2
 8004516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	220f      	movs	r2, #15
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a49      	ldr	r2, [pc, #292]	; (800465c <HAL_GPIO_Init+0x2f0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d019      	beq.n	800456e <HAL_GPIO_Init+0x202>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a48      	ldr	r2, [pc, #288]	; (8004660 <HAL_GPIO_Init+0x2f4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_GPIO_Init+0x1fe>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a47      	ldr	r2, [pc, #284]	; (8004664 <HAL_GPIO_Init+0x2f8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00d      	beq.n	8004566 <HAL_GPIO_Init+0x1fa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a46      	ldr	r2, [pc, #280]	; (8004668 <HAL_GPIO_Init+0x2fc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <HAL_GPIO_Init+0x1f6>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a45      	ldr	r2, [pc, #276]	; (800466c <HAL_GPIO_Init+0x300>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_GPIO_Init+0x1f2>
 800455a:	2304      	movs	r3, #4
 800455c:	e008      	b.n	8004570 <HAL_GPIO_Init+0x204>
 800455e:	2307      	movs	r3, #7
 8004560:	e006      	b.n	8004570 <HAL_GPIO_Init+0x204>
 8004562:	2303      	movs	r3, #3
 8004564:	e004      	b.n	8004570 <HAL_GPIO_Init+0x204>
 8004566:	2302      	movs	r3, #2
 8004568:	e002      	b.n	8004570 <HAL_GPIO_Init+0x204>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_GPIO_Init+0x204>
 800456e:	2300      	movs	r3, #0
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	f002 0203 	and.w	r2, r2, #3
 8004576:	0092      	lsls	r2, r2, #2
 8004578:	4093      	lsls	r3, r2
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004580:	4935      	ldr	r1, [pc, #212]	; (8004658 <HAL_GPIO_Init+0x2ec>)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	3302      	adds	r3, #2
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800458e:	4b38      	ldr	r3, [pc, #224]	; (8004670 <HAL_GPIO_Init+0x304>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045b2:	4a2f      	ldr	r2, [pc, #188]	; (8004670 <HAL_GPIO_Init+0x304>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_GPIO_Init+0x304>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045dc:	4a24      	ldr	r2, [pc, #144]	; (8004670 <HAL_GPIO_Init+0x304>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045e2:	4b23      	ldr	r3, [pc, #140]	; (8004670 <HAL_GPIO_Init+0x304>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004606:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <HAL_GPIO_Init+0x304>)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <HAL_GPIO_Init+0x304>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004630:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <HAL_GPIO_Init+0x304>)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3301      	adds	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	f67f aea2 	bls.w	8004388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	40013800 	.word	0x40013800
 800465c:	40020000 	.word	0x40020000
 8004660:	40020400 	.word	0x40020400
 8004664:	40020800 	.word	0x40020800
 8004668:	40020c00 	.word	0x40020c00
 800466c:	40021000 	.word	0x40021000
 8004670:	40013c00 	.word	0x40013c00

08004674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	e001      	b.n	8004696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
 80046b0:	4613      	mov	r3, r2
 80046b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046b4:	787b      	ldrb	r3, [r7, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ba:	887a      	ldrh	r2, [r7, #2]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046c0:	e003      	b.n	80046ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046c2:	887b      	ldrh	r3, [r7, #2]
 80046c4:	041a      	lsls	r2, r3, #16
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	619a      	str	r2, [r3, #24]
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ee:	4a05      	ldr	r2, [pc, #20]	; (8004704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fa4e 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40013c00 	.word	0x40013c00

08004708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e267      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d075      	beq.n	8004812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004726:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00c      	beq.n	800474c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004732:	4b85      	ldr	r3, [pc, #532]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	2b08      	cmp	r3, #8
 800473c:	d112      	bne.n	8004764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473e:	4b82      	ldr	r3, [pc, #520]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800474a:	d10b      	bne.n	8004764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	4b7e      	ldr	r3, [pc, #504]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05b      	beq.n	8004810 <HAL_RCC_OscConfig+0x108>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d157      	bne.n	8004810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e242      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d106      	bne.n	800477c <HAL_RCC_OscConfig+0x74>
 800476e:	4b76      	ldr	r3, [pc, #472]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a75      	ldr	r2, [pc, #468]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <HAL_RCC_OscConfig+0xb0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x98>
 8004786:	4b70      	ldr	r3, [pc, #448]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a6f      	ldr	r2, [pc, #444]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b6d      	ldr	r3, [pc, #436]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6c      	ldr	r2, [pc, #432]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0xb0>
 80047a0:	4b69      	ldr	r3, [pc, #420]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a68      	ldr	r2, [pc, #416]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b66      	ldr	r3, [pc, #408]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a65      	ldr	r2, [pc, #404]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7ff f86e 	bl	80038a0 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c8:	f7ff f86a 	bl	80038a0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e207      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0xc0>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7ff f85a 	bl	80038a0 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f0:	f7ff f856 	bl	80038a0 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e1f3      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	4b51      	ldr	r3, [pc, #324]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0xe8>
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d063      	beq.n	80048e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481e:	4b4a      	ldr	r3, [pc, #296]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482a:	4b47      	ldr	r3, [pc, #284]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	2b08      	cmp	r3, #8
 8004834:	d11c      	bne.n	8004870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004836:	4b44      	ldr	r3, [pc, #272]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	4b41      	ldr	r3, [pc, #260]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_RCC_OscConfig+0x152>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e1c7      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485a:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4937      	ldr	r1, [pc, #220]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	e03a      	b.n	80048e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <HAL_RCC_OscConfig+0x244>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7ff f80f 	bl	80038a0 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004886:	f7ff f80b 	bl	80038a0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e1a8      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	4b2b      	ldr	r3, [pc, #172]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a4:	4b28      	ldr	r3, [pc, #160]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4925      	ldr	r1, [pc, #148]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	e015      	b.n	80048e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_RCC_OscConfig+0x244>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fe ffee 	bl	80038a0 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c8:	f7fe ffea 	bl	80038a0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e187      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d036      	beq.n	8004960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_RCC_OscConfig+0x248>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fe ffce 	bl	80038a0 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004908:	f7fe ffca 	bl	80038a0 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e167      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x200>
 8004926:	e01b      	b.n	8004960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_OscConfig+0x248>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492e:	f7fe ffb7 	bl	80038a0 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	e00e      	b.n	8004954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004936:	f7fe ffb3 	bl	80038a0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d907      	bls.n	8004954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e150      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
 8004948:	40023800 	.word	0x40023800
 800494c:	42470000 	.word	0x42470000
 8004950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	4b88      	ldr	r3, [pc, #544]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ea      	bne.n	8004936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8097 	beq.w	8004a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004972:	4b81      	ldr	r3, [pc, #516]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	4b7d      	ldr	r3, [pc, #500]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	4a7c      	ldr	r2, [pc, #496]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498c:	6413      	str	r3, [r2, #64]	; 0x40
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	4b77      	ldr	r3, [pc, #476]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d118      	bne.n	80049dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a73      	ldr	r2, [pc, #460]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b6:	f7fe ff73 	bl	80038a0 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049be:	f7fe ff6f 	bl	80038a0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e10c      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	4b6a      	ldr	r3, [pc, #424]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x2ea>
 80049e4:	4b64      	ldr	r3, [pc, #400]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	4a63      	ldr	r2, [pc, #396]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6713      	str	r3, [r2, #112]	; 0x70
 80049f0:	e01c      	b.n	8004a2c <HAL_RCC_OscConfig+0x324>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x30c>
 80049fa:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a5e      	ldr	r2, [pc, #376]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
 8004a06:	4b5c      	ldr	r3, [pc, #368]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a5b      	ldr	r2, [pc, #364]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_OscConfig+0x324>
 8004a14:	4b58      	ldr	r3, [pc, #352]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a57      	ldr	r2, [pc, #348]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b55      	ldr	r3, [pc, #340]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a54      	ldr	r2, [pc, #336]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a26:	f023 0304 	bic.w	r3, r3, #4
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fe ff34 	bl	80038a0 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fe ff30 	bl	80038a0 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e0cb      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a52:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ee      	beq.n	8004a3c <HAL_RCC_OscConfig+0x334>
 8004a5e:	e014      	b.n	8004a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a60:	f7fe ff1e 	bl	80038a0 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fe ff1a 	bl	80038a0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0b5      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ee      	bne.n	8004a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	4a38      	ldr	r2, [pc, #224]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80a1 	beq.w	8004be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa6:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d05c      	beq.n	8004b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d141      	bne.n	8004b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fe feee 	bl	80038a0 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fe feea 	bl	80038a0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e087      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	491b      	ldr	r1, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe fec3 	bl	80038a0 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe febf 	bl	80038a0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e05c      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x416>
 8004b3c:	e054      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fe feac 	bl	80038a0 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fe fea8 	bl	80038a0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e045      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x444>
 8004b6a:	e03d      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e038      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b84:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x4ec>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d028      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d121      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d11a      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800

08004bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0cc      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d90c      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b65      	ldr	r3, [pc, #404]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b63      	ldr	r3, [pc, #396]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0b8      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c4c:	4b59      	ldr	r3, [pc, #356]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a58      	ldr	r2, [pc, #352]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c64:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a52      	ldr	r2, [pc, #328]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c70:	4b50      	ldr	r3, [pc, #320]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	494d      	ldr	r1, [pc, #308]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d044      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d119      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e07f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e06f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e067      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd6:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f023 0203 	bic.w	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4934      	ldr	r1, [pc, #208]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce8:	f7fe fdda 	bl	80038a0 <HAL_GetTick>
 8004cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf0:	f7fe fdd6 	bl	80038a0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e04f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 020c 	and.w	r2, r3, #12
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d1eb      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d20c      	bcs.n	8004d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e032      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4916      	ldr	r1, [pc, #88]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	490e      	ldr	r1, [pc, #56]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d7e:	f000 f821 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 8004d82:	4602      	mov	r2, r0
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	490a      	ldr	r1, [pc, #40]	; (8004db8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	5ccb      	ldrb	r3, [r1, r3]
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <HAL_RCC_ClockConfig+0x1c4>)
 8004d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fd3a 	bl	8003818 <HAL_InitTick>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023c00 	.word	0x40023c00
 8004db4:	40023800 	.word	0x40023800
 8004db8:	0802820c 	.word	0x0802820c
 8004dbc:	20000020 	.word	0x20000020
 8004dc0:	20000024 	.word	0x20000024

08004dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc8:	b094      	sub	sp, #80	; 0x50
 8004dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ddc:	4b79      	ldr	r3, [pc, #484]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d00d      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x40>
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	f200 80e1 	bhi.w	8004fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x34>
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8004df6:	e0db      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df8:	4b73      	ldr	r3, [pc, #460]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004dfc:	e0db      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dfe:	4b73      	ldr	r3, [pc, #460]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8004e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e02:	e0d8      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e04:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e0e:	4b6d      	ldr	r3, [pc, #436]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d063      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b6a      	ldr	r3, [pc, #424]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	2200      	movs	r2, #0
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2e:	2300      	movs	r3, #0
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
 8004e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e36:	4622      	mov	r2, r4
 8004e38:	462b      	mov	r3, r5
 8004e3a:	f04f 0000 	mov.w	r0, #0
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	0159      	lsls	r1, r3, #5
 8004e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e48:	0150      	lsls	r0, r2, #5
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4621      	mov	r1, r4
 8004e50:	1a51      	subs	r1, r2, r1
 8004e52:	6139      	str	r1, [r7, #16]
 8004e54:	4629      	mov	r1, r5
 8004e56:	eb63 0301 	sbc.w	r3, r3, r1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e68:	4659      	mov	r1, fp
 8004e6a:	018b      	lsls	r3, r1, #6
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e72:	4651      	mov	r1, sl
 8004e74:	018a      	lsls	r2, r1, #6
 8004e76:	4651      	mov	r1, sl
 8004e78:	ebb2 0801 	subs.w	r8, r2, r1
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e96:	4690      	mov	r8, r2
 8004e98:	4699      	mov	r9, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	eb18 0303 	adds.w	r3, r8, r3
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	462b      	mov	r3, r5
 8004ea4:	eb49 0303 	adc.w	r3, r9, r3
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	024b      	lsls	r3, r1, #9
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	024a      	lsls	r2, r1, #9
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	2200      	movs	r2, #0
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ed4:	f7fb f9d4 	bl	8000280 <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4613      	mov	r3, r2
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee0:	e058      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee2:	4b38      	ldr	r3, [pc, #224]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	2200      	movs	r2, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	4611      	mov	r1, r2
 8004eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	f04f 0000 	mov.w	r0, #0
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	0159      	lsls	r1, r3, #5
 8004f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0e:	0150      	lsls	r0, r2, #5
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4641      	mov	r1, r8
 8004f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f34:	ebb2 040a 	subs.w	r4, r2, sl
 8004f38:	eb63 050b 	sbc.w	r5, r3, fp
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	00eb      	lsls	r3, r5, #3
 8004f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f4a:	00e2      	lsls	r2, r4, #3
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	461d      	mov	r5, r3
 8004f50:	4643      	mov	r3, r8
 8004f52:	18e3      	adds	r3, r4, r3
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	464b      	mov	r3, r9
 8004f58:	eb45 0303 	adc.w	r3, r5, r3
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	028b      	lsls	r3, r1, #10
 8004f6e:	4621      	mov	r1, r4
 8004f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f74:	4621      	mov	r1, r4
 8004f76:	028a      	lsls	r2, r1, #10
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7e:	2200      	movs	r2, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	61fa      	str	r2, [r7, #28]
 8004f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f88:	f7fb f97a 	bl	8000280 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4613      	mov	r3, r2
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fae:	e002      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3750      	adds	r7, #80	; 0x50
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	007a1200 	.word	0x007a1200

08004fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d038      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ff8:	4b68      	ldr	r3, [pc, #416]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ffe:	f7fe fc4f 	bl	80038a0 <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005006:	f7fe fc4b 	bl	80038a0 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0bd      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005018:	4b61      	ldr	r3, [pc, #388]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	019b      	lsls	r3, r3, #6
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	495a      	ldr	r1, [pc, #360]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800503e:	4b57      	ldr	r3, [pc, #348]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005044:	f7fe fc2c 	bl	80038a0 <HAL_GetTick>
 8005048:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800504c:	f7fe fc28 	bl	80038a0 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e09a      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800505e:	4b50      	ldr	r3, [pc, #320]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 8083 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	4b48      	ldr	r3, [pc, #288]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	4a47      	ldr	r2, [pc, #284]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6413      	str	r3, [r2, #64]	; 0x40
 8005088:	4b45      	ldr	r3, [pc, #276]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005094:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a42      	ldr	r2, [pc, #264]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050a0:	f7fe fbfe 	bl	80038a0 <HAL_GetTick>
 80050a4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050a8:	f7fe fbfa 	bl	80038a0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e06c      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050ba:	4b3a      	ldr	r3, [pc, #232]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c6:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02f      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d028      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e4:	4b2e      	ldr	r3, [pc, #184]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ee:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050fa:	4a29      	ldr	r2, [pc, #164]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d114      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800510c:	f7fe fbc8 	bl	80038a0 <HAL_GetTick>
 8005110:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005112:	e00a      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005114:	f7fe fbc4 	bl	80038a0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e034      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0ee      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005142:	d10d      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005144:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005158:	4911      	ldr	r1, [pc, #68]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
 800515e:	e005      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005166:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800516a:	6093      	str	r3, [r2, #8]
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005178:	4909      	ldr	r1, [pc, #36]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517a:	4313      	orrs	r3, r2
 800517c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7d1a      	ldrb	r2, [r3, #20]
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005190:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	42470068 	.word	0x42470068
 80051a0:	40023800 	.word	0x40023800
 80051a4:	40007000 	.word	0x40007000
 80051a8:	42470e40 	.word	0x42470e40
 80051ac:	424711e0 	.word	0x424711e0

080051b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e066      	b.n	8005294 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7f5b      	ldrb	r3, [r3, #29]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fe f936 	bl	8003448 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	22ca      	movs	r2, #202	; 0xca
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2253      	movs	r2, #83	; 0x53
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fbce 	bl	8005994 <RTC_EnterInitMode>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d12c      	bne.n	800525c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6899      	ldr	r1, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68d2      	ldr	r2, [r2, #12]
 800523c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6919      	ldr	r1, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	041a      	lsls	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fbd5 	bl	8005a02 <RTC_ExitInitMode>
 8005258:	4603      	mov	r3, r0
 800525a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d113      	bne.n	800528a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	7f1b      	ldrb	r3, [r3, #28]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_RTC_SetTime+0x1c>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e087      	b.n	80053c8 <HAL_RTC_SetTime+0x12c>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2202      	movs	r2, #2
 80052c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d126      	bne.n	8005318 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fbb2 	bl	8005a4c <RTC_ByteToBcd2>
 80052e8:	4603      	mov	r3, r0
 80052ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fbab 	bl	8005a4c <RTC_ByteToBcd2>
 80052f6:	4603      	mov	r3, r0
 80052f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	789b      	ldrb	r3, [r3, #2]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fba3 	bl	8005a4c <RTC_ByteToBcd2>
 8005306:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005308:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e018      	b.n	800534a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005338:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800533e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	22ca      	movs	r2, #202	; 0xca
 8005350:	625a      	str	r2, [r3, #36]	; 0x24
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2253      	movs	r2, #83	; 0x53
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fb1a 	bl	8005994 <RTC_EnterInitMode>
 8005360:	4603      	mov	r3, r0
 8005362:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d120      	bne.n	80053ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005374:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005378:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005388:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6899      	ldr	r1, [r3, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fb2d 	bl	8005a02 <RTC_ExitInitMode>
 80053a8:	4603      	mov	r3, r0
 80053aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	22ff      	movs	r2, #255	; 0xff
 80053be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	771a      	strb	r2, [r3, #28]

  return status;
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}

080053d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005402:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005406:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005412:	b2da      	uxtb	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	0d9b      	lsrs	r3, r3, #22
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d11a      	bne.n	8005482 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fb18 	bl	8005a86 <RTC_Bcd2ToByte>
 8005456:	4603      	mov	r3, r0
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fb0f 	bl	8005a86 <RTC_Bcd2ToByte>
 8005468:	4603      	mov	r3, r0
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	789b      	ldrb	r3, [r3, #2]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fb06 	bl	8005a86 <RTC_Bcd2ToByte>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	7f1b      	ldrb	r3, [r3, #28]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_RTC_SetDate+0x1c>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e071      	b.n	800558c <HAL_RTC_SetDate+0x100>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2202      	movs	r2, #2
 80054b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10e      	bne.n	80054d8 <HAL_RTC_SetDate+0x4c>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	330a      	adds	r3, #10
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11c      	bne.n	8005518 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	78db      	ldrb	r3, [r3, #3]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fab2 	bl	8005a4c <RTC_ByteToBcd2>
 80054e8:	4603      	mov	r3, r0
 80054ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 faab 	bl	8005a4c <RTC_ByteToBcd2>
 80054f6:	4603      	mov	r3, r0
 80054f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	789b      	ldrb	r3, [r3, #2]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 faa3 	bl	8005a4c <RTC_ByteToBcd2>
 8005506:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005508:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e00e      	b.n	8005536 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	78db      	ldrb	r3, [r3, #3]
 800551c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005524:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800552a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	22ca      	movs	r2, #202	; 0xca
 800553c:	625a      	str	r2, [r3, #36]	; 0x24
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2253      	movs	r2, #83	; 0x53
 8005544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fa24 	bl	8005994 <RTC_EnterInitMode>
 800554c:	4603      	mov	r3, r0
 800554e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10c      	bne.n	8005570 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005560:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005564:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fa4b 	bl	8005a02 <RTC_ExitInitMode>
 800556c:	4603      	mov	r3, r0
 800556e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	771a      	strb	r2, [r3, #28]

  return status;
 800558a:	7cfb      	ldrb	r3, [r7, #19]
}
 800558c:	4618      	mov	r0, r3
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd90      	pop	{r4, r7, pc}

08005594 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	0c1b      	lsrs	r3, r3, #16
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	0b5b      	lsrs	r3, r3, #13
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11a      	bne.n	8005628 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	78db      	ldrb	r3, [r3, #3]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fa45 	bl	8005a86 <RTC_Bcd2ToByte>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fa3c 	bl	8005a86 <RTC_Bcd2ToByte>
 800560e:	4603      	mov	r3, r0
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	789b      	ldrb	r3, [r3, #2]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fa33 	bl	8005a86 <RTC_Bcd2ToByte>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005640:	4b9a      	ldr	r3, [pc, #616]	; (80058ac <HAL_RTC_SetAlarm_IT+0x278>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a9a      	ldr	r2, [pc, #616]	; (80058b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	0adb      	lsrs	r3, r3, #11
 800564c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	7f1b      	ldrb	r3, [r3, #28]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_RTC_SetAlarm_IT+0x36>
 8005666:	2302      	movs	r3, #2
 8005668:	e11c      	b.n	80058a4 <HAL_RTC_SetAlarm_IT+0x270>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2202      	movs	r2, #2
 8005674:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d137      	bne.n	80056ec <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d102      	bne.n	8005690 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f9d9 	bl	8005a4c <RTC_ByteToBcd2>
 800569a:	4603      	mov	r3, r0
 800569c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f9d2 	bl	8005a4c <RTC_ByteToBcd2>
 80056a8:	4603      	mov	r3, r0
 80056aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80056ac:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	789b      	ldrb	r3, [r3, #2]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f9ca 	bl	8005a4c <RTC_ByteToBcd2>
 80056b8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80056c4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f9bc 	bl	8005a4c <RTC_ByteToBcd2>
 80056d4:	4603      	mov	r3, r0
 80056d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80056d8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80056e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	e023      	b.n	8005734 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800570c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005712:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	78db      	ldrb	r3, [r3, #3]
 8005718:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800571a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005722:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005724:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800572a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005730:	4313      	orrs	r3, r2
 8005732:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	22ca      	movs	r2, #202	; 0xca
 8005746:	625a      	str	r2, [r3, #36]	; 0x24
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2253      	movs	r2, #83	; 0x53
 800574e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005758:	d141      	bne.n	80057de <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005768:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800577a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1e5a      	subs	r2, r3, #1
 8005780:	617a      	str	r2, [r7, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	22ff      	movs	r2, #255	; 0xff
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2203      	movs	r2, #3
 8005792:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e082      	b.n	80058a4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0e7      	beq.n	800577c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	e04b      	b.n	8005876 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057ec:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 80057fe:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_RTC_SetAlarm_IT+0x278>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	0adb      	lsrs	r3, r3, #11
 800580c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005810:	fb02 f303 	mul.w	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	1e5a      	subs	r2, r3, #1
 800581a:	617a      	str	r2, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2203      	movs	r2, #3
 800582c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e035      	b.n	80058a4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0e7      	beq.n	8005816 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005864:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005874:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005876:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <HAL_RTC_SetAlarm_IT+0x280>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a0e      	ldr	r2, [pc, #56]	; (80058b4 <HAL_RTC_SetAlarm_IT+0x280>)
 800587c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005880:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <HAL_RTC_SetAlarm_IT+0x280>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <HAL_RTC_SetAlarm_IT+0x280>)
 8005888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3724      	adds	r7, #36	; 0x24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}
 80058ac:	20000020 	.word	0x20000020
 80058b0:	10624dd3 	.word	0x10624dd3
 80058b4:	40013c00 	.word	0x40013c00

080058b8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fd f993 	bl	8002c08 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80058f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d012      	beq.n	8005928 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f8d4 	bl	8005abe <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005926:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_RTC_AlarmIRQHandler+0x88>)
 800592a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800592e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	775a      	strb	r2, [r3, #29]
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40013c00 	.word	0x40013c00

08005944 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800595e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005960:	f7fd ff9e 	bl	80038a0 <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005966:	e009      	b.n	800597c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005968:	f7fd ff9a 	bl	80038a0 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005976:	d901      	bls.n	800597c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e007      	b.n	800598c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0ee      	beq.n	8005968 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d122      	bne.n	80059f8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059c2:	f7fd ff6d 	bl	80038a0 <HAL_GetTick>
 80059c6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059c8:	e00c      	b.n	80059e4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059ca:	f7fd ff69 	bl	80038a0 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059d8:	d904      	bls.n	80059e4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2204      	movs	r2, #4
 80059de:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <RTC_EnterInitMode+0x64>
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d1e8      	bne.n	80059ca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a1c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ff89 	bl	8005944 <HAL_RTC_WaitForSynchro>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005a5a:	e005      	b.n	8005a68 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	3b0a      	subs	r3, #10
 8005a66:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d8f6      	bhi.n	8005a5c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	b2db      	uxtb	r3, r3
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	0092      	lsls	r2, r2, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	4413      	add	r3, r2
 8005ab0:	b2db      	uxtb	r3, r3
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e07b      	b.n	8005bdc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af4:	d009      	beq.n	8005b0a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	61da      	str	r2, [r3, #28]
 8005afc:	e005      	b.n	8005b0a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fd fcc3 	bl	80034b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	ea42 0103 	orr.w	r1, r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	f003 0104 	and.w	r1, r3, #4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	f003 0210 	and.w	r2, r3, #16
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69da      	ldr	r2, [r3, #28]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_SPI_Transmit+0x22>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e126      	b.n	8005e54 <HAL_SPI_Transmit+0x270>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c0e:	f7fd fe47 	bl	80038a0 <HAL_GetTick>
 8005c12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d002      	beq.n	8005c2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
 8005c26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c28:	e10b      	b.n	8005e42 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_SPI_Transmit+0x52>
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c3a:	e102      	b.n	8005e42 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c82:	d10f      	bne.n	8005ca4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d007      	beq.n	8005cc2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cca:	d14b      	bne.n	8005d64 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_SPI_Transmit+0xf6>
 8005cd4:	8afb      	ldrh	r3, [r7, #22]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d13e      	bne.n	8005d58 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	881a      	ldrh	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	1c9a      	adds	r2, r3, #2
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cfe:	e02b      	b.n	8005d58 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d112      	bne.n	8005d34 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	881a      	ldrh	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d32:	e011      	b.n	8005d58 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d34:	f7fd fdb4 	bl	80038a0 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d803      	bhi.n	8005d4c <HAL_SPI_Transmit+0x168>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d102      	bne.n	8005d52 <HAL_SPI_Transmit+0x16e>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d102      	bne.n	8005d58 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d56:	e074      	b.n	8005e42 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1ce      	bne.n	8005d00 <HAL_SPI_Transmit+0x11c>
 8005d62:	e04c      	b.n	8005dfe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_SPI_Transmit+0x18e>
 8005d6c:	8afb      	ldrh	r3, [r7, #22]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d140      	bne.n	8005df4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d98:	e02c      	b.n	8005df4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d113      	bne.n	8005dd0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	7812      	ldrb	r2, [r2, #0]
 8005db4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dce:	e011      	b.n	8005df4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dd0:	f7fd fd66 	bl	80038a0 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d803      	bhi.n	8005de8 <HAL_SPI_Transmit+0x204>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d102      	bne.n	8005dee <HAL_SPI_Transmit+0x20a>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005df2:	e026      	b.n	8005e42 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1cd      	bne.n	8005d9a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f8b2 	bl	8005f6c <SPI_EndRxTxTransaction>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e000      	b.n	8005e42 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e6c:	f7fd fd18 	bl	80038a0 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4413      	add	r3, r2
 8005e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e7c:	f7fd fd10 	bl	80038a0 <HAL_GetTick>
 8005e80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e82:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	015b      	lsls	r3, r3, #5
 8005e88:	0d1b      	lsrs	r3, r3, #20
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e92:	e054      	b.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d050      	beq.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e9c:	f7fd fd00 	bl	80038a0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d902      	bls.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d13d      	bne.n	8005f2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eca:	d111      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed4:	d004      	beq.n	8005ee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ede:	d107      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef8:	d10f      	bne.n	8005f1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e017      	b.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bf0c      	ite	eq
 8005f4e:	2301      	moveq	r3, #1
 8005f50:	2300      	movne	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d19b      	bne.n	8005e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000020 	.word	0x20000020

08005f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f78:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <SPI_EndRxTxTransaction+0x7c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <SPI_EndRxTxTransaction+0x80>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	0d5b      	lsrs	r3, r3, #21
 8005f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f96:	d112      	bne.n	8005fbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2180      	movs	r1, #128	; 0x80
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff ff5a 	bl	8005e5c <SPI_WaitFlagStateUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d016      	beq.n	8005fdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb2:	f043 0220 	orr.w	r2, r3, #32
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e00f      	b.n	8005fde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d0f2      	beq.n	8005fbe <SPI_EndRxTxTransaction+0x52>
 8005fd8:	e000      	b.n	8005fdc <SPI_EndRxTxTransaction+0x70>
        break;
 8005fda:	bf00      	nop
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000020 	.word	0x20000020
 8005fec:	165e9f81 	.word	0x165e9f81

08005ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e041      	b.n	8006086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fd fa92 	bl	8003540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f000 fc4a 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d001      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e044      	b.n	8006132 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <HAL_TIM_Base_Start_IT+0xb0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d018      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x6c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d2:	d013      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x6c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1a      	ldr	r2, [pc, #104]	; (8006144 <HAL_TIM_Base_Start_IT+0xb4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00e      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x6c>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a19      	ldr	r2, [pc, #100]	; (8006148 <HAL_TIM_Base_Start_IT+0xb8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d009      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x6c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <HAL_TIM_Base_Start_IT+0xbc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x6c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a16      	ldr	r2, [pc, #88]	; (8006150 <HAL_TIM_Base_Start_IT+0xc0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d111      	bne.n	8006120 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b06      	cmp	r3, #6
 800610c:	d010      	beq.n	8006130 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611e:	e007      	b.n	8006130 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40014000 	.word	0x40014000

08006154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e041      	b.n	80061ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fd fa08 	bl	8003590 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f000 fb98 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <HAL_TIM_PWM_Start+0x24>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e022      	b.n	800625e <HAL_TIM_PWM_Start+0x6a>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d109      	bne.n	8006232 <HAL_TIM_PWM_Start+0x3e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e015      	b.n	800625e <HAL_TIM_PWM_Start+0x6a>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start+0x58>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e008      	b.n	800625e <HAL_TIM_PWM_Start+0x6a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	bf14      	ite	ne
 8006258:	2301      	movne	r3, #1
 800625a:	2300      	moveq	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e068      	b.n	8006338 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start+0x82>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006274:	e013      	b.n	800629e <HAL_TIM_PWM_Start+0xaa>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b04      	cmp	r3, #4
 800627a:	d104      	bne.n	8006286 <HAL_TIM_PWM_Start+0x92>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006284:	e00b      	b.n	800629e <HAL_TIM_PWM_Start+0xaa>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d104      	bne.n	8006296 <HAL_TIM_PWM_Start+0xa2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006294:	e003      	b.n	800629e <HAL_TIM_PWM_Start+0xaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fdb4 	bl	8006e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a23      	ldr	r2, [pc, #140]	; (8006340 <HAL_TIM_PWM_Start+0x14c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <HAL_TIM_PWM_Start+0x14c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_TIM_PWM_Start+0x10e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d013      	beq.n	8006302 <HAL_TIM_PWM_Start+0x10e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a19      	ldr	r2, [pc, #100]	; (8006344 <HAL_TIM_PWM_Start+0x150>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_TIM_PWM_Start+0x10e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a17      	ldr	r2, [pc, #92]	; (8006348 <HAL_TIM_PWM_Start+0x154>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_TIM_PWM_Start+0x10e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIM_PWM_Start+0x158>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_TIM_PWM_Start+0x10e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <HAL_TIM_PWM_Start+0x15c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d111      	bne.n	8006326 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b06      	cmp	r3, #6
 8006312:	d010      	beq.n	8006336 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	e007      	b.n	8006336 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40014000 	.word	0x40014000

08006354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0202 	mvn.w	r2, #2
 8006380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa77 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa69 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa7a 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d122      	bne.n	8006404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0204 	mvn.w	r2, #4
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa4d 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fa3f 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fa50 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d122      	bne.n	8006458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d11b      	bne.n	8006458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0208 	mvn.w	r2, #8
 8006428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa23 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 8006444:	e005      	b.n	8006452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa15 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa26 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b10      	cmp	r3, #16
 8006464:	d122      	bne.n	80064ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d11b      	bne.n	80064ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0210 	mvn.w	r2, #16
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2208      	movs	r2, #8
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9f9 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f9eb 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f9fc 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d10e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0201 	mvn.w	r2, #1
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fc fbb2 	bl	8002c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	d10e      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d107      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fd26 	bl	8006f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d10e      	bne.n	8006530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d107      	bne.n	8006530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9c1 	bl	80068b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b20      	cmp	r3, #32
 800653c:	d10e      	bne.n	800655c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b20      	cmp	r3, #32
 800654a:	d107      	bne.n	800655c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0220 	mvn.w	r2, #32
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fcf0 	bl	8006f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800657e:	2302      	movs	r3, #2
 8006580:	e0ae      	b.n	80066e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b0c      	cmp	r3, #12
 800658e:	f200 809f 	bhi.w	80066d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065cd 	.word	0x080065cd
 800659c:	080066d1 	.word	0x080066d1
 80065a0:	080066d1 	.word	0x080066d1
 80065a4:	080066d1 	.word	0x080066d1
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	080066d1 	.word	0x080066d1
 80065b0:	080066d1 	.word	0x080066d1
 80065b4:	080066d1 	.word	0x080066d1
 80065b8:	0800664f 	.word	0x0800664f
 80065bc:	080066d1 	.word	0x080066d1
 80065c0:	080066d1 	.word	0x080066d1
 80065c4:	080066d1 	.word	0x080066d1
 80065c8:	0800668f 	.word	0x0800668f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f9f8 	bl	80069c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	619a      	str	r2, [r3, #24]
      break;
 800660a:	e064      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fa3e 	bl	8006a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]
      break;
 800664c:	e043      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fa89 	bl	8006b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0208 	orr.w	r2, r2, #8
 8006668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0204 	bic.w	r2, r2, #4
 8006678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	61da      	str	r2, [r3, #28]
      break;
 800668c:	e023      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fad3 	bl	8006c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69d9      	ldr	r1, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	021a      	lsls	r2, r3, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	61da      	str	r2, [r3, #28]
      break;
 80066ce:	e002      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	75fb      	strb	r3, [r7, #23]
      break;
 80066d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_ConfigClockSource+0x1c>
 8006700:	2302      	movs	r3, #2
 8006702:	e0b4      	b.n	800686e <HAL_TIM_ConfigClockSource+0x186>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800672a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673c:	d03e      	beq.n	80067bc <HAL_TIM_ConfigClockSource+0xd4>
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006742:	f200 8087 	bhi.w	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	f000 8086 	beq.w	800685a <HAL_TIM_ConfigClockSource+0x172>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006752:	d87f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006754:	2b70      	cmp	r3, #112	; 0x70
 8006756:	d01a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0xa6>
 8006758:	2b70      	cmp	r3, #112	; 0x70
 800675a:	d87b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800675c:	2b60      	cmp	r3, #96	; 0x60
 800675e:	d050      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x11a>
 8006760:	2b60      	cmp	r3, #96	; 0x60
 8006762:	d877      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006764:	2b50      	cmp	r3, #80	; 0x50
 8006766:	d03c      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006768:	2b50      	cmp	r3, #80	; 0x50
 800676a:	d873      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d058      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x13a>
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d86f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006774:	2b30      	cmp	r3, #48	; 0x30
 8006776:	d064      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006778:	2b30      	cmp	r3, #48	; 0x30
 800677a:	d86b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d060      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d867      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d05c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006788:	2b10      	cmp	r3, #16
 800678a:	d05a      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 800678c:	e062      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6899      	ldr	r1, [r3, #8]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f000 fb19 	bl	8006dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]
      break;
 80067ba:	e04f      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f000 fb02 	bl	8006dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067de:	609a      	str	r2, [r3, #8]
      break;
 80067e0:	e03c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f000 fa76 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2150      	movs	r1, #80	; 0x50
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 facf 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006800:	e02c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6859      	ldr	r1, [r3, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	461a      	mov	r2, r3
 8006810:	f000 fa95 	bl	8006d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2160      	movs	r1, #96	; 0x60
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fabf 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006820:	e01c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6859      	ldr	r1, [r3, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	461a      	mov	r2, r3
 8006830:	f000 fa56 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2140      	movs	r1, #64	; 0x40
 800683a:	4618      	mov	r0, r3
 800683c:	f000 faaf 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006840:	e00c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f000 faa6 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006852:	e003      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e000      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800685a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a34      	ldr	r2, [pc, #208]	; (80069ac <TIM_Base_SetConfig+0xe4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00f      	beq.n	8006900 <TIM_Base_SetConfig+0x38>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e6:	d00b      	beq.n	8006900 <TIM_Base_SetConfig+0x38>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a31      	ldr	r2, [pc, #196]	; (80069b0 <TIM_Base_SetConfig+0xe8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d007      	beq.n	8006900 <TIM_Base_SetConfig+0x38>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a30      	ldr	r2, [pc, #192]	; (80069b4 <TIM_Base_SetConfig+0xec>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d003      	beq.n	8006900 <TIM_Base_SetConfig+0x38>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a2f      	ldr	r2, [pc, #188]	; (80069b8 <TIM_Base_SetConfig+0xf0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d108      	bne.n	8006912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a25      	ldr	r2, [pc, #148]	; (80069ac <TIM_Base_SetConfig+0xe4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d01b      	beq.n	8006952 <TIM_Base_SetConfig+0x8a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006920:	d017      	beq.n	8006952 <TIM_Base_SetConfig+0x8a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <TIM_Base_SetConfig+0xe8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <TIM_Base_SetConfig+0x8a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <TIM_Base_SetConfig+0xec>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00f      	beq.n	8006952 <TIM_Base_SetConfig+0x8a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a20      	ldr	r2, [pc, #128]	; (80069b8 <TIM_Base_SetConfig+0xf0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00b      	beq.n	8006952 <TIM_Base_SetConfig+0x8a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <TIM_Base_SetConfig+0xf4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d007      	beq.n	8006952 <TIM_Base_SetConfig+0x8a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <TIM_Base_SetConfig+0xf8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d003      	beq.n	8006952 <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <TIM_Base_SetConfig+0xfc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d108      	bne.n	8006964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a08      	ldr	r2, [pc, #32]	; (80069ac <TIM_Base_SetConfig+0xe4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d103      	bne.n	8006998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	615a      	str	r2, [r3, #20]
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40010000 	.word	0x40010000
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800

080069c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f023 0201 	bic.w	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 0302 	bic.w	r3, r3, #2
 8006a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <TIM_OC1_SetConfig+0xc8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d10c      	bne.n	8006a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f023 0308 	bic.w	r3, r3, #8
 8006a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 0304 	bic.w	r3, r3, #4
 8006a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <TIM_OC1_SetConfig+0xc8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d111      	bne.n	8006a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40010000 	.word	0x40010000

08006a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0210 	bic.w	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f023 0320 	bic.w	r3, r3, #32
 8006ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <TIM_OC2_SetConfig+0xd4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d10d      	bne.n	8006b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <TIM_OC2_SetConfig+0xd4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d113      	bne.n	8006b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000

08006b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <TIM_OC3_SetConfig+0xd0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10d      	bne.n	8006be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <TIM_OC3_SetConfig+0xd0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d113      	bne.n	8006c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	40010000 	.word	0x40010000

08006c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <TIM_OC4_SetConfig+0x9c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000

08006ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f023 030a 	bic.w	r3, r3, #10
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b087      	sub	sp, #28
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0210 	bic.w	r2, r3, #16
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	031b      	lsls	r3, r3, #12
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f043 0307 	orr.w	r3, r3, #7
 8006dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	021a      	lsls	r2, r3, #8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	2201      	movs	r2, #1
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	43db      	mvns	r3, r3
 8006e36:	401a      	ands	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1a      	ldr	r2, [r3, #32]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 031f 	and.w	r3, r3, #31
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e050      	b.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1c      	ldr	r2, [pc, #112]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec4:	d013      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a18      	ldr	r2, [pc, #96]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a16      	ldr	r2, [pc, #88]	; (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a15      	ldr	r2, [pc, #84]	; (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10c      	bne.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40010000 	.word	0x40010000
 8006f2c:	40000400 	.word	0x40000400
 8006f30:	40000800 	.word	0x40000800
 8006f34:	40000c00 	.word	0x40000c00
 8006f38:	40014000 	.word	0x40014000

08006f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <__errno>:
 8006f64:	4b01      	ldr	r3, [pc, #4]	; (8006f6c <__errno+0x8>)
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	2000002c 	.word	0x2000002c

08006f70 <__libc_init_array>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4d0d      	ldr	r5, [pc, #52]	; (8006fa8 <__libc_init_array+0x38>)
 8006f74:	4c0d      	ldr	r4, [pc, #52]	; (8006fac <__libc_init_array+0x3c>)
 8006f76:	1b64      	subs	r4, r4, r5
 8006f78:	10a4      	asrs	r4, r4, #2
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	42a6      	cmp	r6, r4
 8006f7e:	d109      	bne.n	8006f94 <__libc_init_array+0x24>
 8006f80:	4d0b      	ldr	r5, [pc, #44]	; (8006fb0 <__libc_init_array+0x40>)
 8006f82:	4c0c      	ldr	r4, [pc, #48]	; (8006fb4 <__libc_init_array+0x44>)
 8006f84:	f000 fca4 	bl	80078d0 <_init>
 8006f88:	1b64      	subs	r4, r4, r5
 8006f8a:	10a4      	asrs	r4, r4, #2
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	42a6      	cmp	r6, r4
 8006f90:	d105      	bne.n	8006f9e <__libc_init_array+0x2e>
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f98:	4798      	blx	r3
 8006f9a:	3601      	adds	r6, #1
 8006f9c:	e7ee      	b.n	8006f7c <__libc_init_array+0xc>
 8006f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa2:	4798      	blx	r3
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	e7f2      	b.n	8006f8e <__libc_init_array+0x1e>
 8006fa8:	08028258 	.word	0x08028258
 8006fac:	08028258 	.word	0x08028258
 8006fb0:	08028258 	.word	0x08028258
 8006fb4:	0802825c 	.word	0x0802825c

08006fb8 <malloc>:
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <malloc+0xc>)
 8006fba:	4601      	mov	r1, r0
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	f000 b87f 	b.w	80070c0 <_malloc_r>
 8006fc2:	bf00      	nop
 8006fc4:	2000002c 	.word	0x2000002c

08006fc8 <free>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <free+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f000 b80b 	b.w	8006fe8 <_free_r>
 8006fd2:	bf00      	nop
 8006fd4:	2000002c 	.word	0x2000002c

08006fd8 <memset>:
 8006fd8:	4402      	add	r2, r0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d100      	bne.n	8006fe2 <memset+0xa>
 8006fe0:	4770      	bx	lr
 8006fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe6:	e7f9      	b.n	8006fdc <memset+0x4>

08006fe8 <_free_r>:
 8006fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fea:	2900      	cmp	r1, #0
 8006fec:	d044      	beq.n	8007078 <_free_r+0x90>
 8006fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff2:	9001      	str	r0, [sp, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f1a1 0404 	sub.w	r4, r1, #4
 8006ffa:	bfb8      	it	lt
 8006ffc:	18e4      	addlt	r4, r4, r3
 8006ffe:	f000 f90b 	bl	8007218 <__malloc_lock>
 8007002:	4a1e      	ldr	r2, [pc, #120]	; (800707c <_free_r+0x94>)
 8007004:	9801      	ldr	r0, [sp, #4]
 8007006:	6813      	ldr	r3, [r2, #0]
 8007008:	b933      	cbnz	r3, 8007018 <_free_r+0x30>
 800700a:	6063      	str	r3, [r4, #4]
 800700c:	6014      	str	r4, [r2, #0]
 800700e:	b003      	add	sp, #12
 8007010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007014:	f000 b906 	b.w	8007224 <__malloc_unlock>
 8007018:	42a3      	cmp	r3, r4
 800701a:	d908      	bls.n	800702e <_free_r+0x46>
 800701c:	6825      	ldr	r5, [r4, #0]
 800701e:	1961      	adds	r1, r4, r5
 8007020:	428b      	cmp	r3, r1
 8007022:	bf01      	itttt	eq
 8007024:	6819      	ldreq	r1, [r3, #0]
 8007026:	685b      	ldreq	r3, [r3, #4]
 8007028:	1949      	addeq	r1, r1, r5
 800702a:	6021      	streq	r1, [r4, #0]
 800702c:	e7ed      	b.n	800700a <_free_r+0x22>
 800702e:	461a      	mov	r2, r3
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	b10b      	cbz	r3, 8007038 <_free_r+0x50>
 8007034:	42a3      	cmp	r3, r4
 8007036:	d9fa      	bls.n	800702e <_free_r+0x46>
 8007038:	6811      	ldr	r1, [r2, #0]
 800703a:	1855      	adds	r5, r2, r1
 800703c:	42a5      	cmp	r5, r4
 800703e:	d10b      	bne.n	8007058 <_free_r+0x70>
 8007040:	6824      	ldr	r4, [r4, #0]
 8007042:	4421      	add	r1, r4
 8007044:	1854      	adds	r4, r2, r1
 8007046:	42a3      	cmp	r3, r4
 8007048:	6011      	str	r1, [r2, #0]
 800704a:	d1e0      	bne.n	800700e <_free_r+0x26>
 800704c:	681c      	ldr	r4, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	6053      	str	r3, [r2, #4]
 8007052:	4421      	add	r1, r4
 8007054:	6011      	str	r1, [r2, #0]
 8007056:	e7da      	b.n	800700e <_free_r+0x26>
 8007058:	d902      	bls.n	8007060 <_free_r+0x78>
 800705a:	230c      	movs	r3, #12
 800705c:	6003      	str	r3, [r0, #0]
 800705e:	e7d6      	b.n	800700e <_free_r+0x26>
 8007060:	6825      	ldr	r5, [r4, #0]
 8007062:	1961      	adds	r1, r4, r5
 8007064:	428b      	cmp	r3, r1
 8007066:	bf04      	itt	eq
 8007068:	6819      	ldreq	r1, [r3, #0]
 800706a:	685b      	ldreq	r3, [r3, #4]
 800706c:	6063      	str	r3, [r4, #4]
 800706e:	bf04      	itt	eq
 8007070:	1949      	addeq	r1, r1, r5
 8007072:	6021      	streq	r1, [r4, #0]
 8007074:	6054      	str	r4, [r2, #4]
 8007076:	e7ca      	b.n	800700e <_free_r+0x26>
 8007078:	b003      	add	sp, #12
 800707a:	bd30      	pop	{r4, r5, pc}
 800707c:	20000240 	.word	0x20000240

08007080 <sbrk_aligned>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	4e0e      	ldr	r6, [pc, #56]	; (80070bc <sbrk_aligned+0x3c>)
 8007084:	460c      	mov	r4, r1
 8007086:	6831      	ldr	r1, [r6, #0]
 8007088:	4605      	mov	r5, r0
 800708a:	b911      	cbnz	r1, 8007092 <sbrk_aligned+0x12>
 800708c:	f000 f894 	bl	80071b8 <_sbrk_r>
 8007090:	6030      	str	r0, [r6, #0]
 8007092:	4621      	mov	r1, r4
 8007094:	4628      	mov	r0, r5
 8007096:	f000 f88f 	bl	80071b8 <_sbrk_r>
 800709a:	1c43      	adds	r3, r0, #1
 800709c:	d00a      	beq.n	80070b4 <sbrk_aligned+0x34>
 800709e:	1cc4      	adds	r4, r0, #3
 80070a0:	f024 0403 	bic.w	r4, r4, #3
 80070a4:	42a0      	cmp	r0, r4
 80070a6:	d007      	beq.n	80070b8 <sbrk_aligned+0x38>
 80070a8:	1a21      	subs	r1, r4, r0
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 f884 	bl	80071b8 <_sbrk_r>
 80070b0:	3001      	adds	r0, #1
 80070b2:	d101      	bne.n	80070b8 <sbrk_aligned+0x38>
 80070b4:	f04f 34ff 	mov.w	r4, #4294967295
 80070b8:	4620      	mov	r0, r4
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	20000244 	.word	0x20000244

080070c0 <_malloc_r>:
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	1ccd      	adds	r5, r1, #3
 80070c6:	f025 0503 	bic.w	r5, r5, #3
 80070ca:	3508      	adds	r5, #8
 80070cc:	2d0c      	cmp	r5, #12
 80070ce:	bf38      	it	cc
 80070d0:	250c      	movcc	r5, #12
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	4607      	mov	r7, r0
 80070d6:	db01      	blt.n	80070dc <_malloc_r+0x1c>
 80070d8:	42a9      	cmp	r1, r5
 80070da:	d905      	bls.n	80070e8 <_malloc_r+0x28>
 80070dc:	230c      	movs	r3, #12
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	2600      	movs	r6, #0
 80070e2:	4630      	mov	r0, r6
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e8:	4e2e      	ldr	r6, [pc, #184]	; (80071a4 <_malloc_r+0xe4>)
 80070ea:	f000 f895 	bl	8007218 <__malloc_lock>
 80070ee:	6833      	ldr	r3, [r6, #0]
 80070f0:	461c      	mov	r4, r3
 80070f2:	bb34      	cbnz	r4, 8007142 <_malloc_r+0x82>
 80070f4:	4629      	mov	r1, r5
 80070f6:	4638      	mov	r0, r7
 80070f8:	f7ff ffc2 	bl	8007080 <sbrk_aligned>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	4604      	mov	r4, r0
 8007100:	d14d      	bne.n	800719e <_malloc_r+0xde>
 8007102:	6834      	ldr	r4, [r6, #0]
 8007104:	4626      	mov	r6, r4
 8007106:	2e00      	cmp	r6, #0
 8007108:	d140      	bne.n	800718c <_malloc_r+0xcc>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	4631      	mov	r1, r6
 800710e:	4638      	mov	r0, r7
 8007110:	eb04 0803 	add.w	r8, r4, r3
 8007114:	f000 f850 	bl	80071b8 <_sbrk_r>
 8007118:	4580      	cmp	r8, r0
 800711a:	d13a      	bne.n	8007192 <_malloc_r+0xd2>
 800711c:	6821      	ldr	r1, [r4, #0]
 800711e:	3503      	adds	r5, #3
 8007120:	1a6d      	subs	r5, r5, r1
 8007122:	f025 0503 	bic.w	r5, r5, #3
 8007126:	3508      	adds	r5, #8
 8007128:	2d0c      	cmp	r5, #12
 800712a:	bf38      	it	cc
 800712c:	250c      	movcc	r5, #12
 800712e:	4629      	mov	r1, r5
 8007130:	4638      	mov	r0, r7
 8007132:	f7ff ffa5 	bl	8007080 <sbrk_aligned>
 8007136:	3001      	adds	r0, #1
 8007138:	d02b      	beq.n	8007192 <_malloc_r+0xd2>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	442b      	add	r3, r5
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	e00e      	b.n	8007160 <_malloc_r+0xa0>
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	1b52      	subs	r2, r2, r5
 8007146:	d41e      	bmi.n	8007186 <_malloc_r+0xc6>
 8007148:	2a0b      	cmp	r2, #11
 800714a:	d916      	bls.n	800717a <_malloc_r+0xba>
 800714c:	1961      	adds	r1, r4, r5
 800714e:	42a3      	cmp	r3, r4
 8007150:	6025      	str	r5, [r4, #0]
 8007152:	bf18      	it	ne
 8007154:	6059      	strne	r1, [r3, #4]
 8007156:	6863      	ldr	r3, [r4, #4]
 8007158:	bf08      	it	eq
 800715a:	6031      	streq	r1, [r6, #0]
 800715c:	5162      	str	r2, [r4, r5]
 800715e:	604b      	str	r3, [r1, #4]
 8007160:	4638      	mov	r0, r7
 8007162:	f104 060b 	add.w	r6, r4, #11
 8007166:	f000 f85d 	bl	8007224 <__malloc_unlock>
 800716a:	f026 0607 	bic.w	r6, r6, #7
 800716e:	1d23      	adds	r3, r4, #4
 8007170:	1af2      	subs	r2, r6, r3
 8007172:	d0b6      	beq.n	80070e2 <_malloc_r+0x22>
 8007174:	1b9b      	subs	r3, r3, r6
 8007176:	50a3      	str	r3, [r4, r2]
 8007178:	e7b3      	b.n	80070e2 <_malloc_r+0x22>
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	42a3      	cmp	r3, r4
 800717e:	bf0c      	ite	eq
 8007180:	6032      	streq	r2, [r6, #0]
 8007182:	605a      	strne	r2, [r3, #4]
 8007184:	e7ec      	b.n	8007160 <_malloc_r+0xa0>
 8007186:	4623      	mov	r3, r4
 8007188:	6864      	ldr	r4, [r4, #4]
 800718a:	e7b2      	b.n	80070f2 <_malloc_r+0x32>
 800718c:	4634      	mov	r4, r6
 800718e:	6876      	ldr	r6, [r6, #4]
 8007190:	e7b9      	b.n	8007106 <_malloc_r+0x46>
 8007192:	230c      	movs	r3, #12
 8007194:	603b      	str	r3, [r7, #0]
 8007196:	4638      	mov	r0, r7
 8007198:	f000 f844 	bl	8007224 <__malloc_unlock>
 800719c:	e7a1      	b.n	80070e2 <_malloc_r+0x22>
 800719e:	6025      	str	r5, [r4, #0]
 80071a0:	e7de      	b.n	8007160 <_malloc_r+0xa0>
 80071a2:	bf00      	nop
 80071a4:	20000240 	.word	0x20000240

080071a8 <realloc>:
 80071a8:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <realloc+0xc>)
 80071aa:	460a      	mov	r2, r1
 80071ac:	4601      	mov	r1, r0
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f000 b83e 	b.w	8007230 <_realloc_r>
 80071b4:	2000002c 	.word	0x2000002c

080071b8 <_sbrk_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4d06      	ldr	r5, [pc, #24]	; (80071d4 <_sbrk_r+0x1c>)
 80071bc:	2300      	movs	r3, #0
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	602b      	str	r3, [r5, #0]
 80071c4:	f7fc fa94 	bl	80036f0 <_sbrk>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_sbrk_r+0x1a>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_sbrk_r+0x1a>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	20000248 	.word	0x20000248

080071d8 <siprintf>:
 80071d8:	b40e      	push	{r1, r2, r3}
 80071da:	b500      	push	{lr}
 80071dc:	b09c      	sub	sp, #112	; 0x70
 80071de:	ab1d      	add	r3, sp, #116	; 0x74
 80071e0:	9002      	str	r0, [sp, #8]
 80071e2:	9006      	str	r0, [sp, #24]
 80071e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071e8:	4809      	ldr	r0, [pc, #36]	; (8007210 <siprintf+0x38>)
 80071ea:	9107      	str	r1, [sp, #28]
 80071ec:	9104      	str	r1, [sp, #16]
 80071ee:	4909      	ldr	r1, [pc, #36]	; (8007214 <siprintf+0x3c>)
 80071f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f4:	9105      	str	r1, [sp, #20]
 80071f6:	6800      	ldr	r0, [r0, #0]
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	a902      	add	r1, sp, #8
 80071fc:	f000 f8a2 	bl	8007344 <_svfiprintf_r>
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	b01c      	add	sp, #112	; 0x70
 8007208:	f85d eb04 	ldr.w	lr, [sp], #4
 800720c:	b003      	add	sp, #12
 800720e:	4770      	bx	lr
 8007210:	2000002c 	.word	0x2000002c
 8007214:	ffff0208 	.word	0xffff0208

08007218 <__malloc_lock>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__malloc_lock+0x8>)
 800721a:	f000 bb27 	b.w	800786c <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	2000024c 	.word	0x2000024c

08007224 <__malloc_unlock>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__malloc_unlock+0x8>)
 8007226:	f000 bb22 	b.w	800786e <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	2000024c 	.word	0x2000024c

08007230 <_realloc_r>:
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007234:	4680      	mov	r8, r0
 8007236:	4614      	mov	r4, r2
 8007238:	460e      	mov	r6, r1
 800723a:	b921      	cbnz	r1, 8007246 <_realloc_r+0x16>
 800723c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	4611      	mov	r1, r2
 8007242:	f7ff bf3d 	b.w	80070c0 <_malloc_r>
 8007246:	b92a      	cbnz	r2, 8007254 <_realloc_r+0x24>
 8007248:	f7ff fece 	bl	8006fe8 <_free_r>
 800724c:	4625      	mov	r5, r4
 800724e:	4628      	mov	r0, r5
 8007250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007254:	f000 fb34 	bl	80078c0 <_malloc_usable_size_r>
 8007258:	4284      	cmp	r4, r0
 800725a:	4607      	mov	r7, r0
 800725c:	d802      	bhi.n	8007264 <_realloc_r+0x34>
 800725e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007262:	d812      	bhi.n	800728a <_realloc_r+0x5a>
 8007264:	4621      	mov	r1, r4
 8007266:	4640      	mov	r0, r8
 8007268:	f7ff ff2a 	bl	80070c0 <_malloc_r>
 800726c:	4605      	mov	r5, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	d0ed      	beq.n	800724e <_realloc_r+0x1e>
 8007272:	42bc      	cmp	r4, r7
 8007274:	4622      	mov	r2, r4
 8007276:	4631      	mov	r1, r6
 8007278:	bf28      	it	cs
 800727a:	463a      	movcs	r2, r7
 800727c:	f000 faf8 	bl	8007870 <memcpy>
 8007280:	4631      	mov	r1, r6
 8007282:	4640      	mov	r0, r8
 8007284:	f7ff feb0 	bl	8006fe8 <_free_r>
 8007288:	e7e1      	b.n	800724e <_realloc_r+0x1e>
 800728a:	4635      	mov	r5, r6
 800728c:	e7df      	b.n	800724e <_realloc_r+0x1e>

0800728e <__ssputs_r>:
 800728e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007292:	688e      	ldr	r6, [r1, #8]
 8007294:	429e      	cmp	r6, r3
 8007296:	4682      	mov	sl, r0
 8007298:	460c      	mov	r4, r1
 800729a:	4690      	mov	r8, r2
 800729c:	461f      	mov	r7, r3
 800729e:	d838      	bhi.n	8007312 <__ssputs_r+0x84>
 80072a0:	898a      	ldrh	r2, [r1, #12]
 80072a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072a6:	d032      	beq.n	800730e <__ssputs_r+0x80>
 80072a8:	6825      	ldr	r5, [r4, #0]
 80072aa:	6909      	ldr	r1, [r1, #16]
 80072ac:	eba5 0901 	sub.w	r9, r5, r1
 80072b0:	6965      	ldr	r5, [r4, #20]
 80072b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072ba:	3301      	adds	r3, #1
 80072bc:	444b      	add	r3, r9
 80072be:	106d      	asrs	r5, r5, #1
 80072c0:	429d      	cmp	r5, r3
 80072c2:	bf38      	it	cc
 80072c4:	461d      	movcc	r5, r3
 80072c6:	0553      	lsls	r3, r2, #21
 80072c8:	d531      	bpl.n	800732e <__ssputs_r+0xa0>
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7ff fef8 	bl	80070c0 <_malloc_r>
 80072d0:	4606      	mov	r6, r0
 80072d2:	b950      	cbnz	r0, 80072ea <__ssputs_r+0x5c>
 80072d4:	230c      	movs	r3, #12
 80072d6:	f8ca 3000 	str.w	r3, [sl]
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	6921      	ldr	r1, [r4, #16]
 80072ec:	464a      	mov	r2, r9
 80072ee:	f000 fabf 	bl	8007870 <memcpy>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	6126      	str	r6, [r4, #16]
 8007300:	6165      	str	r5, [r4, #20]
 8007302:	444e      	add	r6, r9
 8007304:	eba5 0509 	sub.w	r5, r5, r9
 8007308:	6026      	str	r6, [r4, #0]
 800730a:	60a5      	str	r5, [r4, #8]
 800730c:	463e      	mov	r6, r7
 800730e:	42be      	cmp	r6, r7
 8007310:	d900      	bls.n	8007314 <__ssputs_r+0x86>
 8007312:	463e      	mov	r6, r7
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	4632      	mov	r2, r6
 8007318:	4641      	mov	r1, r8
 800731a:	f000 fab7 	bl	800788c <memmove>
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	4433      	add	r3, r6
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	2000      	movs	r0, #0
 800732c:	e7db      	b.n	80072e6 <__ssputs_r+0x58>
 800732e:	462a      	mov	r2, r5
 8007330:	f7ff ff7e 	bl	8007230 <_realloc_r>
 8007334:	4606      	mov	r6, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d1e1      	bne.n	80072fe <__ssputs_r+0x70>
 800733a:	6921      	ldr	r1, [r4, #16]
 800733c:	4650      	mov	r0, sl
 800733e:	f7ff fe53 	bl	8006fe8 <_free_r>
 8007342:	e7c7      	b.n	80072d4 <__ssputs_r+0x46>

08007344 <_svfiprintf_r>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	4698      	mov	r8, r3
 800734a:	898b      	ldrh	r3, [r1, #12]
 800734c:	061b      	lsls	r3, r3, #24
 800734e:	b09d      	sub	sp, #116	; 0x74
 8007350:	4607      	mov	r7, r0
 8007352:	460d      	mov	r5, r1
 8007354:	4614      	mov	r4, r2
 8007356:	d50e      	bpl.n	8007376 <_svfiprintf_r+0x32>
 8007358:	690b      	ldr	r3, [r1, #16]
 800735a:	b963      	cbnz	r3, 8007376 <_svfiprintf_r+0x32>
 800735c:	2140      	movs	r1, #64	; 0x40
 800735e:	f7ff feaf 	bl	80070c0 <_malloc_r>
 8007362:	6028      	str	r0, [r5, #0]
 8007364:	6128      	str	r0, [r5, #16]
 8007366:	b920      	cbnz	r0, 8007372 <_svfiprintf_r+0x2e>
 8007368:	230c      	movs	r3, #12
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	e0d1      	b.n	8007516 <_svfiprintf_r+0x1d2>
 8007372:	2340      	movs	r3, #64	; 0x40
 8007374:	616b      	str	r3, [r5, #20]
 8007376:	2300      	movs	r3, #0
 8007378:	9309      	str	r3, [sp, #36]	; 0x24
 800737a:	2320      	movs	r3, #32
 800737c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007380:	f8cd 800c 	str.w	r8, [sp, #12]
 8007384:	2330      	movs	r3, #48	; 0x30
 8007386:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007530 <_svfiprintf_r+0x1ec>
 800738a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800738e:	f04f 0901 	mov.w	r9, #1
 8007392:	4623      	mov	r3, r4
 8007394:	469a      	mov	sl, r3
 8007396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800739a:	b10a      	cbz	r2, 80073a0 <_svfiprintf_r+0x5c>
 800739c:	2a25      	cmp	r2, #37	; 0x25
 800739e:	d1f9      	bne.n	8007394 <_svfiprintf_r+0x50>
 80073a0:	ebba 0b04 	subs.w	fp, sl, r4
 80073a4:	d00b      	beq.n	80073be <_svfiprintf_r+0x7a>
 80073a6:	465b      	mov	r3, fp
 80073a8:	4622      	mov	r2, r4
 80073aa:	4629      	mov	r1, r5
 80073ac:	4638      	mov	r0, r7
 80073ae:	f7ff ff6e 	bl	800728e <__ssputs_r>
 80073b2:	3001      	adds	r0, #1
 80073b4:	f000 80aa 	beq.w	800750c <_svfiprintf_r+0x1c8>
 80073b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ba:	445a      	add	r2, fp
 80073bc:	9209      	str	r2, [sp, #36]	; 0x24
 80073be:	f89a 3000 	ldrb.w	r3, [sl]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80a2 	beq.w	800750c <_svfiprintf_r+0x1c8>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295
 80073ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073d2:	f10a 0a01 	add.w	sl, sl, #1
 80073d6:	9304      	str	r3, [sp, #16]
 80073d8:	9307      	str	r3, [sp, #28]
 80073da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073de:	931a      	str	r3, [sp, #104]	; 0x68
 80073e0:	4654      	mov	r4, sl
 80073e2:	2205      	movs	r2, #5
 80073e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e8:	4851      	ldr	r0, [pc, #324]	; (8007530 <_svfiprintf_r+0x1ec>)
 80073ea:	f7f8 fef9 	bl	80001e0 <memchr>
 80073ee:	9a04      	ldr	r2, [sp, #16]
 80073f0:	b9d8      	cbnz	r0, 800742a <_svfiprintf_r+0xe6>
 80073f2:	06d0      	lsls	r0, r2, #27
 80073f4:	bf44      	itt	mi
 80073f6:	2320      	movmi	r3, #32
 80073f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073fc:	0711      	lsls	r1, r2, #28
 80073fe:	bf44      	itt	mi
 8007400:	232b      	movmi	r3, #43	; 0x2b
 8007402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007406:	f89a 3000 	ldrb.w	r3, [sl]
 800740a:	2b2a      	cmp	r3, #42	; 0x2a
 800740c:	d015      	beq.n	800743a <_svfiprintf_r+0xf6>
 800740e:	9a07      	ldr	r2, [sp, #28]
 8007410:	4654      	mov	r4, sl
 8007412:	2000      	movs	r0, #0
 8007414:	f04f 0c0a 	mov.w	ip, #10
 8007418:	4621      	mov	r1, r4
 800741a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800741e:	3b30      	subs	r3, #48	; 0x30
 8007420:	2b09      	cmp	r3, #9
 8007422:	d94e      	bls.n	80074c2 <_svfiprintf_r+0x17e>
 8007424:	b1b0      	cbz	r0, 8007454 <_svfiprintf_r+0x110>
 8007426:	9207      	str	r2, [sp, #28]
 8007428:	e014      	b.n	8007454 <_svfiprintf_r+0x110>
 800742a:	eba0 0308 	sub.w	r3, r0, r8
 800742e:	fa09 f303 	lsl.w	r3, r9, r3
 8007432:	4313      	orrs	r3, r2
 8007434:	9304      	str	r3, [sp, #16]
 8007436:	46a2      	mov	sl, r4
 8007438:	e7d2      	b.n	80073e0 <_svfiprintf_r+0x9c>
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	1d19      	adds	r1, r3, #4
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	9103      	str	r1, [sp, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfbb      	ittet	lt
 8007446:	425b      	neglt	r3, r3
 8007448:	f042 0202 	orrlt.w	r2, r2, #2
 800744c:	9307      	strge	r3, [sp, #28]
 800744e:	9307      	strlt	r3, [sp, #28]
 8007450:	bfb8      	it	lt
 8007452:	9204      	strlt	r2, [sp, #16]
 8007454:	7823      	ldrb	r3, [r4, #0]
 8007456:	2b2e      	cmp	r3, #46	; 0x2e
 8007458:	d10c      	bne.n	8007474 <_svfiprintf_r+0x130>
 800745a:	7863      	ldrb	r3, [r4, #1]
 800745c:	2b2a      	cmp	r3, #42	; 0x2a
 800745e:	d135      	bne.n	80074cc <_svfiprintf_r+0x188>
 8007460:	9b03      	ldr	r3, [sp, #12]
 8007462:	1d1a      	adds	r2, r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	9203      	str	r2, [sp, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	bfb8      	it	lt
 800746c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007470:	3402      	adds	r4, #2
 8007472:	9305      	str	r3, [sp, #20]
 8007474:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007540 <_svfiprintf_r+0x1fc>
 8007478:	7821      	ldrb	r1, [r4, #0]
 800747a:	2203      	movs	r2, #3
 800747c:	4650      	mov	r0, sl
 800747e:	f7f8 feaf 	bl	80001e0 <memchr>
 8007482:	b140      	cbz	r0, 8007496 <_svfiprintf_r+0x152>
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	eba0 000a 	sub.w	r0, r0, sl
 800748a:	fa03 f000 	lsl.w	r0, r3, r0
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	4303      	orrs	r3, r0
 8007492:	3401      	adds	r4, #1
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4826      	ldr	r0, [pc, #152]	; (8007534 <_svfiprintf_r+0x1f0>)
 800749c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074a0:	2206      	movs	r2, #6
 80074a2:	f7f8 fe9d 	bl	80001e0 <memchr>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d038      	beq.n	800751c <_svfiprintf_r+0x1d8>
 80074aa:	4b23      	ldr	r3, [pc, #140]	; (8007538 <_svfiprintf_r+0x1f4>)
 80074ac:	bb1b      	cbnz	r3, 80074f6 <_svfiprintf_r+0x1b2>
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	3307      	adds	r3, #7
 80074b2:	f023 0307 	bic.w	r3, r3, #7
 80074b6:	3308      	adds	r3, #8
 80074b8:	9303      	str	r3, [sp, #12]
 80074ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074bc:	4433      	add	r3, r6
 80074be:	9309      	str	r3, [sp, #36]	; 0x24
 80074c0:	e767      	b.n	8007392 <_svfiprintf_r+0x4e>
 80074c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074c6:	460c      	mov	r4, r1
 80074c8:	2001      	movs	r0, #1
 80074ca:	e7a5      	b.n	8007418 <_svfiprintf_r+0xd4>
 80074cc:	2300      	movs	r3, #0
 80074ce:	3401      	adds	r4, #1
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	4619      	mov	r1, r3
 80074d4:	f04f 0c0a 	mov.w	ip, #10
 80074d8:	4620      	mov	r0, r4
 80074da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074de:	3a30      	subs	r2, #48	; 0x30
 80074e0:	2a09      	cmp	r2, #9
 80074e2:	d903      	bls.n	80074ec <_svfiprintf_r+0x1a8>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0c5      	beq.n	8007474 <_svfiprintf_r+0x130>
 80074e8:	9105      	str	r1, [sp, #20]
 80074ea:	e7c3      	b.n	8007474 <_svfiprintf_r+0x130>
 80074ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80074f0:	4604      	mov	r4, r0
 80074f2:	2301      	movs	r3, #1
 80074f4:	e7f0      	b.n	80074d8 <_svfiprintf_r+0x194>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4b0f      	ldr	r3, [pc, #60]	; (800753c <_svfiprintf_r+0x1f8>)
 80074fe:	a904      	add	r1, sp, #16
 8007500:	4638      	mov	r0, r7
 8007502:	f3af 8000 	nop.w
 8007506:	1c42      	adds	r2, r0, #1
 8007508:	4606      	mov	r6, r0
 800750a:	d1d6      	bne.n	80074ba <_svfiprintf_r+0x176>
 800750c:	89ab      	ldrh	r3, [r5, #12]
 800750e:	065b      	lsls	r3, r3, #25
 8007510:	f53f af2c 	bmi.w	800736c <_svfiprintf_r+0x28>
 8007514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007516:	b01d      	add	sp, #116	; 0x74
 8007518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751c:	ab03      	add	r3, sp, #12
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	462a      	mov	r2, r5
 8007522:	4b06      	ldr	r3, [pc, #24]	; (800753c <_svfiprintf_r+0x1f8>)
 8007524:	a904      	add	r1, sp, #16
 8007526:	4638      	mov	r0, r7
 8007528:	f000 f87a 	bl	8007620 <_printf_i>
 800752c:	e7eb      	b.n	8007506 <_svfiprintf_r+0x1c2>
 800752e:	bf00      	nop
 8007530:	0802821c 	.word	0x0802821c
 8007534:	08028226 	.word	0x08028226
 8007538:	00000000 	.word	0x00000000
 800753c:	0800728f 	.word	0x0800728f
 8007540:	08028222 	.word	0x08028222

08007544 <_printf_common>:
 8007544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007548:	4616      	mov	r6, r2
 800754a:	4699      	mov	r9, r3
 800754c:	688a      	ldr	r2, [r1, #8]
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007554:	4293      	cmp	r3, r2
 8007556:	bfb8      	it	lt
 8007558:	4613      	movlt	r3, r2
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007560:	4607      	mov	r7, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b10a      	cbz	r2, 800756a <_printf_common+0x26>
 8007566:	3301      	adds	r3, #1
 8007568:	6033      	str	r3, [r6, #0]
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	0699      	lsls	r1, r3, #26
 800756e:	bf42      	ittt	mi
 8007570:	6833      	ldrmi	r3, [r6, #0]
 8007572:	3302      	addmi	r3, #2
 8007574:	6033      	strmi	r3, [r6, #0]
 8007576:	6825      	ldr	r5, [r4, #0]
 8007578:	f015 0506 	ands.w	r5, r5, #6
 800757c:	d106      	bne.n	800758c <_printf_common+0x48>
 800757e:	f104 0a19 	add.w	sl, r4, #25
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	6832      	ldr	r2, [r6, #0]
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	42ab      	cmp	r3, r5
 800758a:	dc26      	bgt.n	80075da <_printf_common+0x96>
 800758c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007590:	1e13      	subs	r3, r2, #0
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	bf18      	it	ne
 8007596:	2301      	movne	r3, #1
 8007598:	0692      	lsls	r2, r2, #26
 800759a:	d42b      	bmi.n	80075f4 <_printf_common+0xb0>
 800759c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a0:	4649      	mov	r1, r9
 80075a2:	4638      	mov	r0, r7
 80075a4:	47c0      	blx	r8
 80075a6:	3001      	adds	r0, #1
 80075a8:	d01e      	beq.n	80075e8 <_printf_common+0xa4>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	68e5      	ldr	r5, [r4, #12]
 80075ae:	6832      	ldr	r2, [r6, #0]
 80075b0:	f003 0306 	and.w	r3, r3, #6
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	bf08      	it	eq
 80075b8:	1aad      	subeq	r5, r5, r2
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	6922      	ldr	r2, [r4, #16]
 80075be:	bf0c      	ite	eq
 80075c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c4:	2500      	movne	r5, #0
 80075c6:	4293      	cmp	r3, r2
 80075c8:	bfc4      	itt	gt
 80075ca:	1a9b      	subgt	r3, r3, r2
 80075cc:	18ed      	addgt	r5, r5, r3
 80075ce:	2600      	movs	r6, #0
 80075d0:	341a      	adds	r4, #26
 80075d2:	42b5      	cmp	r5, r6
 80075d4:	d11a      	bne.n	800760c <_printf_common+0xc8>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e008      	b.n	80075ec <_printf_common+0xa8>
 80075da:	2301      	movs	r3, #1
 80075dc:	4652      	mov	r2, sl
 80075de:	4649      	mov	r1, r9
 80075e0:	4638      	mov	r0, r7
 80075e2:	47c0      	blx	r8
 80075e4:	3001      	adds	r0, #1
 80075e6:	d103      	bne.n	80075f0 <_printf_common+0xac>
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f0:	3501      	adds	r5, #1
 80075f2:	e7c6      	b.n	8007582 <_printf_common+0x3e>
 80075f4:	18e1      	adds	r1, r4, r3
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	2030      	movs	r0, #48	; 0x30
 80075fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075fe:	4422      	add	r2, r4
 8007600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007608:	3302      	adds	r3, #2
 800760a:	e7c7      	b.n	800759c <_printf_common+0x58>
 800760c:	2301      	movs	r3, #1
 800760e:	4622      	mov	r2, r4
 8007610:	4649      	mov	r1, r9
 8007612:	4638      	mov	r0, r7
 8007614:	47c0      	blx	r8
 8007616:	3001      	adds	r0, #1
 8007618:	d0e6      	beq.n	80075e8 <_printf_common+0xa4>
 800761a:	3601      	adds	r6, #1
 800761c:	e7d9      	b.n	80075d2 <_printf_common+0x8e>
	...

08007620 <_printf_i>:
 8007620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007624:	7e0f      	ldrb	r7, [r1, #24]
 8007626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007628:	2f78      	cmp	r7, #120	; 0x78
 800762a:	4691      	mov	r9, r2
 800762c:	4680      	mov	r8, r0
 800762e:	460c      	mov	r4, r1
 8007630:	469a      	mov	sl, r3
 8007632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007636:	d807      	bhi.n	8007648 <_printf_i+0x28>
 8007638:	2f62      	cmp	r7, #98	; 0x62
 800763a:	d80a      	bhi.n	8007652 <_printf_i+0x32>
 800763c:	2f00      	cmp	r7, #0
 800763e:	f000 80d8 	beq.w	80077f2 <_printf_i+0x1d2>
 8007642:	2f58      	cmp	r7, #88	; 0x58
 8007644:	f000 80a3 	beq.w	800778e <_printf_i+0x16e>
 8007648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800764c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007650:	e03a      	b.n	80076c8 <_printf_i+0xa8>
 8007652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007656:	2b15      	cmp	r3, #21
 8007658:	d8f6      	bhi.n	8007648 <_printf_i+0x28>
 800765a:	a101      	add	r1, pc, #4	; (adr r1, 8007660 <_printf_i+0x40>)
 800765c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007660:	080076b9 	.word	0x080076b9
 8007664:	080076cd 	.word	0x080076cd
 8007668:	08007649 	.word	0x08007649
 800766c:	08007649 	.word	0x08007649
 8007670:	08007649 	.word	0x08007649
 8007674:	08007649 	.word	0x08007649
 8007678:	080076cd 	.word	0x080076cd
 800767c:	08007649 	.word	0x08007649
 8007680:	08007649 	.word	0x08007649
 8007684:	08007649 	.word	0x08007649
 8007688:	08007649 	.word	0x08007649
 800768c:	080077d9 	.word	0x080077d9
 8007690:	080076fd 	.word	0x080076fd
 8007694:	080077bb 	.word	0x080077bb
 8007698:	08007649 	.word	0x08007649
 800769c:	08007649 	.word	0x08007649
 80076a0:	080077fb 	.word	0x080077fb
 80076a4:	08007649 	.word	0x08007649
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007649 	.word	0x08007649
 80076b0:	08007649 	.word	0x08007649
 80076b4:	080077c3 	.word	0x080077c3
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	602a      	str	r2, [r5, #0]
 80076c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0a3      	b.n	8007814 <_printf_i+0x1f4>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	6829      	ldr	r1, [r5, #0]
 80076d0:	0606      	lsls	r6, r0, #24
 80076d2:	f101 0304 	add.w	r3, r1, #4
 80076d6:	d50a      	bpl.n	80076ee <_printf_i+0xce>
 80076d8:	680e      	ldr	r6, [r1, #0]
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	2e00      	cmp	r6, #0
 80076de:	da03      	bge.n	80076e8 <_printf_i+0xc8>
 80076e0:	232d      	movs	r3, #45	; 0x2d
 80076e2:	4276      	negs	r6, r6
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e8:	485e      	ldr	r0, [pc, #376]	; (8007864 <_printf_i+0x244>)
 80076ea:	230a      	movs	r3, #10
 80076ec:	e019      	b.n	8007722 <_printf_i+0x102>
 80076ee:	680e      	ldr	r6, [r1, #0]
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076f6:	bf18      	it	ne
 80076f8:	b236      	sxthne	r6, r6
 80076fa:	e7ef      	b.n	80076dc <_printf_i+0xbc>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	6820      	ldr	r0, [r4, #0]
 8007700:	1d19      	adds	r1, r3, #4
 8007702:	6029      	str	r1, [r5, #0]
 8007704:	0601      	lsls	r1, r0, #24
 8007706:	d501      	bpl.n	800770c <_printf_i+0xec>
 8007708:	681e      	ldr	r6, [r3, #0]
 800770a:	e002      	b.n	8007712 <_printf_i+0xf2>
 800770c:	0646      	lsls	r6, r0, #25
 800770e:	d5fb      	bpl.n	8007708 <_printf_i+0xe8>
 8007710:	881e      	ldrh	r6, [r3, #0]
 8007712:	4854      	ldr	r0, [pc, #336]	; (8007864 <_printf_i+0x244>)
 8007714:	2f6f      	cmp	r7, #111	; 0x6f
 8007716:	bf0c      	ite	eq
 8007718:	2308      	moveq	r3, #8
 800771a:	230a      	movne	r3, #10
 800771c:	2100      	movs	r1, #0
 800771e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007722:	6865      	ldr	r5, [r4, #4]
 8007724:	60a5      	str	r5, [r4, #8]
 8007726:	2d00      	cmp	r5, #0
 8007728:	bfa2      	ittt	ge
 800772a:	6821      	ldrge	r1, [r4, #0]
 800772c:	f021 0104 	bicge.w	r1, r1, #4
 8007730:	6021      	strge	r1, [r4, #0]
 8007732:	b90e      	cbnz	r6, 8007738 <_printf_i+0x118>
 8007734:	2d00      	cmp	r5, #0
 8007736:	d04d      	beq.n	80077d4 <_printf_i+0x1b4>
 8007738:	4615      	mov	r5, r2
 800773a:	fbb6 f1f3 	udiv	r1, r6, r3
 800773e:	fb03 6711 	mls	r7, r3, r1, r6
 8007742:	5dc7      	ldrb	r7, [r0, r7]
 8007744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007748:	4637      	mov	r7, r6
 800774a:	42bb      	cmp	r3, r7
 800774c:	460e      	mov	r6, r1
 800774e:	d9f4      	bls.n	800773a <_printf_i+0x11a>
 8007750:	2b08      	cmp	r3, #8
 8007752:	d10b      	bne.n	800776c <_printf_i+0x14c>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	07de      	lsls	r6, r3, #31
 8007758:	d508      	bpl.n	800776c <_printf_i+0x14c>
 800775a:	6923      	ldr	r3, [r4, #16]
 800775c:	6861      	ldr	r1, [r4, #4]
 800775e:	4299      	cmp	r1, r3
 8007760:	bfde      	ittt	le
 8007762:	2330      	movle	r3, #48	; 0x30
 8007764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007768:	f105 35ff 	addle.w	r5, r5, #4294967295
 800776c:	1b52      	subs	r2, r2, r5
 800776e:	6122      	str	r2, [r4, #16]
 8007770:	f8cd a000 	str.w	sl, [sp]
 8007774:	464b      	mov	r3, r9
 8007776:	aa03      	add	r2, sp, #12
 8007778:	4621      	mov	r1, r4
 800777a:	4640      	mov	r0, r8
 800777c:	f7ff fee2 	bl	8007544 <_printf_common>
 8007780:	3001      	adds	r0, #1
 8007782:	d14c      	bne.n	800781e <_printf_i+0x1fe>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	b004      	add	sp, #16
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	4835      	ldr	r0, [pc, #212]	; (8007864 <_printf_i+0x244>)
 8007790:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f851 6b04 	ldr.w	r6, [r1], #4
 800779c:	6029      	str	r1, [r5, #0]
 800779e:	061d      	lsls	r5, r3, #24
 80077a0:	d514      	bpl.n	80077cc <_printf_i+0x1ac>
 80077a2:	07df      	lsls	r7, r3, #31
 80077a4:	bf44      	itt	mi
 80077a6:	f043 0320 	orrmi.w	r3, r3, #32
 80077aa:	6023      	strmi	r3, [r4, #0]
 80077ac:	b91e      	cbnz	r6, 80077b6 <_printf_i+0x196>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f023 0320 	bic.w	r3, r3, #32
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	2310      	movs	r3, #16
 80077b8:	e7b0      	b.n	800771c <_printf_i+0xfc>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	2378      	movs	r3, #120	; 0x78
 80077c4:	4828      	ldr	r0, [pc, #160]	; (8007868 <_printf_i+0x248>)
 80077c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ca:	e7e3      	b.n	8007794 <_printf_i+0x174>
 80077cc:	0659      	lsls	r1, r3, #25
 80077ce:	bf48      	it	mi
 80077d0:	b2b6      	uxthmi	r6, r6
 80077d2:	e7e6      	b.n	80077a2 <_printf_i+0x182>
 80077d4:	4615      	mov	r5, r2
 80077d6:	e7bb      	b.n	8007750 <_printf_i+0x130>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	6826      	ldr	r6, [r4, #0]
 80077dc:	6961      	ldr	r1, [r4, #20]
 80077de:	1d18      	adds	r0, r3, #4
 80077e0:	6028      	str	r0, [r5, #0]
 80077e2:	0635      	lsls	r5, r6, #24
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	d501      	bpl.n	80077ec <_printf_i+0x1cc>
 80077e8:	6019      	str	r1, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <_printf_i+0x1d2>
 80077ec:	0670      	lsls	r0, r6, #25
 80077ee:	d5fb      	bpl.n	80077e8 <_printf_i+0x1c8>
 80077f0:	8019      	strh	r1, [r3, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	4615      	mov	r5, r2
 80077f8:	e7ba      	b.n	8007770 <_printf_i+0x150>
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	602a      	str	r2, [r5, #0]
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	6862      	ldr	r2, [r4, #4]
 8007804:	2100      	movs	r1, #0
 8007806:	4628      	mov	r0, r5
 8007808:	f7f8 fcea 	bl	80001e0 <memchr>
 800780c:	b108      	cbz	r0, 8007812 <_printf_i+0x1f2>
 800780e:	1b40      	subs	r0, r0, r5
 8007810:	6060      	str	r0, [r4, #4]
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	2300      	movs	r3, #0
 8007818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781c:	e7a8      	b.n	8007770 <_printf_i+0x150>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	462a      	mov	r2, r5
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d0ab      	beq.n	8007784 <_printf_i+0x164>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	d413      	bmi.n	800785a <_printf_i+0x23a>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	4298      	cmp	r0, r3
 8007838:	bfb8      	it	lt
 800783a:	4618      	movlt	r0, r3
 800783c:	e7a4      	b.n	8007788 <_printf_i+0x168>
 800783e:	2301      	movs	r3, #1
 8007840:	4632      	mov	r2, r6
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d09b      	beq.n	8007784 <_printf_i+0x164>
 800784c:	3501      	adds	r5, #1
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	9903      	ldr	r1, [sp, #12]
 8007852:	1a5b      	subs	r3, r3, r1
 8007854:	42ab      	cmp	r3, r5
 8007856:	dcf2      	bgt.n	800783e <_printf_i+0x21e>
 8007858:	e7eb      	b.n	8007832 <_printf_i+0x212>
 800785a:	2500      	movs	r5, #0
 800785c:	f104 0619 	add.w	r6, r4, #25
 8007860:	e7f5      	b.n	800784e <_printf_i+0x22e>
 8007862:	bf00      	nop
 8007864:	0802822d 	.word	0x0802822d
 8007868:	0802823e 	.word	0x0802823e

0800786c <__retarget_lock_acquire_recursive>:
 800786c:	4770      	bx	lr

0800786e <__retarget_lock_release_recursive>:
 800786e:	4770      	bx	lr

08007870 <memcpy>:
 8007870:	440a      	add	r2, r1
 8007872:	4291      	cmp	r1, r2
 8007874:	f100 33ff 	add.w	r3, r0, #4294967295
 8007878:	d100      	bne.n	800787c <memcpy+0xc>
 800787a:	4770      	bx	lr
 800787c:	b510      	push	{r4, lr}
 800787e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007886:	4291      	cmp	r1, r2
 8007888:	d1f9      	bne.n	800787e <memcpy+0xe>
 800788a:	bd10      	pop	{r4, pc}

0800788c <memmove>:
 800788c:	4288      	cmp	r0, r1
 800788e:	b510      	push	{r4, lr}
 8007890:	eb01 0402 	add.w	r4, r1, r2
 8007894:	d902      	bls.n	800789c <memmove+0x10>
 8007896:	4284      	cmp	r4, r0
 8007898:	4623      	mov	r3, r4
 800789a:	d807      	bhi.n	80078ac <memmove+0x20>
 800789c:	1e43      	subs	r3, r0, #1
 800789e:	42a1      	cmp	r1, r4
 80078a0:	d008      	beq.n	80078b4 <memmove+0x28>
 80078a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078aa:	e7f8      	b.n	800789e <memmove+0x12>
 80078ac:	4402      	add	r2, r0
 80078ae:	4601      	mov	r1, r0
 80078b0:	428a      	cmp	r2, r1
 80078b2:	d100      	bne.n	80078b6 <memmove+0x2a>
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078be:	e7f7      	b.n	80078b0 <memmove+0x24>

080078c0 <_malloc_usable_size_r>:
 80078c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c4:	1f18      	subs	r0, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfbc      	itt	lt
 80078ca:	580b      	ldrlt	r3, [r1, r0]
 80078cc:	18c0      	addlt	r0, r0, r3
 80078ce:	4770      	bx	lr

080078d0 <_init>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr

080078dc <_fini>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr
