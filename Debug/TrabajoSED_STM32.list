
TrabajoSED_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000726c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000201ec  0800740c  0800740c  0001740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080275f8  080275f8  00040088  2**0
                  CONTENTS
  4 .ARM          00000008  080275f8  080275f8  000375f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027600  08027600  00040088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027600  08027600  00037600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027604  08027604  00037604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08027608  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000088  08027690  00040088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08027690  00040250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fdd  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a1  00000000  00000000  00051095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00053638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018da7  00000000  00000000  000546b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000147a3  00000000  00000000  0006d45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a035a  00000000  00000000  00081c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00121f5c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000f50  00000000  00000000  00121fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000499c  00000000  00000000  00122f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073f4 	.word	0x080073f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080073f4 	.word	0x080073f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f002 fe88 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f864 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 faa2 	bl	8000ad8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000594:	f000 f8cc 	bl	8000730 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000598:	f000 fa2e 	bl	80009f8 <MX_TIM4_Init>
  MX_SPI1_Init();
 800059c:	f000 f9a6 	bl	80008ec <MX_SPI1_Init>
  MX_RTC_Init();
 80005a0:	f000 f918 	bl	80007d4 <MX_RTC_Init>
  MX_TIM3_Init();
 80005a4:	f000 f9da 	bl	800095c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005a8:	4820      	ldr	r0, [pc, #128]	; (800062c <main+0xa8>)
 80005aa:	f005 fad5 	bl	8005b58 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80005ae:	2029      	movs	r0, #41	; 0x29
 80005b0:	f003 fc25 	bl	8003dfe <HAL_NVIC_DisableIRQ>
  Led_Init();
 80005b4:	f000 fb32 	bl	8000c1c <Led_Init>
  ST7735_Init();
 80005b8:	f002 fa48 	bl	8002a4c <ST7735_Init>
	  HAL_Delay(50);
  }
  */

  //uint32_t longtime = 0;
  printMenu_Estado();
 80005bc:	f001 f8be 	bl	800173c <printMenu_Estado>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  humedad = sensorHumedad();
 80005c0:	f000 fb6a 	bl	8000c98 <sensorHumedad>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <main+0xac>)
 80005ca:	701a      	strb	r2, [r3, #0]

	  modoHandler();
 80005cc:	f000 fc9e 	bl	8000f0c <modoHandler>
	  menuHandler();
 80005d0:	f000 fcc0 	bl	8000f54 <menuHandler>

	  LED_ON_OFF(humedad);
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0xac>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fbb5 	bl	8000d48 <LED_ON_OFF>
		  printMenu_CambioModo();
		  longtime = HAL_GetTick() + 2000;
	  }*/
	  //HAL_Delay(1000);

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005de:	2200      	movs	r2, #0
 80005e0:	4914      	ldr	r1, [pc, #80]	; (8000634 <main+0xb0>)
 80005e2:	4815      	ldr	r0, [pc, #84]	; (8000638 <main+0xb4>)
 80005e4:	f004 fc58 	bl	8004e98 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80005e8:	2200      	movs	r2, #0
 80005ea:	4914      	ldr	r1, [pc, #80]	; (800063c <main+0xb8>)
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0xb4>)
 80005ee:	f004 fd35 	bl	800505c <HAL_RTC_GetDate>

		///*
		year = sDate.Year+2000;
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <main+0xb8>)
 80005f4:	78db      	ldrb	r3, [r3, #3]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <main+0xbc>)
 8000600:	801a      	strh	r2, [r3, #0]
		month = sDate.Month;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <main+0xb8>)
 8000604:	785a      	ldrb	r2, [r3, #1]
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <main+0xc0>)
 8000608:	701a      	strb	r2, [r3, #0]
		day = sDate.Date;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <main+0xb8>)
 800060c:	789a      	ldrb	r2, [r3, #2]
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <main+0xc4>)
 8000610:	701a      	strb	r2, [r3, #0]

		hours = sTime.Hours;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <main+0xb0>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <main+0xc8>)
 8000618:	701a      	strb	r2, [r3, #0]
		minutes = sTime.Minutes;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <main+0xb0>)
 800061c:	785a      	ldrb	r2, [r3, #1]
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <main+0xcc>)
 8000620:	701a      	strb	r2, [r3, #0]
		seconds = sTime.Seconds;
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <main+0xb0>)
 8000624:	789a      	ldrb	r2, [r3, #2]
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <main+0xd0>)
 8000628:	701a      	strb	r2, [r3, #0]
	  humedad = sensorHumedad();
 800062a:	e7c9      	b.n	80005c0 <main+0x3c>
 800062c:	2000017c 	.word	0x2000017c
 8000630:	2000020f 	.word	0x2000020f
 8000634:	200000a4 	.word	0x200000a4
 8000638:	20000104 	.word	0x20000104
 800063c:	200000b8 	.word	0x200000b8
 8000640:	20000218 	.word	0x20000218
 8000644:	20000217 	.word	0x20000217
 8000648:	20000216 	.word	0x20000216
 800064c:	20000215 	.word	0x20000215
 8000650:	20000214 	.word	0x20000214
 8000654:	20000213 	.word	0x20000213

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 fa48 	bl	8006afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xd0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <SystemClock_Config+0xd0>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xd0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SystemClock_Config+0xd4>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006b4:	230a      	movs	r3, #10
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d0:	2360      	movs	r3, #96	; 0x60
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fd75 	bl	80041d0 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ec:	f002 f8ca 	bl	8002884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f003 ffd6 	bl	80046c0 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071a:	f002 f8b3 	bl	8002884 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <MX_ADC1_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xa0>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC1_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000792:	f002 fe19 	bl	80033c8 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800079c:	f002 f872 	bl	8002884 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0x98>)
 80007b2:	f002 ffcd 	bl	8003750 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f002 f862 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000bc 	.word	0x200000bc
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b090      	sub	sp, #64	; 0x40
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2228      	movs	r2, #40	; 0x28
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f006 f981 	bl	8006afc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007fa:	4b3a      	ldr	r3, [pc, #232]	; (80008e4 <MX_RTC_Init+0x110>)
 80007fc:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <MX_RTC_Init+0x114>)
 80007fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000800:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <MX_RTC_Init+0x110>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <MX_RTC_Init+0x110>)
 8000808:	227f      	movs	r2, #127	; 0x7f
 800080a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <MX_RTC_Init+0x110>)
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000812:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <MX_RTC_Init+0x110>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <MX_RTC_Init+0x110>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <MX_RTC_Init+0x110>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000824:	482f      	ldr	r0, [pc, #188]	; (80008e4 <MX_RTC_Init+0x110>)
 8000826:	f004 fa27 	bl	8004c78 <HAL_RTC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000830:	f002 f828 	bl	8002884 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800084e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4823      	ldr	r0, [pc, #140]	; (80008e4 <MX_RTC_Init+0x110>)
 8000858:	f004 fa84 	bl	8004d64 <HAL_RTC_SetTime>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000862:	f002 f80f 	bl	8002884 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000866:	2301      	movs	r3, #1
 8000868:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800086c:	2301      	movs	r3, #1
 800086e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800087e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <MX_RTC_Init+0x110>)
 8000888:	f004 fb64 	bl	8004f54 <HAL_RTC_SetDate>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000892:	f001 fff7 	bl	8002884 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80008c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_RTC_Init+0x110>)
 80008ce:	f004 fc15 	bl	80050fc <HAL_RTC_SetAlarm_IT>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80008d8:	f001 ffd4 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3740      	adds	r7, #64	; 0x40
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000104 	.word	0x20000104
 80008e8:	40002800 	.word	0x40002800

080008ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <MX_SPI1_Init+0x6c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_SPI1_Init+0x68>)
 8000900:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000904:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_SPI1_Init+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_SPI1_Init+0x68>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x68>)
 800091a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x68>)
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_SPI1_Init+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x68>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_SPI1_Init+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x68>)
 800093a:	220a      	movs	r2, #10
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_SPI1_Init+0x68>)
 8000940:	f004 fe2b 	bl	800559a <HAL_SPI_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800094a:	f001 ff9b 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000124 	.word	0x20000124
 8000958:	40013000 	.word	0x40013000

0800095c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM3_Init+0x94>)
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <MX_TIM3_Init+0x98>)
 800097c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_TIM3_Init+0x94>)
 8000980:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_TIM3_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM3_Init+0x94>)
 800098e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000992:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_TIM3_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM3_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_TIM3_Init+0x94>)
 80009a2:	f005 f889 	bl	8005ab8 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009ac:	f001 ff6a 	bl	8002884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_TIM3_Init+0x94>)
 80009be:	f005 fc25 	bl	800620c <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009c8:	f001 ff5c 	bl	8002884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_TIM3_Init+0x94>)
 80009da:	f005 ffd3 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80009e4:	f001 ff4e 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000017c 	.word	0x2000017c
 80009f4:	40000400 	.word	0x40000400

080009f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <MX_TIM4_Init+0xdc>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a22:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a30:	22ff      	movs	r2, #255	; 0xff
 8000a32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a40:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a42:	f005 f91a 	bl	8005c7a <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f001 ff1a 	bl	8002884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a60:	f005 ff90 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a6a:	f001 ff0b 	bl	8002884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a86:	f005 faff 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a90:	f001 fef8 	bl	8002884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2204      	movs	r2, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000a9c:	f005 faf4 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f001 feed 	bl	8002884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000ab2:	f005 fae9 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000abc:	f001 fee2 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <MX_TIM4_Init+0xd8>)
 8000ac2:	f002 faeb 	bl	800309c <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001c4 	.word	0x200001c4
 8000ad4:	40000800 	.word	0x40000800

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b46      	ldr	r3, [pc, #280]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a45      	ldr	r2, [pc, #276]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <MX_GPIO_Init+0x134>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2150      	movs	r1, #80	; 0x50
 8000b46:	4832      	ldr	r0, [pc, #200]	; (8000c10 <MX_GPIO_Init+0x138>)
 8000b48:	f003 fb10 	bl	800416c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4830      	ldr	r0, [pc, #192]	; (8000c14 <MX_GPIO_Init+0x13c>)
 8000b52:	f003 fb0b 	bl	800416c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	482e      	ldr	r0, [pc, #184]	; (8000c18 <MX_GPIO_Init+0x140>)
 8000b5e:	f003 fb05 	bl	800416c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000b62:	230d      	movs	r3, #13
 8000b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <MX_GPIO_Init+0x138>)
 8000b78:	f003 f95c 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b7c:	2350      	movs	r3, #80	; 0x50
 8000b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	481f      	ldr	r0, [pc, #124]	; (8000c10 <MX_GPIO_Init+0x138>)
 8000b94:	f003 f94e 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	4619      	mov	r1, r3
 8000bae:	4819      	ldr	r0, [pc, #100]	; (8000c14 <MX_GPIO_Init+0x13c>)
 8000bb0:	f003 f940 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <MX_GPIO_Init+0x140>)
 8000bce:	f003 f931 	bl	8003e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2006      	movs	r0, #6
 8000bd8:	f003 f8e7 	bl	8003daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bdc:	2006      	movs	r0, #6
 8000bde:	f003 f900 	bl	8003de2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2008      	movs	r0, #8
 8000be8:	f003 f8df 	bl	8003daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000bec:	2008      	movs	r0, #8
 8000bee:	f003 f8f8 	bl	8003de2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2009      	movs	r0, #9
 8000bf8:	f003 f8d7 	bl	8003daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bfc:	2009      	movs	r0, #9
 8000bfe:	f003 f8f0 	bl	8003de2 <HAL_NVIC_EnableIRQ>

}
 8000c02:	bf00      	nop
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <Led_Init>:

/* USER CODE BEGIN 4 */
void Led_Init(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c20:	2100      	movs	r1, #0
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <Led_Init+0x20>)
 8000c24:	f005 f878 	bl	8005d18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4804      	ldr	r0, [pc, #16]	; (8000c3c <Led_Init+0x20>)
 8000c2c:	f005 f874 	bl	8005d18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c30:	2108      	movs	r1, #8
 8000c32:	4802      	ldr	r0, [pc, #8]	; (8000c3c <Led_Init+0x20>)
 8000c34:	f005 f870 	bl	8005d18 <HAL_TIM_PWM_Start>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200001c4 	.word	0x200001c4

08000c40 <ControlManual>:

//	Control manual de riego
void ControlManual()
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <ControlAutomatico_Humedad>:
//	Control automático de riego basado en la humedad de la tierra
void ControlAutomatico_Humedad(uint8_t humedad)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	if (humedad > humedad_maxima){
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <ControlAutomatico_Humedad+0x30>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d902      	bls.n	8000c6a <ControlAutomatico_Humedad+0x1a>
		CerrarValvula();
 8000c64:	f000 f864 	bl	8000d30 <CerrarValvula>
	}
	else if(humedad < humedad_minima){
		AbrirValvula();
	}
}
 8000c68:	e006      	b.n	8000c78 <ControlAutomatico_Humedad+0x28>
	else if(humedad < humedad_minima){
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <ControlAutomatico_Humedad+0x34>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d201      	bcs.n	8000c78 <ControlAutomatico_Humedad+0x28>
		AbrirValvula();
 8000c74:	f000 f850 	bl	8000d18 <AbrirValvula>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000011 	.word	0x20000011
 8000c84:	20000010 	.word	0x20000010

08000c88 <ControlAutomatico_Tiempo>:

//	Control automático de riego basado en tiempo
void ControlAutomatico_Tiempo()
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <sensorHumedad>:

uint8_t sensorHumedad(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	uint8_t valor_porc_sens = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start(&hadc1);
 8000ca2:	481b      	ldr	r0, [pc, #108]	; (8000d10 <sensorHumedad+0x78>)
 8000ca4:	f002 fbd4 	bl	8003450 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK)
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	4818      	ldr	r0, [pc, #96]	; (8000d10 <sensorHumedad+0x78>)
 8000cae:	f002 fcb6 	bl	800361e <HAL_ADC_PollForConversion>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d123      	bne.n	8000d00 <sensorHumedad+0x68>
	{
		uint16_t ADC_val=HAL_ADC_GetValue(&hadc1);
 8000cb8:	4815      	ldr	r0, [pc, #84]	; (8000d10 <sensorHumedad+0x78>)
 8000cba:	f002 fd3b 	bl	8003734 <HAL_ADC_GetValue>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80bb      	strh	r3, [r7, #4]
		ADC_val = ADC_val > ADC_HUMEDAD_MAX ? ADC_HUMEDAD_MAX : ADC_val < ADC_HUMEDAD_MIN ? ADC_HUMEDAD_MIN : ADC_val;
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	f240 3252 	movw	r2, #850	; 0x352
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d807      	bhi.n	8000cdc <sensorHumedad+0x44>
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	f240 22df 	movw	r2, #735	; 0x2df
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	bf38      	it	cc
 8000cd6:	4613      	movcc	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	e001      	b.n	8000ce0 <sensorHumedad+0x48>
 8000cdc:	f240 3352 	movw	r3, #850	; 0x352
 8000ce0:	80bb      	strh	r3, [r7, #4]
		valor_porc_sens=100-(((ADC_val-ADC_HUMEDAD_MIN)*100)/(ADC_HUMEDAD_MAX-ADC_HUMEDAD_MIN));
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	f2a3 23df 	subw	r3, r3, #735	; 0x2df
 8000ce8:	2264      	movs	r2, #100	; 0x64
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <sensorHumedad+0x7c>)
 8000cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf4:	1152      	asrs	r2, r2, #5
 8000cf6:	17db      	asrs	r3, r3, #31
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	3364      	adds	r3, #100	; 0x64
 8000cfe:	71fb      	strb	r3, [r7, #7]
	}
	HAL_ADC_Stop(&hadc1);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <sensorHumedad+0x78>)
 8000d02:	f002 fc59 	bl	80035b8 <HAL_ADC_Stop>
	return valor_porc_sens;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000bc 	.word	0x200000bc
 8000d14:	473c1ab7 	.word	0x473c1ab7

08000d18 <AbrirValvula>:

void AbrirValvula(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d22:	4802      	ldr	r0, [pc, #8]	; (8000d2c <AbrirValvula+0x14>)
 8000d24:	f003 fa22 	bl	800416c <HAL_GPIO_WritePin>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40020c00 	.word	0x40020c00

08000d30 <CerrarValvula>:

void CerrarValvula(){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3a:	4802      	ldr	r0, [pc, #8]	; (8000d44 <CerrarValvula+0x14>)
 8000d3c:	f003 fa16 	bl	800416c <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020c00 	.word	0x40020c00

08000d48 <LED_ON_OFF>:
//	Encendido de led
void LED_ON_OFF(uint8_t humedad)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	static uint32_t last_time = 0;
	if(HAL_GetTick() < last_time + 100){
 8000d52:	f002 fb09 	bl	8003368 <HAL_GetTick>
		//return;
	}

	if(humedad < humedad_minima){
 8000d56:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <LED_ON_OFF+0x16c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d21a      	bcs.n	8000d96 <LED_ON_OFF+0x4e>
		uint8_t R = 255-(humedad*128/humedad_minima);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	4a53      	ldr	r2, [pc, #332]	; (8000eb4 <LED_ON_OFF+0x16c>)
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	73bb      	strb	r3, [r7, #14]
		uint8_t G = (humedad*127/humedad_minima);
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	01db      	lsls	r3, r3, #7
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	4a4e      	ldr	r2, [pc, #312]	; (8000eb4 <LED_ON_OFF+0x16c>)
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d82:	737b      	strb	r3, [r7, #13]
		uint8_t B = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	733b      	strb	r3, [r7, #12]
		WriteRGB(R, G, B);
 8000d88:	7b3a      	ldrb	r2, [r7, #12]
 8000d8a:	7b79      	ldrb	r1, [r7, #13]
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f898 	bl	8000ec4 <WriteRGB>
 8000d94:	e084      	b.n	8000ea0 <LED_ON_OFF+0x158>
	}
	else if(humedad < humedad_media){
 8000d96:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <LED_ON_OFF+0x170>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d22b      	bcs.n	8000df8 <LED_ON_OFF+0xb0>
		uint8_t R = 127-((humedad-humedad_minima)*127/(humedad_media-humedad_minima));
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4a44      	ldr	r2, [pc, #272]	; (8000eb4 <LED_ON_OFF+0x16c>)
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	4613      	mov	r3, r2
 8000daa:	01db      	lsls	r3, r3, #7
 8000dac:	1a9a      	subs	r2, r3, r2
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <LED_ON_OFF+0x170>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <LED_ON_OFF+0x16c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	1acb      	subs	r3, r1, r3
 8000dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000dc4:	747b      	strb	r3, [r7, #17]
		uint8_t G = 127+((humedad-humedad_minima)*128/(humedad_media-humedad_minima));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4a3a      	ldr	r2, [pc, #232]	; (8000eb4 <LED_ON_OFF+0x16c>)
 8000dca:	7812      	ldrb	r2, [r2, #0]
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	01da      	lsls	r2, r3, #7
 8000dd0:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <LED_ON_OFF+0x170>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <LED_ON_OFF+0x16c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	1acb      	subs	r3, r1, r3
 8000ddc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	337f      	adds	r3, #127	; 0x7f
 8000de4:	743b      	strb	r3, [r7, #16]
		uint8_t B = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
		WriteRGB(R, G, B);
 8000dea:	7bfa      	ldrb	r2, [r7, #15]
 8000dec:	7c39      	ldrb	r1, [r7, #16]
 8000dee:	7c7b      	ldrb	r3, [r7, #17]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f867 	bl	8000ec4 <WriteRGB>
 8000df6:	e053      	b.n	8000ea0 <LED_ON_OFF+0x158>
	}
	else if(humedad < humedad_maxima){
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <LED_ON_OFF+0x174>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d229      	bcs.n	8000e56 <LED_ON_OFF+0x10e>
		uint8_t R = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	753b      	strb	r3, [r7, #20]
		uint8_t G = 127+((humedad_maxima-humedad)*128/(humedad_maxima-humedad_media));
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <LED_ON_OFF+0x174>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	01da      	lsls	r2, r3, #7
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <LED_ON_OFF+0x174>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <LED_ON_OFF+0x170>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	337f      	adds	r3, #127	; 0x7f
 8000e26:	74fb      	strb	r3, [r7, #19]
		uint8_t B = (humedad-humedad_media)*127/(humedad_maxima-humedad_media);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <LED_ON_OFF+0x170>)
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	1a9a      	subs	r2, r3, r2
 8000e30:	4613      	mov	r3, r2
 8000e32:	01db      	lsls	r3, r3, #7
 8000e34:	1a9a      	subs	r2, r3, r2
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <LED_ON_OFF+0x174>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <LED_ON_OFF+0x170>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e46:	74bb      	strb	r3, [r7, #18]
		WriteRGB(R, G, B);
 8000e48:	7cba      	ldrb	r2, [r7, #18]
 8000e4a:	7cf9      	ldrb	r1, [r7, #19]
 8000e4c:	7d3b      	ldrb	r3, [r7, #20]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f838 	bl	8000ec4 <WriteRGB>
 8000e54:	e024      	b.n	8000ea0 <LED_ON_OFF+0x158>
	}
	else{
		uint8_t R = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
		uint8_t G = (100-humedad)*127/(100-humedad_maxima);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000e60:	4613      	mov	r3, r2
 8000e62:	01db      	lsls	r3, r3, #7
 8000e64:	1a9a      	subs	r2, r3, r2
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <LED_ON_OFF+0x174>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e72:	75bb      	strb	r3, [r7, #22]
		uint8_t B = 127+((humedad-humedad_maxima)*127/(100-humedad_maxima));
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <LED_ON_OFF+0x174>)
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	1a9a      	subs	r2, r3, r2
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	01db      	lsls	r3, r3, #7
 8000e80:	1a9a      	subs	r2, r3, r2
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <LED_ON_OFF+0x174>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	337f      	adds	r3, #127	; 0x7f
 8000e92:	757b      	strb	r3, [r7, #21]
		WriteRGB(R, G, B);
 8000e94:	7d7a      	ldrb	r2, [r7, #21]
 8000e96:	7db9      	ldrb	r1, [r7, #22]
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f812 	bl	8000ec4 <WriteRGB>
	}

	last_time = HAL_GetTick();
 8000ea0:	f002 fa62 	bl	8003368 <HAL_GetTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <LED_ON_OFF+0x178>)
 8000ea8:	6013      	str	r3, [r2, #0]
	//while(HAL_GetTick()-last_time < 100){};
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	20000012 	.word	0x20000012
 8000ebc:	20000011 	.word	0x20000011
 8000ec0:	2000022c 	.word	0x2000022c

08000ec4 <WriteRGB>:
void WriteRGB(uint8_t R, uint8_t G, uint8_t B){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 255-R);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <WriteRGB+0x44>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 255-G);
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <WriteRGB+0x44>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 255-B);
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <WriteRGB+0x44>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200001c4 	.word	0x200001c4

08000f0c <modoHandler>:


//HANDLERS
void modoHandler(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	switch(modo){
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <modoHandler+0x40>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d00f      	beq.n	8000f38 <modoHandler+0x2c>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	dc10      	bgt.n	8000f3e <modoHandler+0x32>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <modoHandler+0x1a>
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d003      	beq.n	8000f2c <modoHandler+0x20>
 8000f24:	e00b      	b.n	8000f3e <modoHandler+0x32>
	case Manual:
		ControlManual();
 8000f26:	f7ff fe8b 	bl	8000c40 <ControlManual>
		break;
 8000f2a:	e00c      	b.n	8000f46 <modoHandler+0x3a>
	case Automatico_Humedad:
		ControlAutomatico_Humedad(humedad);
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <modoHandler+0x44>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe8d 	bl	8000c50 <ControlAutomatico_Humedad>
		break;
 8000f36:	e006      	b.n	8000f46 <modoHandler+0x3a>
	case Automatico_Tiempo:
		ControlAutomatico_Tiempo();
 8000f38:	f7ff fea6 	bl	8000c88 <ControlAutomatico_Tiempo>
		break;
 8000f3c:	e003      	b.n	8000f46 <modoHandler+0x3a>
	default:
		modo = Manual;
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <modoHandler+0x40>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
		break;
 8000f44:	bf00      	nop
	}
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000020c 	.word	0x2000020c
 8000f50:	2000020f 	.word	0x2000020f

08000f54 <menuHandler>:
void menuHandler(){
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f56:	b0a1      	sub	sp, #132	; 0x84
 8000f58:	af08      	add	r7, sp, #32
	static uint32_t seleccion = 0;
	if(pantalla == Estado){
 8000f5a:	4b89      	ldr	r3, [pc, #548]	; (8001180 <menuHandler+0x22c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d13d      	bne.n	8000fde <menuHandler+0x8a>
		if((humedad < humedad_minima && !(humedad_previa < humedad_minima)) || (humedad > humedad_minima && !(humedad_previa > humedad_minima)) || (humedad < humedad_maxima && !(humedad_previa < humedad_maxima)) || (humedad > humedad_maxima && !(humedad_previa > humedad_maxima))){
 8000f62:	4b88      	ldr	r3, [pc, #544]	; (8001184 <menuHandler+0x230>)
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	4b88      	ldr	r3, [pc, #544]	; (8001188 <menuHandler+0x234>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d205      	bcs.n	8000f7a <menuHandler+0x26>
 8000f6e:	4b87      	ldr	r3, [pc, #540]	; (800118c <menuHandler+0x238>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	4b85      	ldr	r3, [pc, #532]	; (8001188 <menuHandler+0x234>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d223      	bcs.n	8000fc2 <menuHandler+0x6e>
 8000f7a:	4b82      	ldr	r3, [pc, #520]	; (8001184 <menuHandler+0x230>)
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	4b82      	ldr	r3, [pc, #520]	; (8001188 <menuHandler+0x234>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d905      	bls.n	8000f92 <menuHandler+0x3e>
 8000f86:	4b81      	ldr	r3, [pc, #516]	; (800118c <menuHandler+0x238>)
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	; (8001188 <menuHandler+0x234>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d917      	bls.n	8000fc2 <menuHandler+0x6e>
 8000f92:	4b7c      	ldr	r3, [pc, #496]	; (8001184 <menuHandler+0x230>)
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <menuHandler+0x23c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d205      	bcs.n	8000faa <menuHandler+0x56>
 8000f9e:	4b7b      	ldr	r3, [pc, #492]	; (800118c <menuHandler+0x238>)
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	; (8001190 <menuHandler+0x23c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d20b      	bcs.n	8000fc2 <menuHandler+0x6e>
 8000faa:	4b76      	ldr	r3, [pc, #472]	; (8001184 <menuHandler+0x230>)
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b78      	ldr	r3, [pc, #480]	; (8001190 <menuHandler+0x23c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d908      	bls.n	8000fc8 <menuHandler+0x74>
 8000fb6:	4b75      	ldr	r3, [pc, #468]	; (800118c <menuHandler+0x238>)
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	4b75      	ldr	r3, [pc, #468]	; (8001190 <menuHandler+0x23c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d802      	bhi.n	8000fc8 <menuHandler+0x74>
			update_screen = 1;
 8000fc2:	4b74      	ldr	r3, [pc, #464]	; (8001194 <menuHandler+0x240>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		}
		if(update_screen){
 8000fc8:	4b72      	ldr	r3, [pc, #456]	; (8001194 <menuHandler+0x240>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 839b 	beq.w	8001708 <menuHandler+0x7b4>
			printMenu_Estado();
 8000fd2:	f000 fbb3 	bl	800173c <printMenu_Estado>
			update_screen = 0;
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <menuHandler+0x240>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
		}
		return;
 8000fdc:	e394      	b.n	8001708 <menuHandler+0x7b4>
		humedad_previa = humedad;
	}
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000fde:	2006      	movs	r0, #6
 8000fe0:	f002 ff0d 	bl	8003dfe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000fe4:	2008      	movs	r0, #8
 8000fe6:	f002 ff0a 	bl	8003dfe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000fea:	2009      	movs	r0, #9
 8000fec:	f002 ff07 	bl	8003dfe <HAL_NVIC_DisableIRQ>

	switch(pantalla){
 8000ff0:	4b63      	ldr	r3, [pc, #396]	; (8001180 <menuHandler+0x22c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	f200 8371 	bhi.w	80016de <menuHandler+0x78a>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <menuHandler+0xb0>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	08001015 	.word	0x08001015
 8001008:	080010a9 	.word	0x080010a9
 800100c:	08001211 	.word	0x08001211
 8001010:	080016bd 	.word	0x080016bd
	case Modo_Actual:
		if(update_screen){
 8001014:	4b5f      	ldr	r3, [pc, #380]	; (8001194 <menuHandler+0x240>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <menuHandler+0xd2>
			printMenu_Start();
 800101c:	f000 fbc6 	bl	80017ac <printMenu_Start>
			update_screen = 0;
 8001020:	4b5c      	ldr	r3, [pc, #368]	; (8001194 <menuHandler+0x240>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001026:	2108      	movs	r1, #8
 8001028:	485b      	ldr	r0, [pc, #364]	; (8001198 <menuHandler+0x244>)
 800102a:	f003 f887 	bl	800413c <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d114      	bne.n	800105e <menuHandler+0x10a>
 8001034:	4b59      	ldr	r3, [pc, #356]	; (800119c <menuHandler+0x248>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f083 0301 	eor.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00d      	beq.n	800105e <menuHandler+0x10a>
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001042:	4b57      	ldr	r3, [pc, #348]	; (80011a0 <menuHandler+0x24c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
			pantalla = Cambio_Modo;
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <menuHandler+0x22c>)
 800104c:	2202      	movs	r2, #2
 800104e:	701a      	strb	r2, [r3, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001050:	4b50      	ldr	r3, [pc, #320]	; (8001194 <menuHandler+0x240>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <menuHandler+0x24c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800105e:	2101      	movs	r1, #1
 8001060:	484d      	ldr	r0, [pc, #308]	; (8001198 <menuHandler+0x244>)
 8001062:	f003 f86b 	bl	800413c <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b4c      	ldr	r3, [pc, #304]	; (80011a4 <menuHandler+0x250>)
 8001074:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001076:	2104      	movs	r1, #4
 8001078:	4847      	ldr	r0, [pc, #284]	; (8001198 <menuHandler+0x244>)
 800107a:	f003 f85f 	bl	800413c <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <menuHandler+0x254>)
 800108c:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800108e:	2108      	movs	r1, #8
 8001090:	4841      	ldr	r0, [pc, #260]	; (8001198 <menuHandler+0x244>)
 8001092:	f003 f853 	bl	800413c <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <menuHandler+0x248>)
 80010a4:	701a      	strb	r2, [r3, #0]
		break;
 80010a6:	e330      	b.n	800170a <menuHandler+0x7b6>
	case Cambio_Modo:
		if(update_screen){
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <menuHandler+0x240>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00a      	beq.n	80010c6 <menuHandler+0x172>
			printMenu_CambioModo();
 80010b0:	f000 fc00 	bl	80018b4 <printMenu_CambioModo>
			printSeleccion(seleccion);
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <menuHandler+0x258>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fc70 	bl	80019a0 <printSeleccion>
			update_screen = 0;
 80010c0:	4b34      	ldr	r3, [pc, #208]	; (8001194 <menuHandler+0x240>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80010c6:	2101      	movs	r1, #1
 80010c8:	4833      	ldr	r0, [pc, #204]	; (8001198 <menuHandler+0x244>)
 80010ca:	f003 f837 	bl	800413c <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d118      	bne.n	8001106 <menuHandler+0x1b2>
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <menuHandler+0x250>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d011      	beq.n	8001106 <menuHandler+0x1b2>
			seleccion = seleccion==2?2:seleccion+1;
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <menuHandler+0x258>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d003      	beq.n	80010f2 <menuHandler+0x19e>
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <menuHandler+0x258>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	e000      	b.n	80010f4 <menuHandler+0x1a0>
 80010f2:	2302      	movs	r3, #2
 80010f4:	4a2d      	ldr	r2, [pc, #180]	; (80011ac <menuHandler+0x258>)
 80010f6:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <menuHandler+0x240>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <menuHandler+0x24c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001106:	2104      	movs	r1, #4
 8001108:	4823      	ldr	r0, [pc, #140]	; (8001198 <menuHandler+0x244>)
 800110a:	f003 f817 	bl	800413c <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d118      	bne.n	8001146 <menuHandler+0x1f2>
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <menuHandler+0x254>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d011      	beq.n	8001146 <menuHandler+0x1f2>
			seleccion = seleccion==0?0:seleccion-1;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <menuHandler+0x258>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <menuHandler+0x1de>
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <menuHandler+0x258>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3b01      	subs	r3, #1
 8001130:	e000      	b.n	8001134 <menuHandler+0x1e0>
 8001132:	2300      	movs	r3, #0
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <menuHandler+0x258>)
 8001136:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <menuHandler+0x240>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <menuHandler+0x24c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001146:	2108      	movs	r1, #8
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <menuHandler+0x244>)
 800114a:	f002 fff7 	bl	800413c <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d138      	bne.n	80011c6 <menuHandler+0x272>
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <menuHandler+0x248>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f083 0301 	eor.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d031      	beq.n	80011c6 <menuHandler+0x272>
			switch(seleccion){
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <menuHandler+0x258>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <menuHandler+0x222>
 800116a:	2b02      	cmp	r3, #2
 800116c:	d120      	bne.n	80011b0 <menuHandler+0x25c>
			case Automatico_Tiempo:
				pantalla = Ajustes_Auto_Tiempo;
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <menuHandler+0x22c>)
 8001170:	2203      	movs	r2, #3
 8001172:	701a      	strb	r2, [r3, #0]
				break;
 8001174:	e01d      	b.n	80011b2 <menuHandler+0x25e>
			case Automatico_Humedad:
				pantalla = Ajustes_Auto_Humedad;
 8001176:	4b02      	ldr	r3, [pc, #8]	; (8001180 <menuHandler+0x22c>)
 8001178:	2204      	movs	r2, #4
 800117a:	701a      	strb	r2, [r3, #0]
				break;
 800117c:	e019      	b.n	80011b2 <menuHandler+0x25e>
 800117e:	bf00      	nop
 8001180:	2000020d 	.word	0x2000020d
 8001184:	2000020f 	.word	0x2000020f
 8001188:	20000010 	.word	0x20000010
 800118c:	2000020e 	.word	0x2000020e
 8001190:	20000011 	.word	0x20000011
 8001194:	20000013 	.word	0x20000013
 8001198:	40020000 	.word	0x40020000
 800119c:	20000212 	.word	0x20000212
 80011a0:	2000017c 	.word	0x2000017c
 80011a4:	20000210 	.word	0x20000210
 80011a8:	20000211 	.word	0x20000211
 80011ac:	20000230 	.word	0x20000230
			default:
				break;
 80011b0:	bf00      	nop
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80011b2:	4b86      	ldr	r3, [pc, #536]	; (80013cc <menuHandler+0x478>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	4b85      	ldr	r3, [pc, #532]	; (80013d0 <menuHandler+0x47c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
			seleccion = 0;
 80011c0:	4b84      	ldr	r3, [pc, #528]	; (80013d4 <menuHandler+0x480>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80011c6:	2101      	movs	r1, #1
 80011c8:	4883      	ldr	r0, [pc, #524]	; (80013d8 <menuHandler+0x484>)
 80011ca:	f002 ffb7 	bl	800413c <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b80      	ldr	r3, [pc, #512]	; (80013dc <menuHandler+0x488>)
 80011dc:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80011de:	2104      	movs	r1, #4
 80011e0:	487d      	ldr	r0, [pc, #500]	; (80013d8 <menuHandler+0x484>)
 80011e2:	f002 ffab 	bl	800413c <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <menuHandler+0x48c>)
 80011f4:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80011f6:	2108      	movs	r1, #8
 80011f8:	4877      	ldr	r0, [pc, #476]	; (80013d8 <menuHandler+0x484>)
 80011fa:	f002 ff9f 	bl	800413c <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf14      	ite	ne
 8001204:	2301      	movne	r3, #1
 8001206:	2300      	moveq	r3, #0
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b76      	ldr	r3, [pc, #472]	; (80013e4 <menuHandler+0x490>)
 800120c:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(50);
		break;
 800120e:	e27c      	b.n	800170a <menuHandler+0x7b6>
	case Ajustes_Auto_Tiempo:
		if(update_screen){
 8001210:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <menuHandler+0x478>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d06d      	beq.n	80012f4 <menuHandler+0x3a0>
			ST7735_FillScreenFast(ST7735_CYAN);
 8001218:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800121c:	f001 fdae 	bl	8002d7c <ST7735_FillScreenFast>
			if(alarmasON != 0)
 8001220:	4b71      	ldr	r3, [pc, #452]	; (80013e8 <menuHandler+0x494>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05c      	beq.n	80012e2 <menuHandler+0x38e>
			{
				for(uint8_t i = 0; i < MIN(num_alarmas-seleccion, 3); i++){
 8001228:	2300      	movs	r3, #0
 800122a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800122e:	e025      	b.n	800127c <menuHandler+0x328>
					printAlarma(alarmasON[i], alarmasOFF[i], i);
 8001230:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <menuHandler+0x494>)
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	18ce      	adds	r6, r1, r3
 8001242:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <menuHandler+0x498>)
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	18ca      	adds	r2, r1, r3
 8001254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001258:	9306      	str	r3, [sp, #24]
 800125a:	ac01      	add	r4, sp, #4
 800125c:	4615      	mov	r5, r2
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	6933      	ldr	r3, [r6, #16]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800126e:	f000 fc31 	bl	8001ad4 <printAlarma>
				for(uint8_t i = 0; i < MIN(num_alarmas-seleccion, 3); i++){
 8001272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001276:	3301      	adds	r3, #1
 8001278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800127c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001280:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <menuHandler+0x49c>)
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <menuHandler+0x480>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1acb      	subs	r3, r1, r3
 800128a:	2b03      	cmp	r3, #3
 800128c:	bf28      	it	cs
 800128e:	2303      	movcs	r3, #3
 8001290:	429a      	cmp	r2, r3
 8001292:	d3cd      	bcc.n	8001230 <menuHandler+0x2dc>
				}
				if(num_alarmas-seleccion < 3){
 8001294:	4b56      	ldr	r3, [pc, #344]	; (80013f0 <menuHandler+0x49c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <menuHandler+0x480>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d80a      	bhi.n	80012b8 <menuHandler+0x364>
					printCrearAlarma(num_alarmas-seleccion);
 80012a2:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <menuHandler+0x49c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <menuHandler+0x480>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fc82 	bl	8001bbc <printCrearAlarma>
				}
				if(num_alarmas-seleccion < 2){
 80012b8:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <menuHandler+0x49c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <menuHandler+0x480>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d810      	bhi.n	80012e8 <menuHandler+0x394>
					printOK(num_alarmas-seleccion+1);
 80012c6:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <menuHandler+0x49c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <menuHandler+0x480>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fd20 	bl	8001d20 <printOK>
 80012e0:	e002      	b.n	80012e8 <menuHandler+0x394>
				}
			}
			else
			{
				printCrearAlarma(0);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 fc6a 	bl	8001bbc <printCrearAlarma>
			}
			printSeleccion(0);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fb59 	bl	80019a0 <printSeleccion>
			update_screen = 0;
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <menuHandler+0x478>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80012f4:	2101      	movs	r1, #1
 80012f6:	4838      	ldr	r0, [pc, #224]	; (80013d8 <menuHandler+0x484>)
 80012f8:	f002 ff20 	bl	800413c <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d11b      	bne.n	800133a <menuHandler+0x3e6>
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <menuHandler+0x488>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d014      	beq.n	800133a <menuHandler+0x3e6>
			seleccion = seleccion==num_alarmas?num_alarmas:seleccion+1;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <menuHandler+0x480>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <menuHandler+0x49c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d003      	beq.n	8001324 <menuHandler+0x3d0>
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <menuHandler+0x480>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	e001      	b.n	8001328 <menuHandler+0x3d4>
 8001324:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <menuHandler+0x49c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <menuHandler+0x480>)
 800132a:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <menuHandler+0x478>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <menuHandler+0x47c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 800133a:	2104      	movs	r1, #4
 800133c:	4826      	ldr	r0, [pc, #152]	; (80013d8 <menuHandler+0x484>)
 800133e:	f002 fefd 	bl	800413c <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d118      	bne.n	800137a <menuHandler+0x426>
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <menuHandler+0x48c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d011      	beq.n	800137a <menuHandler+0x426>
			seleccion = seleccion==0?0:seleccion-1;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <menuHandler+0x480>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <menuHandler+0x412>
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <menuHandler+0x480>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	e000      	b.n	8001368 <menuHandler+0x414>
 8001366:	2300      	movs	r3, #0
 8001368:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <menuHandler+0x480>)
 800136a:	6013      	str	r3, [r2, #0]
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <menuHandler+0x478>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <menuHandler+0x47c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 800137a:	2108      	movs	r1, #8
 800137c:	4816      	ldr	r0, [pc, #88]	; (80013d8 <menuHandler+0x484>)
 800137e:	f002 fedd 	bl	800413c <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	f040 8174 	bne.w	8001672 <menuHandler+0x71e>
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <menuHandler+0x490>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f083 0301 	eor.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 816c 	beq.w	8001672 <menuHandler+0x71e>
			if(seleccion >= num_alarmas + 1)
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <menuHandler+0x49c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <menuHandler+0x480>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d829      	bhi.n	80013fc <menuHandler+0x4a8>
			{
				modo = Automatico_Tiempo;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <menuHandler+0x4a0>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	701a      	strb	r2, [r3, #0]
				pantalla = Estado;
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <menuHandler+0x4a4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
				printMenu_Estado();
 80013b4:	f000 f9c2 	bl	800173c <printMenu_Estado>
				HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013b8:	2009      	movs	r0, #9
 80013ba:	f002 fd12 	bl	8003de2 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013be:	2029      	movs	r0, #41	; 0x29
 80013c0:	f002 fd0f 	bl	8003de2 <HAL_NVIC_EnableIRQ>
				nextAlarma();
 80013c4:	f001 f9d4 	bl	8002770 <nextAlarma>
 80013c8:	e14c      	b.n	8001664 <menuHandler+0x710>
 80013ca:	bf00      	nop
 80013cc:	20000013 	.word	0x20000013
 80013d0:	2000017c 	.word	0x2000017c
 80013d4:	20000230 	.word	0x20000230
 80013d8:	40020000 	.word	0x40020000
 80013dc:	20000210 	.word	0x20000210
 80013e0:	20000211 	.word	0x20000211
 80013e4:	20000212 	.word	0x20000212
 80013e8:	2000021c 	.word	0x2000021c
 80013ec:	20000220 	.word	0x20000220
 80013f0:	20000224 	.word	0x20000224
 80013f4:	2000020c 	.word	0x2000020c
 80013f8:	2000020d 	.word	0x2000020d
			}
			else if(seleccion == num_alarmas)
 80013fc:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <menuHandler+0x694>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b7a      	ldr	r3, [pc, #488]	; (80015ec <menuHandler+0x698>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8095 	bne.w	8001534 <menuHandler+0x5e0>
			{
				RTC_TimeTypeDef nueva_alarma[2];
				crearAlarma(nueva_alarma);
 800140a:	463b      	mov	r3, r7
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fcc3 	bl	8001d98 <crearAlarma>
				RTC_TimeTypeDef ON  = nueva_alarma[0];
 8001412:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001416:	463d      	mov	r5, r7
 8001418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	6023      	str	r3, [r4, #0]
				RTC_TimeTypeDef OFF = nueva_alarma[1];
 8001420:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001424:	f107 0514 	add.w	r5, r7, #20
 8001428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	6023      	str	r3, [r4, #0]

				if(num_alarmas == 0){
 8001430:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <menuHandler+0x698>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d12f      	bne.n	8001498 <menuHandler+0x544>
					alarmasON  = (RTC_TimeTypeDef*)malloc(sizeof(RTC_TimeTypeDef));
 8001438:	2014      	movs	r0, #20
 800143a:	f005 fb4f 	bl	8006adc <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <menuHandler+0x69c>)
 8001444:	601a      	str	r2, [r3, #0]
					alarmasOFF = (RTC_TimeTypeDef*)malloc(sizeof(RTC_TimeTypeDef));
 8001446:	2014      	movs	r0, #20
 8001448:	f005 fb48 	bl	8006adc <malloc>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <menuHandler+0x6a0>)
 8001452:	601a      	str	r2, [r3, #0]

					if(alarmasON == NULL || alarmasOFF == NULL){
 8001454:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <menuHandler+0x69c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <menuHandler+0x510>
 800145c:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <menuHandler+0x6a0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <menuHandler+0x514>
						Error_Handler();
 8001464:	f001 fa0e 	bl	8002884 <Error_Handler>
					}

					alarmasON[0] = ON;
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <menuHandler+0x69c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	461d      	mov	r5, r3
 800146e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	602b      	str	r3, [r5, #0]
					alarmasOFF[0] = OFF;
 800147a:	4b5e      	ldr	r3, [pc, #376]	; (80015f4 <menuHandler+0x6a0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	461d      	mov	r5, r3
 8001480:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	602b      	str	r3, [r5, #0]

					num_alarmas++;
 800148c:	4b57      	ldr	r3, [pc, #348]	; (80015ec <menuHandler+0x698>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a56      	ldr	r2, [pc, #344]	; (80015ec <menuHandler+0x698>)
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e0e5      	b.n	8001664 <menuHandler+0x710>
				}
				else{
					alarmasON = realloc(alarmasON, (num_alarmas+1)*sizeof(RTC_TimeTypeDef));
 8001498:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <menuHandler+0x69c>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <menuHandler+0x698>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f005 fc0e 	bl	8006ccc <realloc>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a4f      	ldr	r2, [pc, #316]	; (80015f0 <menuHandler+0x69c>)
 80014b4:	6013      	str	r3, [r2, #0]
					alarmasOFF = realloc(alarmasOFF, (num_alarmas+1)*sizeof(RTC_TimeTypeDef));
 80014b6:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <menuHandler+0x6a0>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <menuHandler+0x698>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f005 fbff 	bl	8006ccc <realloc>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <menuHandler+0x6a0>)
 80014d2:	6013      	str	r3, [r2, #0]

					if(alarmasON == NULL || alarmasOFF == NULL){
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <menuHandler+0x69c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <menuHandler+0x590>
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <menuHandler+0x6a0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <menuHandler+0x594>
						Error_Handler();
 80014e4:	f001 f9ce 	bl	8002884 <Error_Handler>
					}
					alarmasON[num_alarmas] = ON;
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <menuHandler+0x69c>)
 80014ea:	6819      	ldr	r1, [r3, #0]
 80014ec:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <menuHandler+0x698>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	461d      	mov	r5, r3
 80014fc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	602b      	str	r3, [r5, #0]
					alarmasOFF[num_alarmas] = OFF;
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <menuHandler+0x6a0>)
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <menuHandler+0x698>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	461d      	mov	r5, r3
 800151c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	602b      	str	r3, [r5, #0]

					num_alarmas++;
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <menuHandler+0x698>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <menuHandler+0x698>)
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e097      	b.n	8001664 <menuHandler+0x710>
				}
			}
			else{
				RTC_TimeTypeDef* alarmasTemp = malloc((num_alarmas-1)*sizeof(RTC_TimeTypeDef));
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <menuHandler+0x698>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	3b14      	subs	r3, #20
 8001542:	4618      	mov	r0, r3
 8001544:	f005 faca 	bl	8006adc <malloc>
 8001548:	4603      	mov	r3, r0
 800154a:	653b      	str	r3, [r7, #80]	; 0x50
				if(alarmasTemp == NULL){
 800154c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <menuHandler+0x602>
					Error_Handler();
 8001552:	f001 f997 	bl	8002884 <Error_Handler>
				}
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 8001556:	2300      	movs	r3, #0
 8001558:	65bb      	str	r3, [r7, #88]	; 0x58
 800155a:	e022      	b.n	80015a2 <menuHandler+0x64e>
					alarmasTemp[i] = alarmasON[i+((uint32_t)i>=seleccion)];
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <menuHandler+0x69c>)
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <menuHandler+0x694>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001566:	429a      	cmp	r2, r3
 8001568:	bf2c      	ite	cs
 800156a:	2301      	movcs	r3, #1
 800156c:	2300      	movcc	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001574:	441a      	add	r2, r3
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4419      	add	r1, r3
 8001580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	461a      	mov	r2, r3
 800158c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800158e:	4413      	add	r3, r2
 8001590:	461c      	mov	r4, r3
 8001592:	460d      	mov	r5, r1
 8001594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	6023      	str	r3, [r4, #0]
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 800159c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800159e:	3301      	adds	r3, #1
 80015a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <menuHandler+0x698>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d3d6      	bcc.n	800155c <menuHandler+0x608>
				}
				free(alarmasON);
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <menuHandler+0x69c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fa9a 	bl	8006aec <free>
				alarmasON = alarmasTemp;
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <menuHandler+0x69c>)
 80015ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015bc:	6013      	str	r3, [r2, #0]

				alarmasTemp = malloc((num_alarmas-1)*sizeof(RTC_TimeTypeDef));
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <menuHandler+0x698>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	3b14      	subs	r3, #20
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 fa85 	bl	8006adc <malloc>
 80015d2:	4603      	mov	r3, r0
 80015d4:	653b      	str	r3, [r7, #80]	; 0x50
				if(alarmasTemp == NULL){
 80015d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <menuHandler+0x68c>
					Error_Handler();
 80015dc:	f001 f952 	bl	8002884 <Error_Handler>
				}
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 80015e0:	2300      	movs	r3, #0
 80015e2:	657b      	str	r3, [r7, #84]	; 0x54
 80015e4:	e02b      	b.n	800163e <menuHandler+0x6ea>
 80015e6:	bf00      	nop
 80015e8:	20000230 	.word	0x20000230
 80015ec:	20000224 	.word	0x20000224
 80015f0:	2000021c 	.word	0x2000021c
 80015f4:	20000220 	.word	0x20000220
					alarmasTemp[i] = alarmasOFF[i+((uint32_t)i>=seleccion)];
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <menuHandler+0x7bc>)
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	4b45      	ldr	r3, [pc, #276]	; (8001714 <menuHandler+0x7c0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001602:	429a      	cmp	r2, r3
 8001604:	bf2c      	ite	cs
 8001606:	2301      	movcs	r3, #1
 8001608:	2300      	movcc	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001610:	441a      	add	r2, r3
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4419      	add	r1, r3
 800161c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800162a:	4413      	add	r3, r2
 800162c:	461c      	mov	r4, r3
 800162e:	460d      	mov	r5, r1
 8001630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	6023      	str	r3, [r4, #0]
				for(uint32_t i = 0; i < num_alarmas-1; i++){
 8001638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163a:	3301      	adds	r3, #1
 800163c:	657b      	str	r3, [r7, #84]	; 0x54
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <menuHandler+0x7c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3b01      	subs	r3, #1
 8001644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001646:	429a      	cmp	r2, r3
 8001648:	d3d6      	bcc.n	80015f8 <menuHandler+0x6a4>
				}
				free(alarmasOFF);
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <menuHandler+0x7bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f005 fa4c 	bl	8006aec <free>
				alarmasOFF = alarmasTemp;
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <menuHandler+0x7bc>)
 8001656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001658:	6013      	str	r3, [r2, #0]

				num_alarmas--;
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <menuHandler+0x7c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3b01      	subs	r3, #1
 8001660:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <menuHandler+0x7c4>)
 8001662:	6013      	str	r3, [r2, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <menuHandler+0x7c8>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <menuHandler+0x7cc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001672:	2101      	movs	r1, #1
 8001674:	482b      	ldr	r0, [pc, #172]	; (8001724 <menuHandler+0x7d0>)
 8001676:	f002 fd61 	bl	800413c <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <menuHandler+0x7d4>)
 8001688:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800168a:	2104      	movs	r1, #4
 800168c:	4825      	ldr	r0, [pc, #148]	; (8001724 <menuHandler+0x7d0>)
 800168e:	f002 fd55 	bl	800413c <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <menuHandler+0x7d8>)
 80016a0:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80016a2:	2108      	movs	r1, #8
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <menuHandler+0x7d0>)
 80016a6:	f002 fd49 	bl	800413c <HAL_GPIO_ReadPin>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf14      	ite	ne
 80016b0:	2301      	movne	r3, #1
 80016b2:	2300      	moveq	r3, #0
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <menuHandler+0x7dc>)
 80016b8:	701a      	strb	r2, [r3, #0]
		break;
 80016ba:	e026      	b.n	800170a <menuHandler+0x7b6>
	case Ajustes_Auto_Humedad:
		AjustarHumedad();
 80016bc:	f000 fe42 	bl	8002344 <AjustarHumedad>
		modo = Automatico_Humedad;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <menuHandler+0x7e0>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
		pantalla = Estado;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <menuHandler+0x7e4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
		printMenu_Estado();
 80016cc:	f000 f836 	bl	800173c <printMenu_Estado>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016d0:	2009      	movs	r0, #9
 80016d2:	f002 fb86 	bl	8003de2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80016d6:	2029      	movs	r0, #41	; 0x29
 80016d8:	f002 fb91 	bl	8003dfe <HAL_NVIC_DisableIRQ>
		break;
 80016dc:	e015      	b.n	800170a <menuHandler+0x7b6>
	default:
		modo = Manual;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <menuHandler+0x7e0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
		pantalla = Estado;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <menuHandler+0x7e4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
		printMenu_Estado();
 80016ea:	f000 f827 	bl	800173c <printMenu_Estado>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016ee:	2006      	movs	r0, #6
 80016f0:	f002 fb77 	bl	8003de2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016f4:	2008      	movs	r0, #8
 80016f6:	f002 fb74 	bl	8003de2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016fa:	2009      	movs	r0, #9
 80016fc:	f002 fb71 	bl	8003de2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001700:	2029      	movs	r0, #41	; 0x29
 8001702:	f002 fb7c 	bl	8003dfe <HAL_NVIC_DisableIRQ>
 8001706:	e000      	b.n	800170a <menuHandler+0x7b6>
		return;
 8001708:	bf00      	nop
	}
}
 800170a:	3764      	adds	r7, #100	; 0x64
 800170c:	46bd      	mov	sp, r7
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	20000220 	.word	0x20000220
 8001714:	20000230 	.word	0x20000230
 8001718:	20000224 	.word	0x20000224
 800171c:	20000013 	.word	0x20000013
 8001720:	2000017c 	.word	0x2000017c
 8001724:	40020000 	.word	0x40020000
 8001728:	20000210 	.word	0x20000210
 800172c:	20000211 	.word	0x20000211
 8001730:	20000212 	.word	0x20000212
 8001734:	2000020c 	.word	0x2000020c
 8001738:	2000020d 	.word	0x2000020d

0800173c <printMenu_Estado>:





void printMenu_Estado(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af02      	add	r7, sp, #8
	if(humedad > humedad_maxima){
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <printMenu_Estado+0x58>)
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <printMenu_Estado+0x5c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d908      	bls.n	8001760 <printMenu_Estado+0x24>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)DEMASIADA_AGUA);
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <printMenu_Estado+0x60>)
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	23a0      	movs	r3, #160	; 0xa0
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f001 fb20 	bl	8002d9e <ST7735_DrawImage>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)BIEN_AGUA);
	}
	else{
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)POCA_AGUA);
	}
}
 800175e:	e016      	b.n	800178e <printMenu_Estado+0x52>
	else if(humedad > humedad_minima){
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <printMenu_Estado+0x58>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <printMenu_Estado+0x64>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d908      	bls.n	800177e <printMenu_Estado+0x42>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)BIEN_AGUA);
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <printMenu_Estado+0x68>)
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	23a0      	movs	r3, #160	; 0xa0
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	2100      	movs	r1, #0
 8001776:	2000      	movs	r0, #0
 8001778:	f001 fb11 	bl	8002d9e <ST7735_DrawImage>
}
 800177c:	e007      	b.n	800178e <printMenu_Estado+0x52>
		ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)POCA_AGUA);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <printMenu_Estado+0x6c>)
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	23a0      	movs	r3, #160	; 0xa0
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	2100      	movs	r1, #0
 8001788:	2000      	movs	r0, #0
 800178a:	f001 fb08 	bl	8002d9e <ST7735_DrawImage>
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000020f 	.word	0x2000020f
 8001798:	20000011 	.word	0x20000011
 800179c:	0800953c 	.word	0x0800953c
 80017a0:	20000010 	.word	0x20000010
 80017a4:	0801d53c 	.word	0x0801d53c
 80017a8:	0801353c 	.word	0x0801353c

080017ac <printMenu_Start>:

void printMenu_Start(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af04      	add	r7, sp, #16
	ST7735_FillScreenFast(ST7735_CYAN);
 80017b2:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80017b6:	f001 fae1 	bl	8002d7c <ST7735_FillScreenFast>
	ST7735_FillRectangleFast(5, 5, ST7735_WIDTH-10, 40, ST7735_WHITE);
 80017ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2328      	movs	r3, #40	; 0x28
 80017c2:	2276      	movs	r2, #118	; 0x76
 80017c4:	2105      	movs	r1, #5
 80017c6:	2005      	movs	r0, #5
 80017c8:	f001 fa54 	bl	8002c74 <ST7735_FillRectangleFast>
	switch(modo){
 80017cc:	4b32      	ldr	r3, [pc, #200]	; (8001898 <printMenu_Start+0xec>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d032      	beq.n	800183a <printMenu_Start+0x8e>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	dc4d      	bgt.n	8001874 <printMenu_Start+0xc8>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <printMenu_Start+0x36>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d00f      	beq.n	8001800 <printMenu_Start+0x54>
 80017e0:	e048      	b.n	8001874 <printMenu_Start+0xc8>
	case Manual:
		ST7735_WriteString(31, 16, "Manual", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <printMenu_Start+0xf0>)
 80017e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e8:	9202      	str	r2, [sp, #8]
 80017ea:	2200      	movs	r2, #0
 80017ec:	9201      	str	r2, [sp, #4]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	9200      	str	r2, [sp, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2a      	ldr	r2, [pc, #168]	; (80018a0 <printMenu_Start+0xf4>)
 80017f6:	2110      	movs	r1, #16
 80017f8:	201f      	movs	r0, #31
 80017fa:	f001 f9f0 	bl	8002bde <ST7735_WriteString>
		break;
 80017fe:	e048      	b.n	8001892 <printMenu_Start+0xe6>
	case Automatico_Humedad:
		ST7735_WriteString(9, 6, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <printMenu_Start+0xf0>)
 8001802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001806:	9202      	str	r2, [sp, #8]
 8001808:	2200      	movs	r2, #0
 800180a:	9201      	str	r2, [sp, #4]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <printMenu_Start+0xf8>)
 8001814:	2106      	movs	r1, #6
 8001816:	2009      	movs	r0, #9
 8001818:	f001 f9e1 	bl	8002bde <ST7735_WriteString>
		ST7735_WriteString(25, 26, "Humedad", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <printMenu_Start+0xf0>)
 800181e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001822:	9202      	str	r2, [sp, #8]
 8001824:	2200      	movs	r2, #0
 8001826:	9201      	str	r2, [sp, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <printMenu_Start+0xfc>)
 8001830:	211a      	movs	r1, #26
 8001832:	2019      	movs	r0, #25
 8001834:	f001 f9d3 	bl	8002bde <ST7735_WriteString>
		break;
 8001838:	e02b      	b.n	8001892 <printMenu_Start+0xe6>
	case Automatico_Tiempo:
		ST7735_WriteString(9, 6, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <printMenu_Start+0xf0>)
 800183c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001840:	9202      	str	r2, [sp, #8]
 8001842:	2200      	movs	r2, #0
 8001844:	9201      	str	r2, [sp, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <printMenu_Start+0xf8>)
 800184e:	2106      	movs	r1, #6
 8001850:	2009      	movs	r0, #9
 8001852:	f001 f9c4 	bl	8002bde <ST7735_WriteString>
		ST7735_WriteString(31, 26, "Tiempo", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <printMenu_Start+0xf0>)
 8001858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185c:	9202      	str	r2, [sp, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	9201      	str	r2, [sp, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	9200      	str	r2, [sp, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a10      	ldr	r2, [pc, #64]	; (80018ac <printMenu_Start+0x100>)
 800186a:	211a      	movs	r1, #26
 800186c:	201f      	movs	r0, #31
 800186e:	f001 f9b6 	bl	8002bde <ST7735_WriteString>
		break;
 8001872:	e00e      	b.n	8001892 <printMenu_Start+0xe6>
	default:
		ST7735_WriteString(36, 16, "Error", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <printMenu_Start+0xf0>)
 8001876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187a:	9202      	str	r2, [sp, #8]
 800187c:	2200      	movs	r2, #0
 800187e:	9201      	str	r2, [sp, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <printMenu_Start+0x104>)
 8001888:	2110      	movs	r1, #16
 800188a:	2024      	movs	r0, #36	; 0x24
 800188c:	f001 f9a7 	bl	8002bde <ST7735_WriteString>
		break;
 8001890:	bf00      	nop
	}
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000020c 	.word	0x2000020c
 800189c:	20000000 	.word	0x20000000
 80018a0:	0800740c 	.word	0x0800740c
 80018a4:	08007414 	.word	0x08007414
 80018a8:	08007420 	.word	0x08007420
 80018ac:	08007428 	.word	0x08007428
 80018b0:	08007430 	.word	0x08007430

080018b4 <printMenu_CambioModo>:
void printMenu_CambioModo(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af04      	add	r7, sp, #16
	ST7735_FillScreenFast(ST7735_CYAN);
 80018ba:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80018be:	f001 fa5d 	bl	8002d7c <ST7735_FillScreenFast>
	ST7735_FillRectangleFast(5, 5, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80018c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2330      	movs	r3, #48	; 0x30
 80018ca:	2276      	movs	r2, #118	; 0x76
 80018cc:	2105      	movs	r1, #5
 80018ce:	2005      	movs	r0, #5
 80018d0:	f001 f9d0 	bl	8002c74 <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(5, 56, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2330      	movs	r3, #48	; 0x30
 80018dc:	2276      	movs	r2, #118	; 0x76
 80018de:	2138      	movs	r1, #56	; 0x38
 80018e0:	2005      	movs	r0, #5
 80018e2:	f001 f9c7 	bl	8002c74 <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(5, 107, ST7735_WIDTH-10, 48, ST7735_WHITE);
 80018e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2330      	movs	r3, #48	; 0x30
 80018ee:	2276      	movs	r2, #118	; 0x76
 80018f0:	216b      	movs	r1, #107	; 0x6b
 80018f2:	2005      	movs	r0, #5
 80018f4:	f001 f9be 	bl	8002c74 <ST7735_FillRectangleFast>

	ST7735_WriteString(31, 20, "Manual", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <printMenu_CambioModo+0xd8>)
 80018fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fe:	9202      	str	r2, [sp, #8]
 8001900:	2200      	movs	r2, #0
 8001902:	9201      	str	r2, [sp, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	9200      	str	r2, [sp, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a21      	ldr	r2, [pc, #132]	; (8001990 <printMenu_CambioModo+0xdc>)
 800190c:	2114      	movs	r1, #20
 800190e:	201f      	movs	r0, #31
 8001910:	f001 f965 	bl	8002bde <ST7735_WriteString>

	ST7735_WriteString(9, 61, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <printMenu_CambioModo+0xd8>)
 8001916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191a:	9202      	str	r2, [sp, #8]
 800191c:	2200      	movs	r2, #0
 800191e:	9201      	str	r2, [sp, #4]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	9200      	str	r2, [sp, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <printMenu_CambioModo+0xe0>)
 8001928:	213d      	movs	r1, #61	; 0x3d
 800192a:	2009      	movs	r0, #9
 800192c:	f001 f957 	bl	8002bde <ST7735_WriteString>
	ST7735_WriteString(25, 81, "Humedad", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <printMenu_CambioModo+0xd8>)
 8001932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001936:	9202      	str	r2, [sp, #8]
 8001938:	2200      	movs	r2, #0
 800193a:	9201      	str	r2, [sp, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	9200      	str	r2, [sp, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <printMenu_CambioModo+0xe4>)
 8001944:	2151      	movs	r1, #81	; 0x51
 8001946:	2019      	movs	r0, #25
 8001948:	f001 f949 	bl	8002bde <ST7735_WriteString>

	ST7735_WriteString(9, 112, "Automatico", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <printMenu_CambioModo+0xd8>)
 800194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001952:	9202      	str	r2, [sp, #8]
 8001954:	2200      	movs	r2, #0
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	9200      	str	r2, [sp, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <printMenu_CambioModo+0xe0>)
 8001960:	2170      	movs	r1, #112	; 0x70
 8001962:	2009      	movs	r0, #9
 8001964:	f001 f93b 	bl	8002bde <ST7735_WriteString>
	ST7735_WriteString(31, 132, "Tiempo", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <printMenu_CambioModo+0xd8>)
 800196a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196e:	9202      	str	r2, [sp, #8]
 8001970:	2200      	movs	r2, #0
 8001972:	9201      	str	r2, [sp, #4]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <printMenu_CambioModo+0xe8>)
 800197c:	2184      	movs	r1, #132	; 0x84
 800197e:	201f      	movs	r0, #31
 8001980:	f001 f92d 	bl	8002bde <ST7735_WriteString>
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000
 8001990:	0800740c 	.word	0x0800740c
 8001994:	08007414 	.word	0x08007414
 8001998:	08007420 	.word	0x08007420
 800199c:	08007428 	.word	0x08007428

080019a0 <printSeleccion>:

void printSeleccion(uint8_t altura){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	for(int x = 5; x < ST7735_WIDTH-5; x++) {
 80019aa:	2305      	movs	r3, #5
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e052      	b.n	8001a56 <printSeleccion+0xb6>
		ST7735_DrawPixel(x, 5+(altura*51), ST7735_GREEN);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	b298      	uxth	r0, r3
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	0052      	lsls	r2, r2, #1
 80019bc:	4413      	add	r3, r2
 80019be:	461a      	mov	r2, r3
 80019c0:	0111      	lsls	r1, r2, #4
 80019c2:	461a      	mov	r2, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	4413      	add	r3, r2
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3305      	adds	r3, #5
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80019d2:	4619      	mov	r1, r3
 80019d4:	f001 f858 	bl	8002a88 <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 6+(altura*51), ST7735_GREEN);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	b298      	uxth	r0, r3
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	0052      	lsls	r2, r2, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	461a      	mov	r2, r3
 80019e8:	0111      	lsls	r1, r2, #4
 80019ea:	461a      	mov	r2, r3
 80019ec:	460b      	mov	r3, r1
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3306      	adds	r3, #6
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80019fa:	4619      	mov	r1, r3
 80019fc:	f001 f844 	bl	8002a88 <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 5+48+(altura*51), ST7735_GREEN);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	b298      	uxth	r0, r3
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	0052      	lsls	r2, r2, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	0111      	lsls	r1, r2, #4
 8001a12:	461a      	mov	r2, r3
 8001a14:	460b      	mov	r3, r1
 8001a16:	4413      	add	r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3335      	adds	r3, #53	; 0x35
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a22:	4619      	mov	r1, r3
 8001a24:	f001 f830 	bl	8002a88 <ST7735_DrawPixel>
		ST7735_DrawPixel(x, 4+48+(altura*51), ST7735_GREEN);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	b298      	uxth	r0, r3
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	0052      	lsls	r2, r2, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	461a      	mov	r2, r3
 8001a38:	0111      	lsls	r1, r2, #4
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4413      	add	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3334      	adds	r3, #52	; 0x34
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f001 f81c 	bl	8002a88 <ST7735_DrawPixel>
	for(int x = 5; x < ST7735_WIDTH-5; x++) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3301      	adds	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b7a      	cmp	r3, #122	; 0x7a
 8001a5a:	dda9      	ble.n	80019b0 <printSeleccion+0x10>
	}

	for(int y = 5+(altura*51); y < 5+48+(altura*51); y++) {
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	011a      	lsls	r2, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	3305      	adds	r3, #5
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	e022      	b.n	8001ab4 <printSeleccion+0x114>
		ST7735_DrawPixel(5, y, ST7735_GREEN);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a76:	4619      	mov	r1, r3
 8001a78:	2005      	movs	r0, #5
 8001a7a:	f001 f805 	bl	8002a88 <ST7735_DrawPixel>
		ST7735_DrawPixel(6, y, ST7735_GREEN);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a86:	4619      	mov	r1, r3
 8001a88:	2006      	movs	r0, #6
 8001a8a:	f000 fffd 	bl	8002a88 <ST7735_DrawPixel>
		ST7735_DrawPixel(ST7735_WIDTH-5, y, ST7735_GREEN);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a96:	4619      	mov	r1, r3
 8001a98:	207b      	movs	r0, #123	; 0x7b
 8001a9a:	f000 fff5 	bl	8002a88 <ST7735_DrawPixel>
		ST7735_DrawPixel(ST7735_WIDTH-6, y, ST7735_GREEN);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	207a      	movs	r0, #122	; 0x7a
 8001aaa:	f000 ffed 	bl	8002a88 <ST7735_DrawPixel>
	for(int y = 5+(altura*51); y < 5+48+(altura*51); y++) {
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	011a      	lsls	r2, r3, #4
 8001abe:	4413      	add	r3, r2
 8001ac0:	3334      	adds	r3, #52	; 0x34
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	ddd2      	ble.n	8001a6e <printSeleccion+0xce>
	}
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <printAlarma>:

void printAlarma(RTC_TimeTypeDef horaON, RTC_TimeTypeDef horaOFF, uint8_t altura){
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b088      	sub	sp, #32
 8001ada:	af04      	add	r7, sp, #16
 8001adc:	f107 0c18 	add.w	ip, r7, #24
 8001ae0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8001ae4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	0111      	lsls	r1, r2, #4
 8001af4:	461a      	mov	r2, r3
 8001af6:	460b      	mov	r3, r1
 8001af8:	4413      	add	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3305      	adds	r3, #5
 8001afe:	b299      	uxth	r1, r3
 8001b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2330      	movs	r3, #48	; 0x30
 8001b08:	2276      	movs	r2, #118	; 0x76
 8001b0a:	2005      	movs	r0, #5
 8001b0c:	f001 f8b2 	bl	8002c74 <ST7735_FillRectangleFast>
	char alarma[12];
	sprintf(alarma,"ON:  %02d:%02d",horaON.Hours,horaON.Minutes);
 8001b10:	7e3b      	ldrb	r3, [r7, #24]
 8001b12:	461a      	mov	r2, r3
 8001b14:	7e7b      	ldrb	r3, [r7, #25]
 8001b16:	1d38      	adds	r0, r7, #4
 8001b18:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <printAlarma+0xdc>)
 8001b1a:	f005 f8ef 	bl	8006cfc <siprintf>
	ST7735_WriteString(10, 10+51*altura, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001b1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	0052      	lsls	r2, r2, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	0111      	lsls	r1, r2, #4
 8001b2e:	461a      	mov	r2, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	330a      	adds	r3, #10
 8001b38:	b299      	uxth	r1, r3
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <printAlarma+0xe0>)
 8001b3c:	1d38      	adds	r0, r7, #4
 8001b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b42:	9202      	str	r2, [sp, #8]
 8001b44:	2200      	movs	r2, #0
 8001b46:	9201      	str	r2, [sp, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	9200      	str	r2, [sp, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4602      	mov	r2, r0
 8001b50:	200a      	movs	r0, #10
 8001b52:	f001 f844 	bl	8002bde <ST7735_WriteString>
	sprintf(alarma,"OFF: %02d:%02d",horaOFF.Hours,horaOFF.Minutes);
 8001b56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b60:	1d38      	adds	r0, r7, #4
 8001b62:	4915      	ldr	r1, [pc, #84]	; (8001bb8 <printAlarma+0xe4>)
 8001b64:	f005 f8ca 	bl	8006cfc <siprintf>
	ST7735_WriteString(10, 30+51*altura, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001b68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	0111      	lsls	r1, r2, #4
 8001b78:	461a      	mov	r2, r3
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	331e      	adds	r3, #30
 8001b82:	b299      	uxth	r1, r3
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <printAlarma+0xe0>)
 8001b86:	1d38      	adds	r0, r7, #4
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	9202      	str	r2, [sp, #8]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4602      	mov	r2, r0
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f001 f81f 	bl	8002bde <ST7735_WriteString>
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001baa:	b004      	add	sp, #16
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	08007438 	.word	0x08007438
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	08007448 	.word	0x08007448

08001bbc <printCrearAlarma>:

void printCrearAlarma(uint8_t altura){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	0111      	lsls	r1, r2, #4
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4413      	add	r3, r2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3305      	adds	r3, #5
 8001bde:	b299      	uxth	r1, r3
 8001be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2330      	movs	r3, #48	; 0x30
 8001be8:	2276      	movs	r2, #118	; 0x76
 8001bea:	2005      	movs	r0, #5
 8001bec:	f001 f842 	bl	8002c74 <ST7735_FillRectangleFast>
	for(uint16_t x = 0; x <= 17; x++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	81fb      	strh	r3, [r7, #14]
 8001bf4:	e08a      	b.n	8001d0c <printCrearAlarma+0x150>
		for(uint16_t y = 0; y <= 17; y++){
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	81bb      	strh	r3, [r7, #12]
 8001bfa:	e080      	b.n	8001cfe <printCrearAlarma+0x142>
			if(x*x+y*y < 289){
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	89fa      	ldrh	r2, [r7, #14]
 8001c00:	fb03 f202 	mul.w	r2, r3, r2
 8001c04:	89bb      	ldrh	r3, [r7, #12]
 8001c06:	89b9      	ldrh	r1, [r7, #12]
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001c12:	dc71      	bgt.n	8001cf8 <printCrearAlarma+0x13c>
				if(x < 3 && y < 12){
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d802      	bhi.n	8001c20 <printCrearAlarma+0x64>
 8001c1a:	89bb      	ldrh	r3, [r7, #12]
 8001c1c:	2b0b      	cmp	r3, #11
 8001c1e:	d968      	bls.n	8001cf2 <printCrearAlarma+0x136>
					continue;
				}
				if(x < 12 && y < 3){
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	2b0b      	cmp	r3, #11
 8001c24:	d802      	bhi.n	8001c2c <printCrearAlarma+0x70>
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d964      	bls.n	8001cf6 <printCrearAlarma+0x13a>
					continue;
				}
				ST7735_DrawPixel(64+x, (29+51*altura)+y, ST7735_GREEN);
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	3340      	adds	r3, #64	; 0x40
 8001c30:	b298      	uxth	r0, r3
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	0052      	lsls	r2, r2, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	0111      	lsls	r1, r2, #4
 8001c40:	461a      	mov	r2, r3
 8001c42:	460b      	mov	r3, r1
 8001c44:	4413      	add	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	89bb      	ldrh	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	331d      	adds	r3, #29
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001c56:	4619      	mov	r1, r3
 8001c58:	f000 ff16 	bl	8002a88 <ST7735_DrawPixel>
				ST7735_DrawPixel(64+x, (29+51*altura)-y, ST7735_GREEN);
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	3340      	adds	r3, #64	; 0x40
 8001c60:	b298      	uxth	r0, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	0052      	lsls	r2, r2, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	0111      	lsls	r1, r2, #4
 8001c70:	461a      	mov	r2, r3
 8001c72:	460b      	mov	r3, r1
 8001c74:	4413      	add	r3, r2
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	89bb      	ldrh	r3, [r7, #12]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	331d      	adds	r3, #29
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001c86:	4619      	mov	r1, r3
 8001c88:	f000 fefe 	bl	8002a88 <ST7735_DrawPixel>
				ST7735_DrawPixel(64-x, (29+51*altura)+y, ST7735_GREEN);
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c92:	b298      	uxth	r0, r3
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	0052      	lsls	r2, r2, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	0111      	lsls	r1, r2, #4
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	89bb      	ldrh	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	331d      	adds	r3, #29
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f000 fee5 	bl	8002a88 <ST7735_DrawPixel>
				ST7735_DrawPixel(64-x, (29+51*altura)-y, ST7735_GREEN);
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	0052      	lsls	r2, r2, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	0111      	lsls	r1, r2, #4
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4413      	add	r3, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	89bb      	ldrh	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	331d      	adds	r3, #29
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cea:	4619      	mov	r1, r3
 8001cec:	f000 fecc 	bl	8002a88 <ST7735_DrawPixel>
 8001cf0:	e002      	b.n	8001cf8 <printCrearAlarma+0x13c>
					continue;
 8001cf2:	bf00      	nop
 8001cf4:	e000      	b.n	8001cf8 <printCrearAlarma+0x13c>
					continue;
 8001cf6:	bf00      	nop
		for(uint16_t y = 0; y <= 17; y++){
 8001cf8:	89bb      	ldrh	r3, [r7, #12]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	81bb      	strh	r3, [r7, #12]
 8001cfe:	89bb      	ldrh	r3, [r7, #12]
 8001d00:	2b11      	cmp	r3, #17
 8001d02:	f67f af7b 	bls.w	8001bfc <printCrearAlarma+0x40>
	for(uint16_t x = 0; x <= 17; x++){
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	81fb      	strh	r3, [r7, #14]
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	f67f af71 	bls.w	8001bf6 <printCrearAlarma+0x3a>
			}
		}
	}
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <printOK>:
void printOK(uint8_t altura){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
	ST7735_FillRectangleFast(5, 5+51*altura, ST7735_WIDTH-10, 48, ST7735_WHITE);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	0111      	lsls	r1, r2, #4
 8001d38:	461a      	mov	r2, r3
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3305      	adds	r3, #5
 8001d42:	b299      	uxth	r1, r3
 8001d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2330      	movs	r3, #48	; 0x30
 8001d4c:	2276      	movs	r2, #118	; 0x76
 8001d4e:	2005      	movs	r0, #5
 8001d50:	f000 ff90 	bl	8002c74 <ST7735_FillRectangleFast>
	ST7735_WriteString(48, 16+51*altura, "OK", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	0052      	lsls	r2, r2, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	0111      	lsls	r1, r2, #4
 8001d62:	461a      	mov	r2, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	4413      	add	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3310      	adds	r3, #16
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <printOK+0x70>)
 8001d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d74:	9202      	str	r2, [sp, #8]
 8001d76:	2200      	movs	r2, #0
 8001d78:	9201      	str	r2, [sp, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	9200      	str	r2, [sp, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <printOK+0x74>)
 8001d82:	2030      	movs	r0, #48	; 0x30
 8001d84:	f000 ff2b 	bl	8002bde <ST7735_WriteString>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000008 	.word	0x20000008
 8001d94:	08007458 	.word	0x08007458

08001d98 <crearAlarma>:
void crearAlarma(RTC_TimeTypeDef* returnVal){
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b094      	sub	sp, #80	; 0x50
 8001d9c:	af04      	add	r7, sp, #16
 8001d9e:	6078      	str	r0, [r7, #4]
	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001da0:	4ba6      	ldr	r3, [pc, #664]	; (800203c <crearAlarma+0x2a4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	4ba6      	ldr	r3, [pc, #664]	; (8002040 <crearAlarma+0x2a8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_TimeTypeDef ON = {0};
 8001dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
	RTC_TimeTypeDef OFF = {0};
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
	ST7735_FillScreenFast(ST7735_CYAN);
 8001dce:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001dd2:	f000 ffd3 	bl	8002d7c <ST7735_FillScreenFast>
	ST7735_WriteString(48, 10, "ON", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8001dd6:	4b9b      	ldr	r3, [pc, #620]	; (8002044 <crearAlarma+0x2ac>)
 8001dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ddc:	9202      	str	r2, [sp, #8]
 8001dde:	2200      	movs	r2, #0
 8001de0:	9201      	str	r2, [sp, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	9200      	str	r2, [sp, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a97      	ldr	r2, [pc, #604]	; (8002048 <crearAlarma+0x2b0>)
 8001dea:	210a      	movs	r1, #10
 8001dec:	2030      	movs	r0, #48	; 0x30
 8001dee:	f000 fef6 	bl	8002bde <ST7735_WriteString>
	char alarma[9];
	while(true){ //Selección de hora de encendido
		if(update_screen){
 8001df2:	4b92      	ldr	r3, [pc, #584]	; (800203c <crearAlarma+0x2a4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <crearAlarma+0x96>
			sprintf(alarma,"%02d:%02d",ON.Hours,ON.Minutes);
 8001dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e04:	f107 000c 	add.w	r0, r7, #12
 8001e08:	4990      	ldr	r1, [pc, #576]	; (800204c <crearAlarma+0x2b4>)
 8001e0a:	f004 ff77 	bl	8006cfc <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001e0e:	4b90      	ldr	r3, [pc, #576]	; (8002050 <crearAlarma+0x2b8>)
 8001e10:	f107 010c 	add.w	r1, r7, #12
 8001e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e18:	9202      	str	r2, [sp, #8]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	9201      	str	r2, [sp, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	9200      	str	r2, [sp, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	460a      	mov	r2, r1
 8001e26:	211e      	movs	r1, #30
 8001e28:	2024      	movs	r0, #36	; 0x24
 8001e2a:	f000 fed8 	bl	8002bde <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4888      	ldr	r0, [pc, #544]	; (8002054 <crearAlarma+0x2bc>)
 8001e32:	f002 f983 	bl	800413c <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d11b      	bne.n	8001e74 <crearAlarma+0xdc>
 8001e3c:	4b86      	ldr	r3, [pc, #536]	; (8002058 <crearAlarma+0x2c0>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d014      	beq.n	8001e74 <crearAlarma+0xdc>
			if(ON.Hours == 23){
 8001e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e4e:	2b17      	cmp	r3, #23
 8001e50:	d103      	bne.n	8001e5a <crearAlarma+0xc2>
				ON.Hours = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001e58:	e005      	b.n	8001e66 <crearAlarma+0xce>
			}
			else{
				ON.Hours++;
 8001e5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e5e:	3301      	adds	r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001e66:	4b75      	ldr	r3, [pc, #468]	; (800203c <crearAlarma+0x2a4>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	4b74      	ldr	r3, [pc, #464]	; (8002040 <crearAlarma+0x2a8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001e74:	2104      	movs	r1, #4
 8001e76:	4877      	ldr	r0, [pc, #476]	; (8002054 <crearAlarma+0x2bc>)
 8001e78:	f002 f960 	bl	800413c <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d11b      	bne.n	8001eba <crearAlarma+0x122>
 8001e82:	4b76      	ldr	r3, [pc, #472]	; (800205c <crearAlarma+0x2c4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	f083 0301 	eor.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d014      	beq.n	8001eba <crearAlarma+0x122>
			if(ON.Hours == 0){
 8001e90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d103      	bne.n	8001ea0 <crearAlarma+0x108>
				ON.Hours = 23;
 8001e98:	2317      	movs	r3, #23
 8001e9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001e9e:	e005      	b.n	8001eac <crearAlarma+0x114>
			}
			else{
				ON.Hours--;
 8001ea0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001eac:	4b63      	ldr	r3, [pc, #396]	; (800203c <crearAlarma+0x2a4>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	4b63      	ldr	r3, [pc, #396]	; (8002040 <crearAlarma+0x2a8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001eba:	2108      	movs	r1, #8
 8001ebc:	4865      	ldr	r0, [pc, #404]	; (8002054 <crearAlarma+0x2bc>)
 8001ebe:	f002 f93d 	bl	800413c <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10a      	bne.n	8001ede <crearAlarma+0x146>
 8001ec8:	4b65      	ldr	r3, [pc, #404]	; (8002060 <crearAlarma+0x2c8>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f083 0301 	eor.w	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <crearAlarma+0x146>
			button2 = 1;
 8001ed6:	4b62      	ldr	r3, [pc, #392]	; (8002060 <crearAlarma+0x2c8>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
			break;
 8001edc:	e024      	b.n	8001f28 <crearAlarma+0x190>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001ede:	2101      	movs	r1, #1
 8001ee0:	485c      	ldr	r0, [pc, #368]	; (8002054 <crearAlarma+0x2bc>)
 8001ee2:	f002 f92b 	bl	800413c <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b59      	ldr	r3, [pc, #356]	; (8002058 <crearAlarma+0x2c0>)
 8001ef4:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4856      	ldr	r0, [pc, #344]	; (8002054 <crearAlarma+0x2bc>)
 8001efa:	f002 f91f 	bl	800413c <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b54      	ldr	r3, [pc, #336]	; (800205c <crearAlarma+0x2c4>)
 8001f0c:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001f0e:	2108      	movs	r1, #8
 8001f10:	4850      	ldr	r0, [pc, #320]	; (8002054 <crearAlarma+0x2bc>)
 8001f12:	f002 f913 	bl	800413c <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <crearAlarma+0x2c8>)
 8001f24:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 8001f26:	e764      	b.n	8001df2 <crearAlarma+0x5a>
	}
	while(true){ //Selección de minuto de encendido
		if(update_screen){
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <crearAlarma+0x2a4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d019      	beq.n	8001f64 <crearAlarma+0x1cc>
			sprintf(alarma,"%02d:%02d",ON.Hours,ON.Minutes);
 8001f30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f34:	461a      	mov	r2, r3
 8001f36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f3a:	f107 000c 	add.w	r0, r7, #12
 8001f3e:	4943      	ldr	r1, [pc, #268]	; (800204c <crearAlarma+0x2b4>)
 8001f40:	f004 fedc 	bl	8006cfc <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <crearAlarma+0x2b8>)
 8001f46:	f107 010c 	add.w	r1, r7, #12
 8001f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f4e:	9202      	str	r2, [sp, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	9201      	str	r2, [sp, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	211e      	movs	r1, #30
 8001f5e:	2024      	movs	r0, #36	; 0x24
 8001f60:	f000 fe3d 	bl	8002bde <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8001f64:	2101      	movs	r1, #1
 8001f66:	483b      	ldr	r0, [pc, #236]	; (8002054 <crearAlarma+0x2bc>)
 8001f68:	f002 f8e8 	bl	800413c <HAL_GPIO_ReadPin>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d11b      	bne.n	8001faa <crearAlarma+0x212>
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <crearAlarma+0x2c0>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	f083 0301 	eor.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d014      	beq.n	8001faa <crearAlarma+0x212>
			if(ON.Minutes == 59){
 8001f80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f84:	2b3b      	cmp	r3, #59	; 0x3b
 8001f86:	d103      	bne.n	8001f90 <crearAlarma+0x1f8>
				ON.Minutes = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001f8e:	e005      	b.n	8001f9c <crearAlarma+0x204>
			}
			else{
				ON.Minutes++;
 8001f90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <crearAlarma+0x2a4>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <crearAlarma+0x2a8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8001faa:	2104      	movs	r1, #4
 8001fac:	4829      	ldr	r0, [pc, #164]	; (8002054 <crearAlarma+0x2bc>)
 8001fae:	f002 f8c5 	bl	800413c <HAL_GPIO_ReadPin>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d11b      	bne.n	8001ff0 <crearAlarma+0x258>
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <crearAlarma+0x2c4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	f083 0301 	eor.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d014      	beq.n	8001ff0 <crearAlarma+0x258>
			if(ON.Minutes == 0){
 8001fc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <crearAlarma+0x23e>
				ON.Minutes = 59;
 8001fce:	233b      	movs	r3, #59	; 0x3b
 8001fd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001fd4:	e005      	b.n	8001fe2 <crearAlarma+0x24a>
			}
			else{
				ON.Minutes--;
 8001fd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <crearAlarma+0x2a4>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <crearAlarma+0x2a8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8001ff0:	2108      	movs	r1, #8
 8001ff2:	4818      	ldr	r0, [pc, #96]	; (8002054 <crearAlarma+0x2bc>)
 8001ff4:	f002 f8a2 	bl	800413c <HAL_GPIO_ReadPin>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d134      	bne.n	8002068 <crearAlarma+0x2d0>
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <crearAlarma+0x2c8>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d02d      	beq.n	8002068 <crearAlarma+0x2d0>
			button2 = 1;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <crearAlarma+0x2c8>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
			break;
 8002012:	bf00      	nop
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
	}
	ST7735_FillScreenFast(ST7735_CYAN);
 8002014:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002018:	f000 feb0 	bl	8002d7c <ST7735_FillScreenFast>
	ST7735_WriteString(40, 10, "OFF", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <crearAlarma+0x2ac>)
 800201e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002022:	9202      	str	r2, [sp, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	9201      	str	r2, [sp, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	9200      	str	r2, [sp, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <crearAlarma+0x2cc>)
 8002030:	210a      	movs	r1, #10
 8002032:	2028      	movs	r0, #40	; 0x28
 8002034:	f000 fdd3 	bl	8002bde <ST7735_WriteString>
 8002038:	e03b      	b.n	80020b2 <crearAlarma+0x31a>
 800203a:	bf00      	nop
 800203c:	20000013 	.word	0x20000013
 8002040:	2000017c 	.word	0x2000017c
 8002044:	20000008 	.word	0x20000008
 8002048:	0800745c 	.word	0x0800745c
 800204c:	08007460 	.word	0x08007460
 8002050:	20000000 	.word	0x20000000
 8002054:	40020000 	.word	0x40020000
 8002058:	20000210 	.word	0x20000210
 800205c:	20000211 	.word	0x20000211
 8002060:	20000212 	.word	0x20000212
 8002064:	0800746c 	.word	0x0800746c
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002068:	2101      	movs	r1, #1
 800206a:	48a3      	ldr	r0, [pc, #652]	; (80022f8 <crearAlarma+0x560>)
 800206c:	f002 f866 	bl	800413c <HAL_GPIO_ReadPin>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b9f      	ldr	r3, [pc, #636]	; (80022fc <crearAlarma+0x564>)
 800207e:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002080:	2104      	movs	r1, #4
 8002082:	489d      	ldr	r0, [pc, #628]	; (80022f8 <crearAlarma+0x560>)
 8002084:	f002 f85a 	bl	800413c <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b9a      	ldr	r3, [pc, #616]	; (8002300 <crearAlarma+0x568>)
 8002096:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002098:	2108      	movs	r1, #8
 800209a:	4897      	ldr	r0, [pc, #604]	; (80022f8 <crearAlarma+0x560>)
 800209c:	f002 f84e 	bl	800413c <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b95      	ldr	r3, [pc, #596]	; (8002304 <crearAlarma+0x56c>)
 80020ae:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80020b0:	e73a      	b.n	8001f28 <crearAlarma+0x190>
	while(true){ //Selección de hora de apagado
		if(update_screen){
 80020b2:	4b95      	ldr	r3, [pc, #596]	; (8002308 <crearAlarma+0x570>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d017      	beq.n	80020ea <crearAlarma+0x352>
			sprintf(alarma,"%02d.%02d",OFF.Hours,OFF.Minutes);
 80020ba:	7e3b      	ldrb	r3, [r7, #24]
 80020bc:	461a      	mov	r2, r3
 80020be:	7e7b      	ldrb	r3, [r7, #25]
 80020c0:	f107 000c 	add.w	r0, r7, #12
 80020c4:	4991      	ldr	r1, [pc, #580]	; (800230c <crearAlarma+0x574>)
 80020c6:	f004 fe19 	bl	8006cfc <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80020ca:	4b91      	ldr	r3, [pc, #580]	; (8002310 <crearAlarma+0x578>)
 80020cc:	f107 010c 	add.w	r1, r7, #12
 80020d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d4:	9202      	str	r2, [sp, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	9201      	str	r2, [sp, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	9200      	str	r2, [sp, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	460a      	mov	r2, r1
 80020e2:	211e      	movs	r1, #30
 80020e4:	2024      	movs	r0, #36	; 0x24
 80020e6:	f000 fd7a 	bl	8002bde <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80020ea:	2101      	movs	r1, #1
 80020ec:	4882      	ldr	r0, [pc, #520]	; (80022f8 <crearAlarma+0x560>)
 80020ee:	f002 f825 	bl	800413c <HAL_GPIO_ReadPin>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d117      	bne.n	8002128 <crearAlarma+0x390>
 80020f8:	4b80      	ldr	r3, [pc, #512]	; (80022fc <crearAlarma+0x564>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	f083 0301 	eor.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <crearAlarma+0x390>
			if(OFF.Hours == 23){
 8002106:	7e3b      	ldrb	r3, [r7, #24]
 8002108:	2b17      	cmp	r3, #23
 800210a:	d102      	bne.n	8002112 <crearAlarma+0x37a>
				OFF.Hours = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	763b      	strb	r3, [r7, #24]
 8002110:	e003      	b.n	800211a <crearAlarma+0x382>
			}
			else{
				OFF.Hours++;
 8002112:	7e3b      	ldrb	r3, [r7, #24]
 8002114:	3301      	adds	r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	763b      	strb	r3, [r7, #24]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800211a:	4b7b      	ldr	r3, [pc, #492]	; (8002308 <crearAlarma+0x570>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <crearAlarma+0x57c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002128:	2104      	movs	r1, #4
 800212a:	4873      	ldr	r0, [pc, #460]	; (80022f8 <crearAlarma+0x560>)
 800212c:	f002 f806 	bl	800413c <HAL_GPIO_ReadPin>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d117      	bne.n	8002166 <crearAlarma+0x3ce>
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <crearAlarma+0x568>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <crearAlarma+0x3ce>
			if(OFF.Hours == 0){
 8002144:	7e3b      	ldrb	r3, [r7, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <crearAlarma+0x3b8>
				OFF.Hours = 23;
 800214a:	2317      	movs	r3, #23
 800214c:	763b      	strb	r3, [r7, #24]
 800214e:	e003      	b.n	8002158 <crearAlarma+0x3c0>
			}
			else{
				OFF.Hours--;
 8002150:	7e3b      	ldrb	r3, [r7, #24]
 8002152:	3b01      	subs	r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	763b      	strb	r3, [r7, #24]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002158:	4b6b      	ldr	r3, [pc, #428]	; (8002308 <crearAlarma+0x570>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <crearAlarma+0x57c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8002166:	2108      	movs	r1, #8
 8002168:	4863      	ldr	r0, [pc, #396]	; (80022f8 <crearAlarma+0x560>)
 800216a:	f001 ffe7 	bl	800413c <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10a      	bne.n	800218a <crearAlarma+0x3f2>
 8002174:	4b63      	ldr	r3, [pc, #396]	; (8002304 <crearAlarma+0x56c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f083 0301 	eor.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <crearAlarma+0x3f2>
			button2 = 1;
 8002182:	4b60      	ldr	r3, [pc, #384]	; (8002304 <crearAlarma+0x56c>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
			break;
 8002188:	e024      	b.n	80021d4 <crearAlarma+0x43c>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800218a:	2101      	movs	r1, #1
 800218c:	485a      	ldr	r0, [pc, #360]	; (80022f8 <crearAlarma+0x560>)
 800218e:	f001 ffd5 	bl	800413c <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b57      	ldr	r3, [pc, #348]	; (80022fc <crearAlarma+0x564>)
 80021a0:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80021a2:	2104      	movs	r1, #4
 80021a4:	4854      	ldr	r0, [pc, #336]	; (80022f8 <crearAlarma+0x560>)
 80021a6:	f001 ffc9 	bl	800413c <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b52      	ldr	r3, [pc, #328]	; (8002300 <crearAlarma+0x568>)
 80021b8:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80021ba:	2108      	movs	r1, #8
 80021bc:	484e      	ldr	r0, [pc, #312]	; (80022f8 <crearAlarma+0x560>)
 80021be:	f001 ffbd 	bl	800413c <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <crearAlarma+0x56c>)
 80021d0:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80021d2:	e76e      	b.n	80020b2 <crearAlarma+0x31a>
	}
	while(true){ //Selección de minuto de apagado
		if(update_screen){
 80021d4:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <crearAlarma+0x570>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d017      	beq.n	800220c <crearAlarma+0x474>
			sprintf(alarma,"%02d.%02d",OFF.Hours,OFF.Minutes);
 80021dc:	7e3b      	ldrb	r3, [r7, #24]
 80021de:	461a      	mov	r2, r3
 80021e0:	7e7b      	ldrb	r3, [r7, #25]
 80021e2:	f107 000c 	add.w	r0, r7, #12
 80021e6:	4949      	ldr	r1, [pc, #292]	; (800230c <crearAlarma+0x574>)
 80021e8:	f004 fd88 	bl	8006cfc <siprintf>
			ST7735_WriteString(36, 30, alarma, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <crearAlarma+0x578>)
 80021ee:	f107 010c 	add.w	r1, r7, #12
 80021f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f6:	9202      	str	r2, [sp, #8]
 80021f8:	2200      	movs	r2, #0
 80021fa:	9201      	str	r2, [sp, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	460a      	mov	r2, r1
 8002204:	211e      	movs	r1, #30
 8002206:	2024      	movs	r0, #36	; 0x24
 8002208:	f000 fce9 	bl	8002bde <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 800220c:	2101      	movs	r1, #1
 800220e:	483a      	ldr	r0, [pc, #232]	; (80022f8 <crearAlarma+0x560>)
 8002210:	f001 ff94 	bl	800413c <HAL_GPIO_ReadPin>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d117      	bne.n	800224a <crearAlarma+0x4b2>
 800221a:	4b38      	ldr	r3, [pc, #224]	; (80022fc <crearAlarma+0x564>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <crearAlarma+0x4b2>
			if(OFF.Minutes == 59){
 8002228:	7e7b      	ldrb	r3, [r7, #25]
 800222a:	2b3b      	cmp	r3, #59	; 0x3b
 800222c:	d102      	bne.n	8002234 <crearAlarma+0x49c>
				OFF.Minutes = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	767b      	strb	r3, [r7, #25]
 8002232:	e003      	b.n	800223c <crearAlarma+0x4a4>
			}
			else{
				OFF.Minutes++;
 8002234:	7e7b      	ldrb	r3, [r7, #25]
 8002236:	3301      	adds	r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	767b      	strb	r3, [r7, #25]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800223c:	4b32      	ldr	r3, [pc, #200]	; (8002308 <crearAlarma+0x570>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <crearAlarma+0x57c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 800224a:	2104      	movs	r1, #4
 800224c:	482a      	ldr	r0, [pc, #168]	; (80022f8 <crearAlarma+0x560>)
 800224e:	f001 ff75 	bl	800413c <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b01      	cmp	r3, #1
 8002256:	d117      	bne.n	8002288 <crearAlarma+0x4f0>
 8002258:	4b29      	ldr	r3, [pc, #164]	; (8002300 <crearAlarma+0x568>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f083 0301 	eor.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <crearAlarma+0x4f0>
			if(OFF.Minutes == 0){
 8002266:	7e7b      	ldrb	r3, [r7, #25]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <crearAlarma+0x4da>
				OFF.Minutes = 59;
 800226c:	233b      	movs	r3, #59	; 0x3b
 800226e:	767b      	strb	r3, [r7, #25]
 8002270:	e003      	b.n	800227a <crearAlarma+0x4e2>
			}
			else{
				OFF.Minutes--;
 8002272:	7e7b      	ldrb	r3, [r7, #25]
 8002274:	3b01      	subs	r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	767b      	strb	r3, [r7, #25]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <crearAlarma+0x570>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <crearAlarma+0x57c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 8002288:	2108      	movs	r1, #8
 800228a:	481b      	ldr	r0, [pc, #108]	; (80022f8 <crearAlarma+0x560>)
 800228c:	f001 ff56 	bl	800413c <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10a      	bne.n	80022ac <crearAlarma+0x514>
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <crearAlarma+0x56c>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <crearAlarma+0x514>
			button2 = 1;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <crearAlarma+0x56c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
			break;
 80022aa:	e035      	b.n	8002318 <crearAlarma+0x580>
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80022ac:	2101      	movs	r1, #1
 80022ae:	4812      	ldr	r0, [pc, #72]	; (80022f8 <crearAlarma+0x560>)
 80022b0:	f001 ff44 	bl	800413c <HAL_GPIO_ReadPin>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf14      	ite	ne
 80022ba:	2301      	movne	r3, #1
 80022bc:	2300      	moveq	r3, #0
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <crearAlarma+0x564>)
 80022c2:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80022c4:	2104      	movs	r1, #4
 80022c6:	480c      	ldr	r0, [pc, #48]	; (80022f8 <crearAlarma+0x560>)
 80022c8:	f001 ff38 	bl	800413c <HAL_GPIO_ReadPin>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <crearAlarma+0x568>)
 80022da:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80022dc:	2108      	movs	r1, #8
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <crearAlarma+0x560>)
 80022e0:	f001 ff2c 	bl	800413c <HAL_GPIO_ReadPin>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <crearAlarma+0x56c>)
 80022f2:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80022f4:	e76e      	b.n	80021d4 <crearAlarma+0x43c>
 80022f6:	bf00      	nop
 80022f8:	40020000 	.word	0x40020000
 80022fc:	20000210 	.word	0x20000210
 8002300:	20000211 	.word	0x20000211
 8002304:	20000212 	.word	0x20000212
 8002308:	20000013 	.word	0x20000013
 800230c:	08007470 	.word	0x08007470
 8002310:	20000000 	.word	0x20000000
 8002314:	2000017c 	.word	0x2000017c
	}
	returnVal[0] = ON;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	461d      	mov	r5, r3
 800231c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	602b      	str	r3, [r5, #0]
	returnVal[1] = OFF;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3314      	adds	r3, #20
 800232c:	461d      	mov	r5, r3
 800232e:	f107 0418 	add.w	r4, r7, #24
 8002332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	602b      	str	r3, [r5, #0]
}
 800233a:	bf00      	nop
 800233c:	3740      	adds	r7, #64	; 0x40
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop

08002344 <AjustarHumedad>:
void AjustarHumedad(){
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af04      	add	r7, sp, #16
	update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800234a:	4b9d      	ldr	r3, [pc, #628]	; (80025c0 <AjustarHumedad+0x27c>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	4b9c      	ldr	r3, [pc, #624]	; (80025c4 <AjustarHumedad+0x280>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
	ST7735_FillScreenFast(ST7735_CYAN);
 8002358:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800235c:	f000 fd0e 	bl	8002d7c <ST7735_FillScreenFast>
	ST7735_WriteString(16, 10, "MINIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 8002360:	4b99      	ldr	r3, [pc, #612]	; (80025c8 <AjustarHumedad+0x284>)
 8002362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002366:	9202      	str	r2, [sp, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	9201      	str	r2, [sp, #4]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	9200      	str	r2, [sp, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a96      	ldr	r2, [pc, #600]	; (80025cc <AjustarHumedad+0x288>)
 8002374:	210a      	movs	r1, #10
 8002376:	2010      	movs	r0, #16
 8002378:	f000 fc31 	bl	8002bde <ST7735_WriteString>
	char valor[4];
	while(true){ //Selección de humedad minima
		if(update_screen){
 800237c:	4b90      	ldr	r3, [pc, #576]	; (80025c0 <AjustarHumedad+0x27c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <AjustarHumedad+0x6e>
			sprintf(valor,"%02d%c",humedad_minima,37);
 8002384:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <AjustarHumedad+0x28c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	1d38      	adds	r0, r7, #4
 800238c:	2325      	movs	r3, #37	; 0x25
 800238e:	4991      	ldr	r1, [pc, #580]	; (80025d4 <AjustarHumedad+0x290>)
 8002390:	f004 fcb4 	bl	8006cfc <siprintf>
			ST7735_WriteString(47, 40, valor, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002394:	4b90      	ldr	r3, [pc, #576]	; (80025d8 <AjustarHumedad+0x294>)
 8002396:	1d39      	adds	r1, r7, #4
 8002398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800239c:	9202      	str	r2, [sp, #8]
 800239e:	2200      	movs	r2, #0
 80023a0:	9201      	str	r2, [sp, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	9200      	str	r2, [sp, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	460a      	mov	r2, r1
 80023aa:	2128      	movs	r1, #40	; 0x28
 80023ac:	202f      	movs	r0, #47	; 0x2f
 80023ae:	f000 fc16 	bl	8002bde <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 80023b2:	2101      	movs	r1, #1
 80023b4:	4889      	ldr	r0, [pc, #548]	; (80025dc <AjustarHumedad+0x298>)
 80023b6:	f001 fec1 	bl	800413c <HAL_GPIO_ReadPin>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d11b      	bne.n	80023f8 <AjustarHumedad+0xb4>
 80023c0:	4b87      	ldr	r3, [pc, #540]	; (80025e0 <AjustarHumedad+0x29c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f083 0301 	eor.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d014      	beq.n	80023f8 <AjustarHumedad+0xb4>
			if(humedad_minima == 100){
 80023ce:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <AjustarHumedad+0x28c>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d103      	bne.n	80023de <AjustarHumedad+0x9a>
				humedad_minima = 0;
 80023d6:	4b7e      	ldr	r3, [pc, #504]	; (80025d0 <AjustarHumedad+0x28c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e005      	b.n	80023ea <AjustarHumedad+0xa6>
			}
			else{
				humedad_minima++;
 80023de:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <AjustarHumedad+0x28c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <AjustarHumedad+0x28c>)
 80023e8:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80023ea:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <AjustarHumedad+0x27c>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	4b74      	ldr	r3, [pc, #464]	; (80025c4 <AjustarHumedad+0x280>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 80023f8:	2104      	movs	r1, #4
 80023fa:	4878      	ldr	r0, [pc, #480]	; (80025dc <AjustarHumedad+0x298>)
 80023fc:	f001 fe9e 	bl	800413c <HAL_GPIO_ReadPin>
 8002400:	4603      	mov	r3, r0
 8002402:	2b01      	cmp	r3, #1
 8002404:	d11b      	bne.n	800243e <AjustarHumedad+0xfa>
 8002406:	4b77      	ldr	r3, [pc, #476]	; (80025e4 <AjustarHumedad+0x2a0>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d014      	beq.n	800243e <AjustarHumedad+0xfa>
			if(humedad_minima == 0){
 8002414:	4b6e      	ldr	r3, [pc, #440]	; (80025d0 <AjustarHumedad+0x28c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <AjustarHumedad+0xe0>
				humedad_minima = 100;
 800241c:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <AjustarHumedad+0x28c>)
 800241e:	2264      	movs	r2, #100	; 0x64
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e005      	b.n	8002430 <AjustarHumedad+0xec>
			}
			else{
				humedad_minima--;
 8002424:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <AjustarHumedad+0x28c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <AjustarHumedad+0x28c>)
 800242e:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002430:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <AjustarHumedad+0x27c>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <AjustarHumedad+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 800243e:	2108      	movs	r1, #8
 8002440:	4866      	ldr	r0, [pc, #408]	; (80025dc <AjustarHumedad+0x298>)
 8002442:	f001 fe7b 	bl	800413c <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d11d      	bne.n	8002488 <AjustarHumedad+0x144>
 800244c:	4b66      	ldr	r3, [pc, #408]	; (80025e8 <AjustarHumedad+0x2a4>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <AjustarHumedad+0x144>
			button2 = 1;
 800245a:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <AjustarHumedad+0x2a4>)
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
			break;
 8002460:	bf00      	nop
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
	}
	ST7735_FillScreenFast(ST7735_CYAN);
 8002462:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002466:	f000 fc89 	bl	8002d7c <ST7735_FillScreenFast>
	ST7735_WriteString(16, 10, "MAXIMO", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <AjustarHumedad+0x284>)
 800246c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	2200      	movs	r2, #0
 8002474:	9201      	str	r2, [sp, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	9200      	str	r2, [sp, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <AjustarHumedad+0x2a8>)
 800247e:	210a      	movs	r1, #10
 8002480:	2010      	movs	r0, #16
 8002482:	f000 fbac 	bl	8002bde <ST7735_WriteString>
 8002486:	e024      	b.n	80024d2 <AjustarHumedad+0x18e>
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002488:	2101      	movs	r1, #1
 800248a:	4854      	ldr	r0, [pc, #336]	; (80025dc <AjustarHumedad+0x298>)
 800248c:	f001 fe56 	bl	800413c <HAL_GPIO_ReadPin>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <AjustarHumedad+0x29c>)
 800249e:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80024a0:	2104      	movs	r1, #4
 80024a2:	484e      	ldr	r0, [pc, #312]	; (80025dc <AjustarHumedad+0x298>)
 80024a4:	f001 fe4a 	bl	800413c <HAL_GPIO_ReadPin>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf14      	ite	ne
 80024ae:	2301      	movne	r3, #1
 80024b0:	2300      	moveq	r3, #0
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <AjustarHumedad+0x2a0>)
 80024b6:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80024b8:	2108      	movs	r1, #8
 80024ba:	4848      	ldr	r0, [pc, #288]	; (80025dc <AjustarHumedad+0x298>)
 80024bc:	f001 fe3e 	bl	800413c <HAL_GPIO_ReadPin>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <AjustarHumedad+0x2a4>)
 80024ce:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 80024d0:	e754      	b.n	800237c <AjustarHumedad+0x38>
	while(true){ //Selección de humedad maxima
		if(update_screen){
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <AjustarHumedad+0x27c>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <AjustarHumedad+0x1c4>
			sprintf(valor,"%02d%c",humedad_maxima,37);
 80024da:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <AjustarHumedad+0x2ac>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	1d38      	adds	r0, r7, #4
 80024e2:	2325      	movs	r3, #37	; 0x25
 80024e4:	493b      	ldr	r1, [pc, #236]	; (80025d4 <AjustarHumedad+0x290>)
 80024e6:	f004 fc09 	bl	8006cfc <siprintf>
			ST7735_WriteString(47, 40, valor, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <AjustarHumedad+0x294>)
 80024ec:	1d39      	adds	r1, r7, #4
 80024ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f2:	9202      	str	r2, [sp, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	9201      	str	r2, [sp, #4]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	9200      	str	r2, [sp, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	460a      	mov	r2, r1
 8002500:	2128      	movs	r1, #40	; 0x28
 8002502:	202f      	movs	r0, #47	; 0x2f
 8002504:	f000 fb6b 	bl	8002bde <ST7735_WriteString>
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && button0 == 0){
 8002508:	2101      	movs	r1, #1
 800250a:	4834      	ldr	r0, [pc, #208]	; (80025dc <AjustarHumedad+0x298>)
 800250c:	f001 fe16 	bl	800413c <HAL_GPIO_ReadPin>
 8002510:	4603      	mov	r3, r0
 8002512:	2b01      	cmp	r3, #1
 8002514:	d11c      	bne.n	8002550 <AjustarHumedad+0x20c>
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <AjustarHumedad+0x29c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	f083 0301 	eor.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <AjustarHumedad+0x20c>
			if(humedad_maxima == 100){
 8002524:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <AjustarHumedad+0x2ac>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b64      	cmp	r3, #100	; 0x64
 800252a:	d104      	bne.n	8002536 <AjustarHumedad+0x1f2>
				humedad_maxima = humedad_minima;
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <AjustarHumedad+0x28c>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <AjustarHumedad+0x2ac>)
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e005      	b.n	8002542 <AjustarHumedad+0x1fe>
			}
			else{
				humedad_maxima++;
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <AjustarHumedad+0x2ac>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <AjustarHumedad+0x2ac>)
 8002540:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002542:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <AjustarHumedad+0x27c>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <AjustarHumedad+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1 && button1 == 0){
 8002550:	2104      	movs	r1, #4
 8002552:	4822      	ldr	r0, [pc, #136]	; (80025dc <AjustarHumedad+0x298>)
 8002554:	f001 fdf2 	bl	800413c <HAL_GPIO_ReadPin>
 8002558:	4603      	mov	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	d11d      	bne.n	800259a <AjustarHumedad+0x256>
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <AjustarHumedad+0x2a0>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d016      	beq.n	800259a <AjustarHumedad+0x256>
			if(humedad_maxima <= humedad_minima){
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <AjustarHumedad+0x2ac>)
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <AjustarHumedad+0x28c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d803      	bhi.n	8002580 <AjustarHumedad+0x23c>
				humedad_maxima = 100;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <AjustarHumedad+0x2ac>)
 800257a:	2264      	movs	r2, #100	; 0x64
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e005      	b.n	800258c <AjustarHumedad+0x248>
			}
			else{
				humedad_maxima--;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <AjustarHumedad+0x2ac>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <AjustarHumedad+0x2ac>)
 800258a:	701a      	strb	r2, [r3, #0]
			}
			update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <AjustarHumedad+0x27c>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <AjustarHumedad+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1 && button2 == 0){
 800259a:	2108      	movs	r1, #8
 800259c:	480f      	ldr	r0, [pc, #60]	; (80025dc <AjustarHumedad+0x298>)
 800259e:	f001 fdcd 	bl	800413c <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d125      	bne.n	80025f4 <AjustarHumedad+0x2b0>
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <AjustarHumedad+0x2a4>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01e      	beq.n	80025f4 <AjustarHumedad+0x2b0>
			button2 = 1;
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <AjustarHumedad+0x2a4>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
			break;
 80025bc:	e03f      	b.n	800263e <AjustarHumedad+0x2fa>
 80025be:	bf00      	nop
 80025c0:	20000013 	.word	0x20000013
 80025c4:	2000017c 	.word	0x2000017c
 80025c8:	20000008 	.word	0x20000008
 80025cc:	0800747c 	.word	0x0800747c
 80025d0:	20000010 	.word	0x20000010
 80025d4:	08007484 	.word	0x08007484
 80025d8:	20000000 	.word	0x20000000
 80025dc:	40020000 	.word	0x40020000
 80025e0:	20000210 	.word	0x20000210
 80025e4:	20000211 	.word	0x20000211
 80025e8:	20000212 	.word	0x20000212
 80025ec:	0800748c 	.word	0x0800748c
 80025f0:	20000011 	.word	0x20000011
		}
		button0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80025f4:	2101      	movs	r1, #1
 80025f6:	481a      	ldr	r0, [pc, #104]	; (8002660 <AjustarHumedad+0x31c>)
 80025f8:	f001 fda0 	bl	800413c <HAL_GPIO_ReadPin>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <AjustarHumedad+0x320>)
 800260a:	701a      	strb	r2, [r3, #0]
		button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800260c:	2104      	movs	r1, #4
 800260e:	4814      	ldr	r0, [pc, #80]	; (8002660 <AjustarHumedad+0x31c>)
 8002610:	f001 fd94 	bl	800413c <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <AjustarHumedad+0x324>)
 8002622:	701a      	strb	r2, [r3, #0]
		button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002624:	2108      	movs	r1, #8
 8002626:	480e      	ldr	r0, [pc, #56]	; (8002660 <AjustarHumedad+0x31c>)
 8002628:	f001 fd88 	bl	800413c <HAL_GPIO_ReadPin>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <AjustarHumedad+0x328>)
 800263a:	701a      	strb	r2, [r3, #0]
		if(update_screen){
 800263c:	e749      	b.n	80024d2 <AjustarHumedad+0x18e>
	}
	humedad_media = (humedad_minima+humedad_maxima)/2;
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <AjustarHumedad+0x32c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <AjustarHumedad+0x330>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4413      	add	r3, r2
 800264a:	0fda      	lsrs	r2, r3, #31
 800264c:	4413      	add	r3, r2
 800264e:	105b      	asrs	r3, r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <AjustarHumedad+0x334>)
 8002654:	701a      	strb	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40020000 	.word	0x40020000
 8002664:	20000210 	.word	0x20000210
 8002668:	20000211 	.word	0x20000211
 800266c:	20000212 	.word	0x20000212
 8002670:	20000010 	.word	0x20000010
 8002674:	20000011 	.word	0x20000011
 8002678:	20000012 	.word	0x20000012

0800267c <HAL_GPIO_EXTI_Callback>:



//	Interrupción de botones
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_press = 0;
	if(HAL_GetTick() < last_press){
 8002686:	f000 fe6f 	bl	8003368 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <HAL_GPIO_EXTI_Callback+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d320      	bcc.n	80026d6 <HAL_GPIO_EXTI_Callback+0x5a>
		return;
	}

	if(GPIO_Pin==GPIO_PIN_0){
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_GPIO_EXTI_Callback+0x22>
		AbrirValvula();
 800269a:	f7fe fb3d 	bl	8000d18 <AbrirValvula>
	}
	if(GPIO_Pin==GPIO_PIN_2){
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d101      	bne.n	80026a8 <HAL_GPIO_EXTI_Callback+0x2c>
		CerrarValvula();
 80026a4:	f7fe fb44 	bl	8000d30 <CerrarValvula>
	}
	if(GPIO_Pin==GPIO_PIN_3){
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d10c      	bne.n	80026c8 <HAL_GPIO_EXTI_Callback+0x4c>
		pantalla = Modo_Actual;
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_GPIO_EXTI_Callback+0x68>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
		update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_GPIO_EXTI_Callback+0x70>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 80026c2:	480a      	ldr	r0, [pc, #40]	; (80026ec <HAL_GPIO_EXTI_Callback+0x70>)
 80026c4:	f003 fa48 	bl	8005b58 <HAL_TIM_Base_Start_IT>
	}
	last_press = HAL_GetTick()+250;
 80026c8:	f000 fe4e 	bl	8003368 <HAL_GetTick>
 80026cc:	4603      	mov	r3, r0
 80026ce:	33fa      	adds	r3, #250	; 0xfa
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_GPIO_EXTI_Callback+0x64>)
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_EXTI_Callback+0x5c>
		return;
 80026d6:	bf00      	nop
}
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000234 	.word	0x20000234
 80026e4:	2000020d 	.word	0x2000020d
 80026e8:	20000013 	.word	0x20000013
 80026ec:	2000017c 	.word	0x2000017c

080026f0 <HAL_RTC_AlarmAEventCallback>:
//	Interrupción de RTC
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	nextAlarma();
 80026f8:	f000 f83a 	bl	8002770 <nextAlarma>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d11d      	bne.n	8002752 <HAL_TIM_PeriodElapsedCallback+0x4e>
		pantalla = Estado;
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
		update_screen = 1;__HAL_TIM_SET_COUNTER(&htim3, 0);
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Stop_IT(&htim3);
 800272a:	480f      	ldr	r0, [pc, #60]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800272c:	f003 fa76 	bl	8005c1c <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002730:	2009      	movs	r0, #9
 8002732:	f001 fb56 	bl	8003de2 <HAL_NVIC_EnableIRQ>
		if(modo == Manual){
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800273e:	2006      	movs	r0, #6
 8002740:	f001 fb4f 	bl	8003de2 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002744:	2008      	movs	r0, #8
 8002746:	f001 fb4c 	bl	8003de2 <HAL_NVIC_EnableIRQ>
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40000400 	.word	0x40000400
 8002760:	2000020d 	.word	0x2000020d
 8002764:	20000013 	.word	0x20000013
 8002768:	2000017c 	.word	0x2000017c
 800276c:	2000020c 	.word	0x2000020c

08002770 <nextAlarma>:
void nextAlarma(){
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
	siguiente_alarma = (siguiente_alarma+1)%num_alarmas;
 8002776:	4b3c      	ldr	r3, [pc, #240]	; (8002868 <nextAlarma+0xf8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	4a3b      	ldr	r2, [pc, #236]	; (800286c <nextAlarma+0xfc>)
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	fbb3 f1f2 	udiv	r1, r3, r2
 8002784:	fb01 f202 	mul.w	r2, r1, r2
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	4a37      	ldr	r2, [pc, #220]	; (8002868 <nextAlarma+0xf8>)
 800278c:	6013      	str	r3, [r2, #0]

	RTC_AlarmTypeDef sAlarm = {0};
 800278e:	463b      	mov	r3, r7
 8002790:	2228      	movs	r2, #40	; 0x28
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f004 f9b1 	bl	8006afc <memset>

	if(isTimeToTurnOn)
 800279a:	4b35      	ldr	r3, [pc, #212]	; (8002870 <nextAlarma+0x100>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01f      	beq.n	80027e2 <nextAlarma+0x72>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, 1);
 80027a2:	2201      	movs	r2, #1
 80027a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a8:	4832      	ldr	r0, [pc, #200]	; (8002874 <nextAlarma+0x104>)
 80027aa:	f001 fcdf 	bl	800416c <HAL_GPIO_WritePin>
		isTimeToTurnOn = 0;
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <nextAlarma+0x100>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
		sAlarm.AlarmTime.Hours = alarmasON[siguiente_alarma].Hours;
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <nextAlarma+0x108>)
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <nextAlarma+0xf8>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = alarmasON[siguiente_alarma].Minutes;
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <nextAlarma+0x108>)
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <nextAlarma+0xf8>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	707b      	strb	r3, [r7, #1]
 80027e0:	e01e      	b.n	8002820 <nextAlarma+0xb0>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027e8:	4822      	ldr	r0, [pc, #136]	; (8002874 <nextAlarma+0x104>)
 80027ea:	f001 fcbf 	bl	800416c <HAL_GPIO_WritePin>
		isTimeToTurnOn = 1;
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <nextAlarma+0x100>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
		sAlarm.AlarmTime.Hours = alarmasOFF[siguiente_alarma].Hours;
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <nextAlarma+0x10c>)
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <nextAlarma+0xf8>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = alarmasOFF[siguiente_alarma].Minutes;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <nextAlarma+0x10c>)
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <nextAlarma+0xf8>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	707b      	strb	r3, [r7, #1]
	}


	sAlarm.AlarmTime.Seconds = 0x0;
 8002820:	2300      	movs	r3, #0
 8002822:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x31;
 800283c:	2331      	movs	r3, #49	; 0x31
 800283e:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8002842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002846:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002848:	463b      	mov	r3, r7
 800284a:	2200      	movs	r2, #0
 800284c:	4619      	mov	r1, r3
 800284e:	480c      	ldr	r0, [pc, #48]	; (8002880 <nextAlarma+0x110>)
 8002850:	f002 fc54 	bl	80050fc <HAL_RTC_SetAlarm_IT>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <nextAlarma+0xee>
	{
		Error_Handler();
 800285a:	f000 f813 	bl	8002884 <Error_Handler>
	}
}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	; 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000228 	.word	0x20000228
 800286c:	20000224 	.word	0x20000224
 8002870:	20000014 	.word	0x20000014
 8002874:	40020c00 	.word	0x40020c00
 8002878:	2000021c 	.word	0x2000021c
 800287c:	20000220 	.word	0x20000220
 8002880:	20000104 	.word	0x20000104

08002884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002888:	b672      	cpsid	i
}
 800288a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800288c:	e7fe      	b.n	800288c <Error_Handler+0x8>
	...

08002890 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	2110      	movs	r1, #16
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <ST7735_Select+0x14>)
 800289a:	f001 fc67 	bl	800416c <HAL_GPIO_WritePin>
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40020000 	.word	0x40020000

080028a8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	2110      	movs	r1, #16
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <ST7735_Unselect+0x14>)
 80028b2:	f001 fc5b 	bl	800416c <HAL_GPIO_WritePin>
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40020000 	.word	0x40020000

080028c0 <ST7735_Reset>:

static void ST7735_Reset() {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	4806      	ldr	r0, [pc, #24]	; (80028e4 <ST7735_Reset+0x24>)
 80028ca:	f001 fc4f 	bl	800416c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80028ce:	2005      	movs	r0, #5
 80028d0:	f000 fd56 	bl	8003380 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	2140      	movs	r1, #64	; 0x40
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <ST7735_Reset+0x24>)
 80028da:	f001 fc47 	bl	800416c <HAL_GPIO_WritePin>
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40020000 	.word	0x40020000

080028e8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2110      	movs	r1, #16
 80028f6:	4807      	ldr	r0, [pc, #28]	; (8002914 <ST7735_WriteCommand+0x2c>)
 80028f8:	f001 fc38 	bl	800416c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80028fc:	1df9      	adds	r1, r7, #7
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	2201      	movs	r2, #1
 8002904:	4804      	ldr	r0, [pc, #16]	; (8002918 <ST7735_WriteCommand+0x30>)
 8002906:	f002 fed1 	bl	80056ac <HAL_SPI_Transmit>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40020800 	.word	0x40020800
 8002918:	20000124 	.word	0x20000124

0800291c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002926:	2201      	movs	r2, #1
 8002928:	2110      	movs	r1, #16
 800292a:	4807      	ldr	r0, [pc, #28]	; (8002948 <ST7735_WriteData+0x2c>)
 800292c:	f001 fc1e 	bl	800416c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4804      	ldr	r0, [pc, #16]	; (800294c <ST7735_WriteData+0x30>)
 800293c:	f002 feb6 	bl	80056ac <HAL_SPI_Transmit>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40020800 	.word	0x40020800
 800294c:	20000124 	.word	0x20000124

08002950 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002962:	e034      	b.n	80029ce <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800296e:	7afb      	ldrb	r3, [r7, #11]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ffb9 	bl	80028e8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002980:	7abb      	ldrb	r3, [r7, #10]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800298a:	7abb      	ldrb	r3, [r7, #10]
 800298c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002990:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002992:	7abb      	ldrb	r3, [r7, #10]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	4619      	mov	r1, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffbd 	bl	800291c <ST7735_WriteData>
            addr += numArgs;
 80029a2:	7abb      	ldrb	r3, [r7, #10]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80029aa:	89bb      	ldrh	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80029ba:	89bb      	ldrh	r3, [r7, #12]
 80029bc:	2bff      	cmp	r3, #255	; 0xff
 80029be:	d102      	bne.n	80029c6 <ST7735_ExecuteCommandList+0x76>
 80029c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029c4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80029c6:	89bb      	ldrh	r3, [r7, #12]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fcd9 	bl	8003380 <HAL_Delay>
    while(numCommands--) {
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	1e5a      	subs	r2, r3, #1
 80029d2:	73fa      	strb	r2, [r7, #15]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1c5      	bne.n	8002964 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80029e2:	b590      	push	{r4, r7, lr}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4604      	mov	r4, r0
 80029ea:	4608      	mov	r0, r1
 80029ec:	4611      	mov	r1, r2
 80029ee:	461a      	mov	r2, r3
 80029f0:	4623      	mov	r3, r4
 80029f2:	71fb      	strb	r3, [r7, #7]
 80029f4:	4603      	mov	r3, r0
 80029f6:	71bb      	strb	r3, [r7, #6]
 80029f8:	460b      	mov	r3, r1
 80029fa:	717b      	strb	r3, [r7, #5]
 80029fc:	4613      	mov	r3, r2
 80029fe:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002a00:	202a      	movs	r0, #42	; 0x2a
 8002a02:	f7ff ff71 	bl	80028e8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002a06:	2300      	movs	r3, #0
 8002a08:	733b      	strb	r3, [r7, #12]
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	737b      	strb	r3, [r7, #13]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73bb      	strb	r3, [r7, #14]
 8002a12:	797b      	ldrb	r3, [r7, #5]
 8002a14:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff7d 	bl	800291c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002a22:	202b      	movs	r0, #43	; 0x2b
 8002a24:	f7ff ff60 	bl	80028e8 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002a28:	79bb      	ldrb	r3, [r7, #6]
 8002a2a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002a2c:	793b      	ldrb	r3, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	2104      	movs	r1, #4
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff70 	bl	800291c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002a3c:	202c      	movs	r0, #44	; 0x2c
 8002a3e:	f7ff ff53 	bl	80028e8 <ST7735_WriteCommand>
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}
	...

08002a4c <ST7735_Init>:

void ST7735_Init() {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8002a50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a54:	f000 fc94 	bl	8003380 <HAL_Delay>
    ST7735_Select();
 8002a58:	f7ff ff1a 	bl	8002890 <ST7735_Select>
    ST7735_Reset();
 8002a5c:	f7ff ff30 	bl	80028c0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002a60:	4806      	ldr	r0, [pc, #24]	; (8002a7c <ST7735_Init+0x30>)
 8002a62:	f7ff ff75 	bl	8002950 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <ST7735_Init+0x34>)
 8002a68:	f7ff ff72 	bl	8002950 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <ST7735_Init+0x38>)
 8002a6e:	f7ff ff6f 	bl	8002950 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002a72:	f7ff ff19 	bl	80028a8 <ST7735_Unselect>
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	0802753c 	.word	0x0802753c
 8002a80:	08027578 	.word	0x08027578
 8002a84:	08027588 	.word	0x08027588

08002a88 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
 8002a92:	460b      	mov	r3, r1
 8002a94:	80bb      	strh	r3, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a9e:	d823      	bhi.n	8002ae8 <ST7735_DrawPixel+0x60>
 8002aa0:	88bb      	ldrh	r3, [r7, #4]
 8002aa2:	2b9f      	cmp	r3, #159	; 0x9f
 8002aa4:	d820      	bhi.n	8002ae8 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8002aa6:	f7ff fef3 	bl	8002890 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	b2d8      	uxtb	r0, r3
 8002aae:	88bb      	ldrh	r3, [r7, #4]
 8002ab0:	b2d9      	uxtb	r1, r3
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	88bb      	ldrh	r3, [r7, #4]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f7ff ff8e 	bl	80029e2 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	733b      	strb	r3, [r7, #12]
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	2102      	movs	r1, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff1d 	bl	800291c <ST7735_WriteData>

    ST7735_Unselect();
 8002ae2:	f7ff fee1 	bl	80028a8 <ST7735_Unselect>
 8002ae6:	e000      	b.n	8002aea <ST7735_DrawPixel+0x62>
        return;
 8002ae8:	bf00      	nop
}
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002af0:	b082      	sub	sp, #8
 8002af2:	b590      	push	{r4, r7, lr}
 8002af4:	b089      	sub	sp, #36	; 0x24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
 8002afe:	460b      	mov	r3, r1
 8002b00:	80bb      	strh	r3, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	b2d8      	uxtb	r0, r3
 8002b0a:	88bb      	ldrh	r3, [r7, #4]
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b16:	4413      	add	r3, r2
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b2dc      	uxtb	r4, r3
 8002b1e:	88bb      	ldrh	r3, [r7, #4]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b26:	4413      	add	r3, r2
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4622      	mov	r2, r4
 8002b30:	f7ff ff57 	bl	80029e2 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	e043      	b.n	8002bc2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	3b20      	subs	r3, #32
 8002b40:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	440b      	add	r3, r1
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	e029      	b.n	8002bb0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00e      	beq.n	8002b8a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002b6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	743b      	strb	r3, [r7, #16]
 8002b76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff feca 	bl	800291c <ST7735_WriteData>
 8002b88:	e00f      	b.n	8002baa <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002b8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	733b      	strb	r3, [r7, #12]
 8002b96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff feb9 	bl	800291c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	3301      	adds	r3, #1
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d3cf      	bcc.n	8002b5c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d3b5      	bcc.n	8002b3a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	3724      	adds	r7, #36	; 0x24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002bda:	b002      	add	sp, #8
 8002bdc:	4770      	bx	lr

08002bde <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002bde:	b082      	sub	sp, #8
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	603a      	str	r2, [r7, #0]
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002bf2:	f7ff fe4d 	bl	8002890 <ST7735_Select>

    while(*str) {
 8002bf6:	e02d      	b.n	8002c54 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	7d3a      	ldrb	r2, [r7, #20]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002c00:	dd13      	ble.n	8002c2a <ST7735_WriteString+0x4c>
            x = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002c06:	7d7b      	ldrb	r3, [r7, #21]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002c10:	88bb      	ldrh	r3, [r7, #4]
 8002c12:	7d7a      	ldrb	r2, [r7, #21]
 8002c14:	4413      	add	r3, r2
 8002c16:	2b9f      	cmp	r3, #159	; 0x9f
 8002c18:	dc21      	bgt.n	8002c5e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d103      	bne.n	8002c2a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	603b      	str	r3, [r7, #0]
                continue;
 8002c28:	e014      	b.n	8002c54 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	88b9      	ldrh	r1, [r7, #4]
 8002c30:	88f8      	ldrh	r0, [r7, #6]
 8002c32:	8c3b      	ldrh	r3, [r7, #32]
 8002c34:	9302      	str	r3, [sp, #8]
 8002c36:	8bbb      	ldrh	r3, [r7, #28]
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f7ff ff56 	bl	8002af0 <ST7735_WriteChar>
        //HAL_Delay(1);
        x += font.width;
 8002c44:	7d3b      	ldrb	r3, [r7, #20]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
        str++;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1cd      	bne.n	8002bf8 <ST7735_WriteString+0x1a>
 8002c5c:	e000      	b.n	8002c60 <ST7735_WriteString+0x82>
                break;
 8002c5e:	bf00      	nop
    }

    ST7735_Unselect();
 8002c60:	f7ff fe22 	bl	80028a8 <ST7735_Unselect>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c6e:	b002      	add	sp, #8
 8002c70:	4770      	bx	lr
	...

08002c74 <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	80fb      	strh	r3, [r7, #6]
 8002c86:	4603      	mov	r3, r0
 8002c88:	80bb      	strh	r3, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	2b7f      	cmp	r3, #127	; 0x7f
 8002c96:	d869      	bhi.n	8002d6c <ST7735_FillRectangleFast+0xf8>
 8002c98:	88bb      	ldrh	r3, [r7, #4]
 8002c9a:	2b9f      	cmp	r3, #159	; 0x9f
 8002c9c:	d866      	bhi.n	8002d6c <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	2b80      	cmp	r3, #128	; 0x80
 8002ca6:	dd03      	ble.n	8002cb0 <ST7735_FillRectangleFast+0x3c>
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002cae:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002cb0:	88ba      	ldrh	r2, [r7, #4]
 8002cb2:	883b      	ldrh	r3, [r7, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	2ba0      	cmp	r3, #160	; 0xa0
 8002cb8:	dd03      	ble.n	8002cc2 <ST7735_FillRectangleFast+0x4e>
 8002cba:	88bb      	ldrh	r3, [r7, #4]
 8002cbc:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002cc0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002cc2:	f7ff fde5 	bl	8002890 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	b2d8      	uxtb	r0, r3
 8002cca:	88bb      	ldrh	r3, [r7, #4]
 8002ccc:	b2d9      	uxtb	r1, r3
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b2dc      	uxtb	r4, r3
 8002cde:	88bb      	ldrh	r3, [r7, #4]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	883b      	ldrh	r3, [r7, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4622      	mov	r2, r4
 8002cf0:	f7ff fe77 	bl	80029e2 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8002cf4:	8c3b      	ldrh	r3, [r7, #32]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	723b      	strb	r3, [r7, #8]
 8002cfe:	8c3b      	ldrh	r3, [r7, #32]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fee7 	bl	8006adc <malloc>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8002d12:	2300      	movs	r3, #0
 8002d14:	80fb      	strh	r3, [r7, #6]
 8002d16:	e008      	b.n	8002d2a <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	893a      	ldrh	r2, [r7, #8]
 8002d22:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	3301      	adds	r3, #1
 8002d28:	80fb      	strh	r3, [r7, #6]
 8002d2a:	88fa      	ldrh	r2, [r7, #6]
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3f2      	bcc.n	8002d18 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002d32:	2201      	movs	r2, #1
 8002d34:	2110      	movs	r1, #16
 8002d36:	480f      	ldr	r0, [pc, #60]	; (8002d74 <ST7735_FillRectangleFast+0x100>)
 8002d38:	f001 fa18 	bl	800416c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8002d3c:	883b      	ldrh	r3, [r7, #0]
 8002d3e:	80bb      	strh	r3, [r7, #4]
 8002d40:	e00b      	b.n	8002d5a <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	480a      	ldr	r0, [pc, #40]	; (8002d78 <ST7735_FillRectangleFast+0x104>)
 8002d50:	f002 fcac 	bl	80056ac <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8002d54:	88bb      	ldrh	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	80bb      	strh	r3, [r7, #4]
 8002d5a:	88bb      	ldrh	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <ST7735_FillRectangleFast+0xce>

    free(line);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f003 fec3 	bl	8006aec <free>
    ST7735_Unselect();
 8002d66:	f7ff fd9f 	bl	80028a8 <ST7735_Unselect>
 8002d6a:	e000      	b.n	8002d6e <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002d6c:	bf00      	nop
}
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	40020800 	.word	0x40020800
 8002d78:	20000124 	.word	0x20000124

08002d7c <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	23a0      	movs	r3, #160	; 0xa0
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7ff ff6f 	bl	8002c74 <ST7735_FillRectangleFast>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4604      	mov	r4, r0
 8002da6:	4608      	mov	r0, r1
 8002da8:	4611      	mov	r1, r2
 8002daa:	461a      	mov	r2, r3
 8002dac:	4623      	mov	r3, r4
 8002dae:	80fb      	strh	r3, [r7, #6]
 8002db0:	4603      	mov	r3, r0
 8002db2:	80bb      	strh	r3, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
 8002db8:	4613      	mov	r3, r2
 8002dba:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002dc0:	d831      	bhi.n	8002e26 <ST7735_DrawImage+0x88>
 8002dc2:	88bb      	ldrh	r3, [r7, #4]
 8002dc4:	2b9f      	cmp	r3, #159	; 0x9f
 8002dc6:	d82e      	bhi.n	8002e26 <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	4413      	add	r3, r2
 8002dce:	2b80      	cmp	r3, #128	; 0x80
 8002dd0:	dc2b      	bgt.n	8002e2a <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8002dd2:	88ba      	ldrh	r2, [r7, #4]
 8002dd4:	883b      	ldrh	r3, [r7, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	2ba0      	cmp	r3, #160	; 0xa0
 8002dda:	dc28      	bgt.n	8002e2e <ST7735_DrawImage+0x90>

    ST7735_Select();
 8002ddc:	f7ff fd58 	bl	8002890 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	b2d8      	uxtb	r0, r3
 8002de4:	88bb      	ldrh	r3, [r7, #4]
 8002de6:	b2d9      	uxtb	r1, r3
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b2dc      	uxtb	r4, r3
 8002df8:	88bb      	ldrh	r3, [r7, #4]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	883b      	ldrh	r3, [r7, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4622      	mov	r2, r4
 8002e0a:	f7ff fdea 	bl	80029e2 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	883a      	ldrh	r2, [r7, #0]
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	69b8      	ldr	r0, [r7, #24]
 8002e1c:	f7ff fd7e 	bl	800291c <ST7735_WriteData>
    ST7735_Unselect();
 8002e20:	f7ff fd42 	bl	80028a8 <ST7735_Unselect>
 8002e24:	e004      	b.n	8002e30 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8002e2e:	bf00      	nop
}
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
	...

08002e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_MspInit+0x4c>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <HAL_MspInit+0x4c>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_MspInit+0x4c>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_MspInit+0x4c>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <HAL_MspInit+0x4c>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_MspInit+0x4c>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e76:	2007      	movs	r0, #7
 8002e78:	f000 ff8c 	bl	8003d94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800

08002e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_ADC_MspInit+0x7c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d127      	bne.n	8002efa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_ADC_MspInit+0x80>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <HAL_ADC_MspInit+0x80>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_ADC_MspInit+0x80>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <HAL_ADC_MspInit+0x80>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <HAL_ADC_MspInit+0x80>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_ADC_MspInit+0x80>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4805      	ldr	r0, [pc, #20]	; (8002f0c <HAL_ADC_MspInit+0x84>)
 8002ef6:	f000 ff9d 	bl	8003e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40012000 	.word	0x40012000
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40020000 	.word	0x40020000

08002f10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_RTC_MspInit+0x60>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d119      	bne.n	8002f68 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f34:	2302      	movs	r3, #2
 8002f36:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f3e:	f107 0308 	add.w	r3, r7, #8
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fda8 	bl	8004a98 <HAL_RCCEx_PeriphCLKConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002f4e:	f7ff fc99 	bl	8002884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_RTC_MspInit+0x64>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2029      	movs	r0, #41	; 0x29
 8002f5e:	f000 ff24 	bl	8003daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002f62:	2029      	movs	r0, #41	; 0x29
 8002f64:	f000 ff3d 	bl	8003de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f68:	bf00      	nop
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40002800 	.word	0x40002800
 8002f74:	42470e3c 	.word	0x42470e3c

08002f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <HAL_SPI_MspInit+0x84>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d12b      	bne.n	8002ff2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a17      	ldr	r2, [pc, #92]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fd2:	23a0      	movs	r3, #160	; 0xa0
 8002fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	4805      	ldr	r0, [pc, #20]	; (8003004 <HAL_SPI_MspInit+0x8c>)
 8002fee:	f000 ff21 	bl	8003e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40013000 	.word	0x40013000
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000

08003008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <HAL_TIM_Base_MspInit+0x48>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d115      	bne.n	8003046 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_TIM_Base_MspInit+0x4c>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <HAL_TIM_Base_MspInit+0x4c>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_TIM_Base_MspInit+0x4c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	201d      	movs	r0, #29
 800303c:	f000 feb5 	bl	8003daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003040:	201d      	movs	r0, #29
 8003042:	f000 fece 	bl	8003de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40000400 	.word	0x40000400
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <HAL_TIM_PWM_MspInit+0x3c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10d      	bne.n	8003086 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_TIM_PWM_MspInit+0x40>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_TIM_PWM_MspInit+0x40>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_TIM_PWM_MspInit+0x40>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40000800 	.word	0x40000800
 8003098:	40023800 	.word	0x40023800

0800309c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_TIM_MspPostInit+0x68>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d11e      	bne.n	80030fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_TIM_MspPostInit+0x6c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_TIM_MspPostInit+0x6c>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_TIM_MspPostInit+0x6c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80030da:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80030de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	4619      	mov	r1, r3
 80030f6:	4805      	ldr	r0, [pc, #20]	; (800310c <HAL_TIM_MspPostInit+0x70>)
 80030f8:	f000 fe9c 	bl	8003e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030fc:	bf00      	nop
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40000800 	.word	0x40000800
 8003108:	40023800 	.word	0x40023800
 800310c:	40020c00 	.word	0x40020c00

08003110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <NMI_Handler+0x4>

08003116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311a:	e7fe      	b.n	800311a <HardFault_Handler+0x4>

0800311c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <MemManage_Handler+0x4>

08003122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <BusFault_Handler+0x4>

08003128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800312c:	e7fe      	b.n	800312c <UsageFault_Handler+0x4>

0800312e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800315c:	f000 f8f0 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}

08003164 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003168:	2001      	movs	r0, #1
 800316a:	f001 f819 	bl	80041a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}

08003172 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003176:	2004      	movs	r0, #4
 8003178:	f001 f812 	bl	80041a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}

08003180 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003184:	2008      	movs	r0, #8
 8003186:	f001 f80b 	bl	80041a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003194:	4802      	ldr	r0, [pc, #8]	; (80031a0 <TIM3_IRQHandler+0x10>)
 8003196:	f002 fe6f 	bl	8005e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000017c 	.word	0x2000017c

080031a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <RTC_Alarm_IRQHandler+0x10>)
 80031aa:	f002 f8e9 	bl	8005380 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000104 	.word	0x20000104

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f003 fc4e 	bl	8006a88 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	; (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20020000 	.word	0x20020000
 8003218:	00000400 	.word	0x00000400
 800321c:	20000238 	.word	0x20000238
 8003220:	20000250 	.word	0x20000250

08003224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800324e:	490e      	ldr	r1, [pc, #56]	; (8003288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003250:	4a0e      	ldr	r2, [pc, #56]	; (800328c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003254:	e002      	b.n	800325c <LoopCopyDataInit>

08003256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325a:	3304      	adds	r3, #4

0800325c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003260:	d3f9      	bcc.n	8003256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003262:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003264:	4c0b      	ldr	r4, [pc, #44]	; (8003294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003268:	e001      	b.n	800326e <LoopFillZerobss>

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800326c:	3204      	adds	r2, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003272:	f7ff ffd7 	bl	8003224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003276:	f003 fc0d 	bl	8006a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327a:	f7fd f983 	bl	8000584 <main>
  bx  lr    
 800327e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800328c:	08027608 	.word	0x08027608
  ldr r2, =_sbss
 8003290:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003294:	20000250 	.word	0x20000250

08003298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC_IRQHandler>
	...

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_Init+0x40>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_Init+0x40>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_Init+0x40>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 fd65 	bl	8003d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f000 f808 	bl	80032e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff fdb2 	bl	8002e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0x54>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_InitTick+0x58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fd8b 	bl	8003e1a <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f000 fd45 	bl	8003daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_InitTick+0x5c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000018 	.word	0x20000018
 8003338:	20000020 	.word	0x20000020
 800333c:	2000001c 	.word	0x2000001c

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000020 	.word	0x20000020
 8003364:	2000023c 	.word	0x2000023c

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	2000023c 	.word	0x2000023c

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffde 	bl	8003368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000020 	.word	0x20000020

080033c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e033      	b.n	8003446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fd4e 	bl	8002e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d118      	bne.n	8003438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800340e:	f023 0302 	bic.w	r3, r3, #2
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 faca 	bl	80039b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
 8003436:	e001      	b.n	800343c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Start+0x1a>
 8003466:	2302      	movs	r3, #2
 8003468:	e097      	b.n	800359a <HAL_ADC_Start+0x14a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d018      	beq.n	80034b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003490:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <HAL_ADC_Start+0x158>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a45      	ldr	r2, [pc, #276]	; (80035ac <HAL_ADC_Start+0x15c>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9a      	lsrs	r2, r3, #18
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80034a4:	e002      	b.n	80034ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f9      	bne.n	80034a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d15f      	bne.n	8003580 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fe:	d106      	bne.n	800350e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f023 0206 	bic.w	r2, r3, #6
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
 800350c:	e002      	b.n	8003514 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800351c:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_ADC_Start+0x160>)
 800351e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003528:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d129      	bne.n	8003598 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	e020      	b.n	8003598 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <HAL_ADC_Start+0x164>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d11b      	bne.n	8003598 <HAL_ADC_Start+0x148>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	e00b      	b.n	8003598 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0210 	orr.w	r2, r3, #16
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000018 	.word	0x20000018
 80035ac:	431bde83 	.word	0x431bde83
 80035b0:	40012300 	.word	0x40012300
 80035b4:	40012000 	.word	0x40012000

080035b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_Stop+0x16>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e021      	b.n	8003612 <HAL_ADC_Stop+0x5a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363a:	d113      	bne.n	8003664 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364a:	d10b      	bne.n	8003664 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e063      	b.n	800372c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003664:	f7ff fe80 	bl	8003368 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800366a:	e021      	b.n	80036b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d01d      	beq.n	80036b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_ADC_PollForConversion+0x6c>
 800367a:	f7ff fe75 	bl	8003368 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d212      	bcs.n	80036b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b02      	cmp	r3, #2
 8003696:	d00b      	beq.n	80036b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e03d      	b.n	800372c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d1d6      	bne.n	800366c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f06f 0212 	mvn.w	r2, #18
 80036c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d123      	bne.n	800372a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11f      	bne.n	800372a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d006      	beq.n	8003706 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	d111      	bne.n	800372a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x1c>
 8003768:	2302      	movs	r3, #2
 800376a:	e113      	b.n	8003994 <HAL_ADC_ConfigChannel+0x244>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b09      	cmp	r3, #9
 800377a:	d925      	bls.n	80037c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68d9      	ldr	r1, [r3, #12]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	3b1e      	subs	r3, #30
 8003792:	2207      	movs	r2, #7
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43da      	mvns	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	400a      	ands	r2, r1
 80037a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68d9      	ldr	r1, [r3, #12]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4618      	mov	r0, r3
 80037b4:	4603      	mov	r3, r0
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4403      	add	r3, r0
 80037ba:	3b1e      	subs	r3, #30
 80037bc:	409a      	lsls	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	e022      	b.n	800380e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6919      	ldr	r1, [r3, #16]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	2207      	movs	r2, #7
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	400a      	ands	r2, r1
 80037ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6919      	ldr	r1, [r3, #16]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	4618      	mov	r0, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4403      	add	r3, r0
 8003804:	409a      	lsls	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b06      	cmp	r3, #6
 8003814:	d824      	bhi.n	8003860 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	3b05      	subs	r3, #5
 8003828:	221f      	movs	r2, #31
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43da      	mvns	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	400a      	ands	r2, r1
 8003836:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	b29b      	uxth	r3, r3
 8003844:	4618      	mov	r0, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	3b05      	subs	r3, #5
 8003852:	fa00 f203 	lsl.w	r2, r0, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	635a      	str	r2, [r3, #52]	; 0x34
 800385e:	e04c      	b.n	80038fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d824      	bhi.n	80038b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	3b23      	subs	r3, #35	; 0x23
 800387a:	221f      	movs	r2, #31
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43da      	mvns	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	400a      	ands	r2, r1
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	4618      	mov	r0, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	3b23      	subs	r3, #35	; 0x23
 80038a4:	fa00 f203 	lsl.w	r2, r0, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
 80038b0:	e023      	b.n	80038fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3b41      	subs	r3, #65	; 0x41
 80038c4:	221f      	movs	r2, #31
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	400a      	ands	r2, r1
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	3b41      	subs	r3, #65	; 0x41
 80038ee:	fa00 f203 	lsl.w	r2, r0, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038fa:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <HAL_ADC_ConfigChannel+0x250>)
 80038fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_ADC_ConfigChannel+0x254>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10f      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x1d8>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b12      	cmp	r3, #18
 800390e:	d10b      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_ADC_ConfigChannel+0x254>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12b      	bne.n	800398a <HAL_ADC_ConfigChannel+0x23a>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <HAL_ADC_ConfigChannel+0x258>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <HAL_ADC_ConfigChannel+0x1f4>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b11      	cmp	r3, #17
 8003942:	d122      	bne.n	800398a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <HAL_ADC_ConfigChannel+0x258>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d111      	bne.n	800398a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_ADC_ConfigChannel+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a11      	ldr	r2, [pc, #68]	; (80039b0 <HAL_ADC_ConfigChannel+0x260>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	0c9a      	lsrs	r2, r3, #18
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800397c:	e002      	b.n	8003984 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3b01      	subs	r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f9      	bne.n	800397e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40012300 	.word	0x40012300
 80039a4:	40012000 	.word	0x40012000
 80039a8:	10000012 	.word	0x10000012
 80039ac:	20000018 	.word	0x20000018
 80039b0:	431bde83 	.word	0x431bde83

080039b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039bc:	4b79      	ldr	r3, [pc, #484]	; (8003ba4 <ADC_Init+0x1f0>)
 80039be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	021a      	lsls	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <ADC_Init+0x1f4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6899      	ldr	r1, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	e00f      	b.n	8003ab2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0202 	bic.w	r2, r2, #2
 8003ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7e1b      	ldrb	r3, [r3, #24]
 8003acc:	005a      	lsls	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003afe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	035a      	lsls	r2, r3, #13
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	e007      	b.n	8003b28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	051a      	lsls	r2, r3, #20
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b6a:	025a      	lsls	r2, r3, #9
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6899      	ldr	r1, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	029a      	lsls	r2, r3, #10
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40012300 	.word	0x40012300
 8003ba8:	0f000001 	.word	0x0f000001

08003bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bde:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	60d3      	str	r3, [r2, #12]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <__NVIC_GetPriorityGrouping+0x18>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	f003 0307 	and.w	r3, r3, #7
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db0b      	blt.n	8003c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	4907      	ldr	r1, [pc, #28]	; (8003c48 <__NVIC_EnableIRQ+0x38>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2001      	movs	r0, #1
 8003c32:	fa00 f202 	lsl.w	r2, r0, r2
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100

08003c4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db12      	blt.n	8003c84 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	490a      	ldr	r1, [pc, #40]	; (8003c90 <__NVIC_DisableIRQ+0x44>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	3320      	adds	r3, #32
 8003c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c78:	f3bf 8f4f 	dsb	sy
}
 8003c7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c7e:	f3bf 8f6f 	isb	sy
}
 8003c82:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100

08003c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	6039      	str	r1, [r7, #0]
 8003c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	db0a      	blt.n	8003cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	490c      	ldr	r1, [pc, #48]	; (8003ce0 <__NVIC_SetPriority+0x4c>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cbc:	e00a      	b.n	8003cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	4908      	ldr	r1, [pc, #32]	; (8003ce4 <__NVIC_SetPriority+0x50>)
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	3b04      	subs	r3, #4
 8003ccc:	0112      	lsls	r2, r2, #4
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	761a      	strb	r2, [r3, #24]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	e000e100 	.word	0xe000e100
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f1c3 0307 	rsb	r3, r3, #7
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	bf28      	it	cs
 8003d06:	2304      	movcs	r3, #4
 8003d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d902      	bls.n	8003d18 <NVIC_EncodePriority+0x30>
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3b03      	subs	r3, #3
 8003d16:	e000      	b.n	8003d1a <NVIC_EncodePriority+0x32>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43da      	mvns	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d30:	f04f 31ff 	mov.w	r1, #4294967295
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	43d9      	mvns	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	4313      	orrs	r3, r2
         );
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d60:	d301      	bcc.n	8003d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d62:	2301      	movs	r3, #1
 8003d64:	e00f      	b.n	8003d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <SysTick_Config+0x40>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d6e:	210f      	movs	r1, #15
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	f7ff ff8e 	bl	8003c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <SysTick_Config+0x40>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d7e:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <SysTick_Config+0x40>)
 8003d80:	2207      	movs	r2, #7
 8003d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	e000e010 	.word	0xe000e010

08003d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ff05 	bl	8003bac <__NVIC_SetPriorityGrouping>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dbc:	f7ff ff1a 	bl	8003bf4 <__NVIC_GetPriorityGrouping>
 8003dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7ff ff8e 	bl	8003ce8 <NVIC_EncodePriority>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff5d 	bl	8003c94 <__NVIC_SetPriority>
}
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff0d 	bl	8003c10 <__NVIC_EnableIRQ>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff1d 	bl	8003c4c <__NVIC_DisableIRQ>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ff94 	bl	8003d50 <SysTick_Config>
 8003e28:	4603      	mov	r3, r0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	; 0x24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	e159      	b.n	8004104 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e50:	2201      	movs	r2, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	f040 8148 	bne.w	80040fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d005      	beq.n	8003e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d130      	bne.n	8003ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 0201 	and.w	r2, r3, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d017      	beq.n	8003f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d123      	bne.n	8003f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0203 	and.w	r2, r3, #3
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a2 	beq.w	80040fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	4b57      	ldr	r3, [pc, #348]	; (800411c <HAL_GPIO_Init+0x2e8>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	4a56      	ldr	r2, [pc, #344]	; (800411c <HAL_GPIO_Init+0x2e8>)
 8003fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fca:	4b54      	ldr	r3, [pc, #336]	; (800411c <HAL_GPIO_Init+0x2e8>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fd6:	4a52      	ldr	r2, [pc, #328]	; (8004120 <HAL_GPIO_Init+0x2ec>)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3302      	adds	r3, #2
 8003fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a49      	ldr	r2, [pc, #292]	; (8004124 <HAL_GPIO_Init+0x2f0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d019      	beq.n	8004036 <HAL_GPIO_Init+0x202>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a48      	ldr	r2, [pc, #288]	; (8004128 <HAL_GPIO_Init+0x2f4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_GPIO_Init+0x1fe>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a47      	ldr	r2, [pc, #284]	; (800412c <HAL_GPIO_Init+0x2f8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00d      	beq.n	800402e <HAL_GPIO_Init+0x1fa>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a46      	ldr	r2, [pc, #280]	; (8004130 <HAL_GPIO_Init+0x2fc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <HAL_GPIO_Init+0x1f6>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a45      	ldr	r2, [pc, #276]	; (8004134 <HAL_GPIO_Init+0x300>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_GPIO_Init+0x1f2>
 8004022:	2304      	movs	r3, #4
 8004024:	e008      	b.n	8004038 <HAL_GPIO_Init+0x204>
 8004026:	2307      	movs	r3, #7
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x204>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_Init+0x204>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_Init+0x204>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_Init+0x204>
 8004036:	2300      	movs	r3, #0
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004048:	4935      	ldr	r1, [pc, #212]	; (8004120 <HAL_GPIO_Init+0x2ec>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004056:	4b38      	ldr	r3, [pc, #224]	; (8004138 <HAL_GPIO_Init+0x304>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800407a:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <HAL_GPIO_Init+0x304>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004080:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <HAL_GPIO_Init+0x304>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a4:	4a24      	ldr	r2, [pc, #144]	; (8004138 <HAL_GPIO_Init+0x304>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <HAL_GPIO_Init+0x304>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ce:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <HAL_GPIO_Init+0x304>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d4:	4b18      	ldr	r3, [pc, #96]	; (8004138 <HAL_GPIO_Init+0x304>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f8:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <HAL_GPIO_Init+0x304>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	f67f aea2 	bls.w	8003e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40013800 	.word	0x40013800
 8004124:	40020000 	.word	0x40020000
 8004128:	40020400 	.word	0x40020400
 800412c:	40020800 	.word	0x40020800
 8004130:	40020c00 	.word	0x40020c00
 8004134:	40021000 	.word	0x40021000
 8004138:	40013c00 	.word	0x40013c00

0800413c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
 8004158:	e001      	b.n	800415e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800417c:	787b      	ldrb	r3, [r7, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004188:	e003      	b.n	8004192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	619a      	str	r2, [r3, #24]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d006      	beq.n	80041c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041b6:	4a05      	ldr	r2, [pc, #20]	; (80041cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe fa5c 	bl	800267c <HAL_GPIO_EXTI_Callback>
  }
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40013c00 	.word	0x40013c00

080041d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e267      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d075      	beq.n	80042da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ee:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d00c      	beq.n	8004214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fa:	4b85      	ldr	r3, [pc, #532]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004202:	2b08      	cmp	r3, #8
 8004204:	d112      	bne.n	800422c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004206:	4b82      	ldr	r3, [pc, #520]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004214:	4b7e      	ldr	r3, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d05b      	beq.n	80042d8 <HAL_RCC_OscConfig+0x108>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d157      	bne.n	80042d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e242      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004234:	d106      	bne.n	8004244 <HAL_RCC_OscConfig+0x74>
 8004236:	4b76      	ldr	r3, [pc, #472]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a75      	ldr	r2, [pc, #468]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e01d      	b.n	8004280 <HAL_RCC_OscConfig+0xb0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x98>
 800424e:	4b70      	ldr	r3, [pc, #448]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6f      	ldr	r2, [pc, #444]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b6d      	ldr	r3, [pc, #436]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6c      	ldr	r2, [pc, #432]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0xb0>
 8004268:	4b69      	ldr	r3, [pc, #420]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a68      	ldr	r2, [pc, #416]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a65      	ldr	r2, [pc, #404]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7ff f86e 	bl	8003368 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004290:	f7ff f86a 	bl	8003368 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e207      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	4b5b      	ldr	r3, [pc, #364]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0xc0>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7ff f85a 	bl	8003368 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b8:	f7ff f856 	bl	8003368 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e1f3      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ca:	4b51      	ldr	r3, [pc, #324]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0xe8>
 80042d6:	e000      	b.n	80042da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d063      	beq.n	80043ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e6:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d11c      	bne.n	8004338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fe:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d116      	bne.n	8004338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_RCC_OscConfig+0x152>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d001      	beq.n	8004322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e1c7      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004322:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4937      	ldr	r1, [pc, #220]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	e03a      	b.n	80043ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004340:	4b34      	ldr	r3, [pc, #208]	; (8004414 <HAL_RCC_OscConfig+0x244>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7ff f80f 	bl	8003368 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434e:	f7ff f80b 	bl	8003368 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1a8      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4925      	ldr	r1, [pc, #148]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
 8004380:	e015      	b.n	80043ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x244>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe ffee 	bl	8003368 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004390:	f7fe ffea 	bl	8003368 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e187      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d036      	beq.n	8004428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d016      	beq.n	80043f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <HAL_RCC_OscConfig+0x248>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fe ffce 	bl	8003368 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d0:	f7fe ffca 	bl	8003368 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e167      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_OscConfig+0x240>)
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x200>
 80043ee:	e01b      	b.n	8004428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_OscConfig+0x248>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f6:	f7fe ffb7 	bl	8003368 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fc:	e00e      	b.n	800441c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fe:	f7fe ffb3 	bl	8003368 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d907      	bls.n	800441c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e150      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
 8004410:	40023800 	.word	0x40023800
 8004414:	42470000 	.word	0x42470000
 8004418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441c:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ea      	bne.n	80043fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8097 	beq.w	8004564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443a:	4b81      	ldr	r3, [pc, #516]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	4b7d      	ldr	r3, [pc, #500]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a7c      	ldr	r2, [pc, #496]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b7a      	ldr	r3, [pc, #488]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004466:	4b77      	ldr	r3, [pc, #476]	; (8004644 <HAL_RCC_OscConfig+0x474>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d118      	bne.n	80044a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004472:	4b74      	ldr	r3, [pc, #464]	; (8004644 <HAL_RCC_OscConfig+0x474>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a73      	ldr	r2, [pc, #460]	; (8004644 <HAL_RCC_OscConfig+0x474>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447e:	f7fe ff73 	bl	8003368 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004486:	f7fe ff6f 	bl	8003368 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e10c      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <HAL_RCC_OscConfig+0x474>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x2ea>
 80044ac:	4b64      	ldr	r3, [pc, #400]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a63      	ldr	r2, [pc, #396]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
 80044b8:	e01c      	b.n	80044f4 <HAL_RCC_OscConfig+0x324>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x30c>
 80044c2:	4b5f      	ldr	r3, [pc, #380]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a5e      	ldr	r2, [pc, #376]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	4b5c      	ldr	r3, [pc, #368]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a5b      	ldr	r2, [pc, #364]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70
 80044da:	e00b      	b.n	80044f4 <HAL_RCC_OscConfig+0x324>
 80044dc:	4b58      	ldr	r3, [pc, #352]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a57      	ldr	r2, [pc, #348]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	4b55      	ldr	r3, [pc, #340]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a54      	ldr	r2, [pc, #336]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80044ee:	f023 0304 	bic.w	r3, r3, #4
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d015      	beq.n	8004528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fe ff34 	bl	8003368 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	e00a      	b.n	800451a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fe ff30 	bl	8003368 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0cb      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	4b49      	ldr	r3, [pc, #292]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ee      	beq.n	8004504 <HAL_RCC_OscConfig+0x334>
 8004526:	e014      	b.n	8004552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004528:	f7fe ff1e 	bl	8003368 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fe ff1a 	bl	8003368 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0b5      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ee      	bne.n	8004530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b39      	ldr	r3, [pc, #228]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	4a38      	ldr	r2, [pc, #224]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 800455e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80a1 	beq.w	80046b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456e:	4b34      	ldr	r3, [pc, #208]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b08      	cmp	r3, #8
 8004578:	d05c      	beq.n	8004634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d141      	bne.n	8004606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_RCC_OscConfig+0x478>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fe feee 	bl	8003368 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe feea 	bl	8003368 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e087      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	4b27      	ldr	r3, [pc, #156]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	3b01      	subs	r3, #1
 80045c8:	041b      	lsls	r3, r3, #16
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	491b      	ldr	r1, [pc, #108]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x478>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045de:	f7fe fec3 	bl	8003368 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fe febf 	bl	8003368 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e05c      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x416>
 8004604:	e054      	b.n	80046b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_RCC_OscConfig+0x478>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fe feac 	bl	8003368 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004614:	f7fe fea8 	bl	8003368 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e045      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCC_OscConfig+0x470>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x444>
 8004632:	e03d      	b.n	80046b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d107      	bne.n	800464c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e038      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
 8004640:	40023800 	.word	0x40023800
 8004644:	40007000 	.word	0x40007000
 8004648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_RCC_OscConfig+0x4ec>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d028      	beq.n	80046ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d121      	bne.n	80046ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d11a      	bne.n	80046ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d107      	bne.n	80046ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0cc      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b68      	ldr	r3, [pc, #416]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d90c      	bls.n	80046fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0b8      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004714:	4b59      	ldr	r3, [pc, #356]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800471e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800472c:	4b53      	ldr	r3, [pc, #332]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a52      	ldr	r2, [pc, #328]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	494d      	ldr	r1, [pc, #308]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d044      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4b47      	ldr	r3, [pc, #284]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d119      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e07f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d003      	beq.n	800477e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477a:	2b03      	cmp	r3, #3
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e06f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e067      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4934      	ldr	r1, [pc, #208]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b0:	f7fe fdda 	bl	8003368 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b8:	f7fe fdd6 	bl	8003368 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e04f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	4b2b      	ldr	r3, [pc, #172]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 020c 	and.w	r2, r3, #12
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1eb      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d20c      	bcs.n	8004808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e032      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4916      	ldr	r1, [pc, #88]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	490e      	ldr	r1, [pc, #56]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004846:	f000 f821 	bl	800488c <HAL_RCC_GetSysClockFreq>
 800484a:	4602      	mov	r2, r0
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	490a      	ldr	r1, [pc, #40]	; (8004880 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	5ccb      	ldrb	r3, [r1, r3]
 800485a:	fa22 f303 	lsr.w	r3, r2, r3
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1c8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe fd3a 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023c00 	.word	0x40023c00
 800487c:	40023800 	.word	0x40023800
 8004880:	080275b4 	.word	0x080275b4
 8004884:	20000018 	.word	0x20000018
 8004888:	2000001c 	.word	0x2000001c

0800488c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800488c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004890:	b094      	sub	sp, #80	; 0x50
 8004892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	647b      	str	r3, [r7, #68]	; 0x44
 8004898:	2300      	movs	r3, #0
 800489a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800489c:	2300      	movs	r3, #0
 800489e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a4:	4b79      	ldr	r3, [pc, #484]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d00d      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x40>
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	f200 80e1 	bhi.w	8004a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d003      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048be:	e0db      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x204>)
 80048c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048c4:	e0db      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c6:	4b73      	ldr	r3, [pc, #460]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x208>)
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ca:	e0d8      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048cc:	4b6f      	ldr	r3, [pc, #444]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d6:	4b6d      	ldr	r3, [pc, #436]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d063      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e2:	4b6a      	ldr	r3, [pc, #424]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	099b      	lsrs	r3, r3, #6
 80048e8:	2200      	movs	r2, #0
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f4:	633b      	str	r3, [r7, #48]	; 0x30
 80048f6:	2300      	movs	r3, #0
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
 80048fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	0159      	lsls	r1, r3, #5
 800490c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004910:	0150      	lsls	r0, r2, #5
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4621      	mov	r1, r4
 8004918:	1a51      	subs	r1, r2, r1
 800491a:	6139      	str	r1, [r7, #16]
 800491c:	4629      	mov	r1, r5
 800491e:	eb63 0301 	sbc.w	r3, r3, r1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004930:	4659      	mov	r1, fp
 8004932:	018b      	lsls	r3, r1, #6
 8004934:	4651      	mov	r1, sl
 8004936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800493a:	4651      	mov	r1, sl
 800493c:	018a      	lsls	r2, r1, #6
 800493e:	4651      	mov	r1, sl
 8004940:	ebb2 0801 	subs.w	r8, r2, r1
 8004944:	4659      	mov	r1, fp
 8004946:	eb63 0901 	sbc.w	r9, r3, r1
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800495a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495e:	4690      	mov	r8, r2
 8004960:	4699      	mov	r9, r3
 8004962:	4623      	mov	r3, r4
 8004964:	eb18 0303 	adds.w	r3, r8, r3
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	462b      	mov	r3, r5
 800496c:	eb49 0303 	adc.w	r3, r9, r3
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800497e:	4629      	mov	r1, r5
 8004980:	024b      	lsls	r3, r1, #9
 8004982:	4621      	mov	r1, r4
 8004984:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004988:	4621      	mov	r1, r4
 800498a:	024a      	lsls	r2, r1, #9
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	2200      	movs	r2, #0
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
 8004996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800499c:	f7fb fc70 	bl	8000280 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4613      	mov	r3, r2
 80049a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a8:	e058      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	2200      	movs	r2, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	4611      	mov	r1, r2
 80049b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	2300      	movs	r3, #0
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
 80049c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	f04f 0000 	mov.w	r0, #0
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	0159      	lsls	r1, r3, #5
 80049d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d6:	0150      	lsls	r0, r2, #5
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4641      	mov	r1, r8
 80049de:	ebb2 0a01 	subs.w	sl, r2, r1
 80049e2:	4649      	mov	r1, r9
 80049e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004a00:	eb63 050b 	sbc.w	r5, r3, fp
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	00eb      	lsls	r3, r5, #3
 8004a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a12:	00e2      	lsls	r2, r4, #3
 8004a14:	4614      	mov	r4, r2
 8004a16:	461d      	mov	r5, r3
 8004a18:	4643      	mov	r3, r8
 8004a1a:	18e3      	adds	r3, r4, r3
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	464b      	mov	r3, r9
 8004a20:	eb45 0303 	adc.w	r3, r5, r3
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a32:	4629      	mov	r1, r5
 8004a34:	028b      	lsls	r3, r1, #10
 8004a36:	4621      	mov	r1, r4
 8004a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	028a      	lsls	r2, r1, #10
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a46:	2200      	movs	r2, #0
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	61fa      	str	r2, [r7, #28]
 8004a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a50:	f7fb fc16 	bl	8000280 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	3301      	adds	r3, #1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3750      	adds	r7, #80	; 0x50
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	00f42400 	.word	0x00f42400
 8004a94:	007a1200 	.word	0x007a1200

08004a98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d038      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ac0:	4b68      	ldr	r3, [pc, #416]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac6:	f7fe fc4f 	bl	8003368 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ace:	f7fe fc4b 	bl	8003368 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0bd      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ae0:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	495a      	ldr	r1, [pc, #360]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b06:	4b57      	ldr	r3, [pc, #348]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fe fc2c 	bl	8003368 <HAL_GetTick>
 8004b10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b14:	f7fe fc28 	bl	8003368 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e09a      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b26:	4b50      	ldr	r3, [pc, #320]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8083 	beq.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	4b48      	ldr	r3, [pc, #288]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	4a47      	ldr	r2, [pc, #284]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b50:	4b45      	ldr	r3, [pc, #276]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b5c:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a42      	ldr	r2, [pc, #264]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b68:	f7fe fbfe 	bl	8003368 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b70:	f7fe fbfa 	bl	8003368 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e06c      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b82:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b8e:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b96:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02f      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d028      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bac:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bb6:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bbc:	4b2c      	ldr	r3, [pc, #176]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bc2:	4a29      	ldr	r2, [pc, #164]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d114      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe fbc8 	bl	8003368 <HAL_GetTick>
 8004bd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fbc4 	bl	8003368 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e034      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ee      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c0a:	d10d      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c20:	4911      	ldr	r1, [pc, #68]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
 8004c26:	e005      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a0e      	ldr	r2, [pc, #56]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c32:	6093      	str	r3, [r2, #8]
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c40:	4909      	ldr	r1, [pc, #36]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	7d1a      	ldrb	r2, [r3, #20]
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c58:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	42470068 	.word	0x42470068
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	42470e40 	.word	0x42470e40
 8004c74:	424711e0 	.word	0x424711e0

08004c78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e066      	b.n	8004d5c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	7f5b      	ldrb	r3, [r3, #29]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fe f936 	bl	8002f10 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	22ca      	movs	r2, #202	; 0xca
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2253      	movs	r2, #83	; 0x53
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fbce 	bl	800545c <RTC_EnterInitMode>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d12c      	bne.n	8004d24 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cdc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68d2      	ldr	r2, [r2, #12]
 8004d04:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6919      	ldr	r1, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	041a      	lsls	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fbd5 	bl	80054ca <RTC_ExitInitMode>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d113      	bne.n	8004d52 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	7f1b      	ldrb	r3, [r3, #28]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_RTC_SetTime+0x1c>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e087      	b.n	8004e90 <HAL_RTC_SetTime+0x12c>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d126      	bne.n	8004de0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fbb2 	bl	8005514 <RTC_ByteToBcd2>
 8004db0:	4603      	mov	r3, r0
 8004db2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fbab 	bl	8005514 <RTC_ByteToBcd2>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004dc2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	789b      	ldrb	r3, [r3, #2]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fba3 	bl	8005514 <RTC_ByteToBcd2>
 8004dce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004dd0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e018      	b.n	8004e12 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e00:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004e06:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	78db      	ldrb	r3, [r3, #3]
 8004e0c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	22ca      	movs	r2, #202	; 0xca
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2253      	movs	r2, #83	; 0x53
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fb1a 	bl	800545c <RTC_EnterInitMode>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d120      	bne.n	8004e74 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e3c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6899      	ldr	r1, [r3, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fb2d 	bl	80054ca <RTC_ExitInitMode>
 8004e70:	4603      	mov	r3, r0
 8004e72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	771a      	strb	r2, [r3, #28]

  return status;
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd90      	pop	{r4, r7, pc}

08004e98 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004eca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ece:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	0d9b      	lsrs	r3, r3, #22
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11a      	bne.n	8004f4a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fb18 	bl	800554e <RTC_Bcd2ToByte>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fb0f 	bl	800554e <RTC_Bcd2ToByte>
 8004f30:	4603      	mov	r3, r0
 8004f32:	461a      	mov	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	789b      	ldrb	r3, [r3, #2]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fb06 	bl	800554e <RTC_Bcd2ToByte>
 8004f42:	4603      	mov	r3, r0
 8004f44:	461a      	mov	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	7f1b      	ldrb	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RTC_SetDate+0x1c>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e071      	b.n	8005054 <HAL_RTC_SetDate+0x100>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10e      	bne.n	8004fa0 <HAL_RTC_SetDate+0x4c>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	f023 0310 	bic.w	r3, r3, #16
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	330a      	adds	r3, #10
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11c      	bne.n	8004fe0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	78db      	ldrb	r3, [r3, #3]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fab2 	bl	8005514 <RTC_ByteToBcd2>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 faab 	bl	8005514 <RTC_ByteToBcd2>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fc2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	789b      	ldrb	r3, [r3, #2]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 faa3 	bl	8005514 <RTC_ByteToBcd2>
 8004fce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fd0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e00e      	b.n	8004ffe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ff2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	22ca      	movs	r2, #202	; 0xca
 8005004:	625a      	str	r2, [r3, #36]	; 0x24
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2253      	movs	r2, #83	; 0x53
 800500c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fa24 	bl	800545c <RTC_EnterInitMode>
 8005014:	4603      	mov	r3, r0
 8005016:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10c      	bne.n	8005038 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005028:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800502c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa4b 	bl	80054ca <RTC_ExitInitMode>
 8005034:	4603      	mov	r3, r0
 8005036:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	22ff      	movs	r2, #255	; 0xff
 800504a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	771a      	strb	r2, [r3, #28]

  return status;
 8005052:	7cfb      	ldrb	r3, [r7, #19]
}
 8005054:	4618      	mov	r0, r3
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	bd90      	pop	{r4, r7, pc}

0800505c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005076:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800507a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	0b5b      	lsrs	r3, r3, #13
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11a      	bne.n	80050f0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa45 	bl	800554e <RTC_Bcd2ToByte>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fa3c 	bl	800554e <RTC_Bcd2ToByte>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461a      	mov	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	789b      	ldrb	r3, [r3, #2]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fa33 	bl	800554e <RTC_Bcd2ToByte>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005108:	4b9a      	ldr	r3, [pc, #616]	; (8005374 <HAL_RTC_SetAlarm_IT+0x278>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a9a      	ldr	r2, [pc, #616]	; (8005378 <HAL_RTC_SetAlarm_IT+0x27c>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	0adb      	lsrs	r3, r3, #11
 8005114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	7f1b      	ldrb	r3, [r3, #28]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_RTC_SetAlarm_IT+0x36>
 800512e:	2302      	movs	r3, #2
 8005130:	e11c      	b.n	800536c <HAL_RTC_SetAlarm_IT+0x270>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2202      	movs	r2, #2
 800513c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d137      	bne.n	80051b4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2200      	movs	r2, #0
 8005156:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f9d9 	bl	8005514 <RTC_ByteToBcd2>
 8005162:	4603      	mov	r3, r0
 8005164:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f9d2 	bl	8005514 <RTC_ByteToBcd2>
 8005170:	4603      	mov	r3, r0
 8005172:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005174:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	789b      	ldrb	r3, [r3, #2]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f9ca 	bl	8005514 <RTC_ByteToBcd2>
 8005180:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005182:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	78db      	ldrb	r3, [r3, #3]
 800518a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800518c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f9bc 	bl	8005514 <RTC_ByteToBcd2>
 800519c:	4603      	mov	r3, r0
 800519e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80051a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80051a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e023      	b.n	80051fc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80051d4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80051da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	78db      	ldrb	r3, [r3, #3]
 80051e0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80051e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80051ec:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80051f2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	22ca      	movs	r2, #202	; 0xca
 800520e:	625a      	str	r2, [r3, #36]	; 0x24
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2253      	movs	r2, #83	; 0x53
 8005216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005220:	d141      	bne.n	80052a6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005230:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005242:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	617a      	str	r2, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2203      	movs	r2, #3
 800525a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e082      	b.n	800536c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0e7      	beq.n	8005244 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005292:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	e04b      	b.n	800533e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052b4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80052c6:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <HAL_RTC_SetAlarm_IT+0x278>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <HAL_RTC_SetAlarm_IT+0x27c>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0adb      	lsrs	r3, r3, #11
 80052d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	617a      	str	r2, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2203      	movs	r2, #3
 80052f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e035      	b.n	800536c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0e7      	beq.n	80052de <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800533c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <HAL_RTC_SetAlarm_IT+0x280>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_RTC_SetAlarm_IT+0x280>)
 8005344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005348:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RTC_SetAlarm_IT+0x280>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4a0b      	ldr	r2, [pc, #44]	; (800537c <HAL_RTC_SetAlarm_IT+0x280>)
 8005350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005354:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	22ff      	movs	r2, #255	; 0xff
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3724      	adds	r7, #36	; 0x24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	20000018 	.word	0x20000018
 8005378:	10624dd3 	.word	0x10624dd3
 800537c:	40013c00 	.word	0x40013c00

08005380 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d012      	beq.n	80053bc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00b      	beq.n	80053bc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fd f9a3 	bl	80026f0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80053ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8d4 	bl	8005586 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 80053ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RTC_AlarmIRQHandler+0x88>)
 80053f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053f6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	775a      	strb	r2, [r3, #29]
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40013c00 	.word	0x40013c00

0800540c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005426:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005428:	f7fd ff9e 	bl	8003368 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800542e:	e009      	b.n	8005444 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005430:	f7fd ff9a 	bl	8003368 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800543e:	d901      	bls.n	8005444 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e007      	b.n	8005454 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ee      	beq.n	8005430 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d122      	bne.n	80054c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005488:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800548a:	f7fd ff6d 	bl	8003368 <HAL_GetTick>
 800548e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005490:	e00c      	b.n	80054ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005492:	f7fd ff69 	bl	8003368 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a0:	d904      	bls.n	80054ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <RTC_EnterInitMode+0x64>
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d1e8      	bne.n	8005492 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ff89 	bl	800540c <HAL_RTC_WaitForSynchro>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2204      	movs	r2, #4
 8005504:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005522:	e005      	b.n	8005530 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	3301      	adds	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	3b0a      	subs	r3, #10
 800552e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	2b09      	cmp	r3, #9
 8005534:	d8f6      	bhi.n	8005524 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	b2da      	uxtb	r2, r3
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	4313      	orrs	r3, r2
 8005540:	b2db      	uxtb	r3, r3
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	4603      	mov	r3, r0
 8005556:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	0092      	lsls	r2, r2, #2
 8005566:	4413      	add	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	b2da      	uxtb	r2, r3
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	4413      	add	r3, r2
 8005578:	b2db      	uxtb	r3, r3
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e07b      	b.n	80056a4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055bc:	d009      	beq.n	80055d2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	61da      	str	r2, [r3, #28]
 80055c4:	e005      	b.n	80055d2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fd fcc3 	bl	8002f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	ea42 0103 	orr.w	r1, r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	f003 0104 	and.w	r1, r3, #4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	f003 0210 	and.w	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005692:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_SPI_Transmit+0x22>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e126      	b.n	800591c <HAL_SPI_Transmit+0x270>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d6:	f7fd fe47 	bl	8003368 <HAL_GetTick>
 80056da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d002      	beq.n	80056f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
 80056ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056f0:	e10b      	b.n	800590a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Transmit+0x52>
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005702:	e102      	b.n	800590a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2203      	movs	r2, #3
 8005708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	88fa      	ldrh	r2, [r7, #6]
 8005722:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	d10f      	bne.n	800576c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800576a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d007      	beq.n	800578a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005792:	d14b      	bne.n	800582c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_SPI_Transmit+0xf6>
 800579c:	8afb      	ldrh	r3, [r7, #22]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d13e      	bne.n	8005820 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	881a      	ldrh	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	1c9a      	adds	r2, r3, #2
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057c6:	e02b      	b.n	8005820 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d112      	bne.n	80057fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	1c9a      	adds	r2, r3, #2
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80057fa:	e011      	b.n	8005820 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057fc:	f7fd fdb4 	bl	8003368 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d803      	bhi.n	8005814 <HAL_SPI_Transmit+0x168>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d102      	bne.n	800581a <HAL_SPI_Transmit+0x16e>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800581e:	e074      	b.n	800590a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ce      	bne.n	80057c8 <HAL_SPI_Transmit+0x11c>
 800582a:	e04c      	b.n	80058c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_SPI_Transmit+0x18e>
 8005834:	8afb      	ldrh	r3, [r7, #22]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d140      	bne.n	80058bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	7812      	ldrb	r2, [r2, #0]
 8005846:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005860:	e02c      	b.n	80058bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b02      	cmp	r3, #2
 800586e:	d113      	bne.n	8005898 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	7812      	ldrb	r2, [r2, #0]
 800587c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	86da      	strh	r2, [r3, #54]	; 0x36
 8005896:	e011      	b.n	80058bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005898:	f7fd fd66 	bl	8003368 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d803      	bhi.n	80058b0 <HAL_SPI_Transmit+0x204>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d102      	bne.n	80058b6 <HAL_SPI_Transmit+0x20a>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058ba:	e026      	b.n	800590a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1cd      	bne.n	8005862 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f8b2 	bl	8005a34 <SPI_EndRxTxTransaction>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058e4:	2300      	movs	r3, #0
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e000      	b.n	800590a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005908:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800591a:	7ffb      	ldrb	r3, [r7, #31]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005934:	f7fd fd18 	bl	8003368 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	4413      	add	r3, r2
 8005942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005944:	f7fd fd10 	bl	8003368 <HAL_GetTick>
 8005948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800594a:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	015b      	lsls	r3, r3, #5
 8005950:	0d1b      	lsrs	r3, r3, #20
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595a:	e054      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d050      	beq.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005964:	f7fd fd00 	bl	8003368 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	429a      	cmp	r2, r3
 8005972:	d902      	bls.n	800597a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d13d      	bne.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005992:	d111      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599c:	d004      	beq.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a6:	d107      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c0:	d10f      	bne.n	80059e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e017      	b.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d19b      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000018 	.word	0x20000018

08005a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a40:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <SPI_EndRxTxTransaction+0x7c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <SPI_EndRxTxTransaction+0x80>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	0d5b      	lsrs	r3, r3, #21
 8005a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5e:	d112      	bne.n	8005a86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2200      	movs	r2, #0
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7ff ff5a 	bl	8005924 <SPI_WaitFlagStateUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d016      	beq.n	8005aa4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f043 0220 	orr.w	r2, r3, #32
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e00f      	b.n	8005aa6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d0f2      	beq.n	8005a86 <SPI_EndRxTxTransaction+0x52>
 8005aa0:	e000      	b.n	8005aa4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005aa2:	bf00      	nop
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000018 	.word	0x20000018
 8005ab4:	165e9f81 	.word	0x165e9f81

08005ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e041      	b.n	8005b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fd fa92 	bl	8003008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 fc78 	bl	80063ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d001      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e044      	b.n	8005bfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d018      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9a:	d013      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <HAL_TIM_Base_Start_IT+0xb4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00e      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <HAL_TIM_Base_Start_IT+0xb8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <HAL_TIM_Base_Start_IT+0xbc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d111      	bne.n	8005be8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b06      	cmp	r3, #6
 8005bd4:	d010      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	e007      	b.n	8005bf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40014000 	.word	0x40014000

08005c1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6a1a      	ldr	r2, [r3, #32]
 8005c3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10f      	bne.n	8005c64 <HAL_TIM_Base_Stop_IT+0x48>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	f240 4344 	movw	r3, #1092	; 0x444
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_Base_Stop_IT+0x48>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e041      	b.n	8005d10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fd f9d9 	bl	8003058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f000 fb97 	bl	80063ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_TIM_PWM_Start+0x24>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	bf14      	ite	ne
 8005d34:	2301      	movne	r3, #1
 8005d36:	2300      	moveq	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	e022      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d109      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x3e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	bf14      	ite	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	2300      	moveq	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	e015      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d109      	bne.n	8005d70 <HAL_TIM_PWM_Start+0x58>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	bf14      	ite	ne
 8005d68:	2301      	movne	r3, #1
 8005d6a:	2300      	moveq	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	e008      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e068      	b.n	8005e5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x82>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d98:	e013      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d104      	bne.n	8005daa <HAL_TIM_PWM_Start+0x92>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da8:	e00b      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db8:	e003      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fdb4 	bl	8006938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	; (8005e64 <HAL_TIM_PWM_Start+0x14c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <HAL_TIM_PWM_Start+0x14c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d018      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfc:	d013      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_TIM_PWM_Start+0x150>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00e      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <HAL_TIM_PWM_Start+0x154>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <HAL_TIM_PWM_Start+0x158>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <HAL_TIM_PWM_Start+0x15c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d111      	bne.n	8005e4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b06      	cmp	r3, #6
 8005e36:	d010      	beq.n	8005e5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	e007      	b.n	8005e5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40014000 	.word	0x40014000

08005e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d122      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0202 	mvn.w	r2, #2
 8005ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa77 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa69 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa7a 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d122      	bne.n	8005f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d11b      	bne.n	8005f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0204 	mvn.w	r2, #4
 8005ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa4d 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005f14:	e005      	b.n	8005f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa3f 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fa50 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d122      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d11b      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0208 	mvn.w	r2, #8
 8005f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2204      	movs	r2, #4
 8005f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa23 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005f68:	e005      	b.n	8005f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa15 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa26 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d122      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d11b      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0210 	mvn.w	r2, #16
 8005fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f9f9 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9eb 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f9fc 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d10e      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d107      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0201 	mvn.w	r2, #1
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc fb84 	bl	8002704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d10e      	bne.n	8006028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	d107      	bne.n	8006028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fd26 	bl	8006a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d10e      	bne.n	8006054 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d107      	bne.n	8006054 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f9c1 	bl	80063d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b20      	cmp	r3, #32
 8006060:	d10e      	bne.n	8006080 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b20      	cmp	r3, #32
 800606e:	d107      	bne.n	8006080 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0220 	mvn.w	r2, #32
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fcf0 	bl	8006a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0ae      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b0c      	cmp	r3, #12
 80060b2:	f200 809f 	bhi.w	80061f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	080061f5 	.word	0x080061f5
 80060c4:	080061f5 	.word	0x080061f5
 80060c8:	080061f5 	.word	0x080061f5
 80060cc:	08006131 	.word	0x08006131
 80060d0:	080061f5 	.word	0x080061f5
 80060d4:	080061f5 	.word	0x080061f5
 80060d8:	080061f5 	.word	0x080061f5
 80060dc:	08006173 	.word	0x08006173
 80060e0:	080061f5 	.word	0x080061f5
 80060e4:	080061f5 	.word	0x080061f5
 80060e8:	080061f5 	.word	0x080061f5
 80060ec:	080061b3 	.word	0x080061b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f9f8 	bl	80064ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	619a      	str	r2, [r3, #24]
      break;
 800612e:	e064      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fa3e 	bl	80065b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
      break;
 8006170:	e043      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fa89 	bl	8006690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0208 	orr.w	r2, r2, #8
 800618c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0204 	bic.w	r2, r2, #4
 800619c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	61da      	str	r2, [r3, #28]
      break;
 80061b0:	e023      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fad3 	bl	8006764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	021a      	lsls	r2, r3, #8
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	61da      	str	r2, [r3, #28]
      break;
 80061f2:	e002      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
      break;
 80061f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_TIM_ConfigClockSource+0x1c>
 8006224:	2302      	movs	r3, #2
 8006226:	e0b4      	b.n	8006392 <HAL_TIM_ConfigClockSource+0x186>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800624e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006260:	d03e      	beq.n	80062e0 <HAL_TIM_ConfigClockSource+0xd4>
 8006262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006266:	f200 8087 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626e:	f000 8086 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x172>
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006276:	d87f      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b70      	cmp	r3, #112	; 0x70
 800627a:	d01a      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0xa6>
 800627c:	2b70      	cmp	r3, #112	; 0x70
 800627e:	d87b      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b60      	cmp	r3, #96	; 0x60
 8006282:	d050      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x11a>
 8006284:	2b60      	cmp	r3, #96	; 0x60
 8006286:	d877      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b50      	cmp	r3, #80	; 0x50
 800628a:	d03c      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0xfa>
 800628c:	2b50      	cmp	r3, #80	; 0x50
 800628e:	d873      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d058      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x13a>
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d86f      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b30      	cmp	r3, #48	; 0x30
 800629a:	d064      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d86b      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d060      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d867      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d05c      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d05a      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 80062b0:	e062      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6899      	ldr	r1, [r3, #8]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f000 fb19 	bl	80068f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	609a      	str	r2, [r3, #8]
      break;
 80062de:	e04f      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6899      	ldr	r1, [r3, #8]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f000 fb02 	bl	80068f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006302:	609a      	str	r2, [r3, #8]
      break;
 8006304:	e03c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6859      	ldr	r1, [r3, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	461a      	mov	r2, r3
 8006314:	f000 fa76 	bl	8006804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2150      	movs	r1, #80	; 0x50
 800631e:	4618      	mov	r0, r3
 8006320:	f000 facf 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006324:	e02c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6859      	ldr	r1, [r3, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	461a      	mov	r2, r3
 8006334:	f000 fa95 	bl	8006862 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2160      	movs	r1, #96	; 0x60
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fabf 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006344:	e01c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	461a      	mov	r2, r3
 8006354:	f000 fa56 	bl	8006804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	4618      	mov	r0, r3
 8006360:	f000 faaf 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006364:	e00c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 faa6 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006376:	e003      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
      break;
 800637c:	e000      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800637e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <TIM_Base_SetConfig+0xe4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00f      	beq.n	8006424 <TIM_Base_SetConfig+0x38>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d00b      	beq.n	8006424 <TIM_Base_SetConfig+0x38>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a31      	ldr	r2, [pc, #196]	; (80064d4 <TIM_Base_SetConfig+0xe8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d007      	beq.n	8006424 <TIM_Base_SetConfig+0x38>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <TIM_Base_SetConfig+0xec>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d003      	beq.n	8006424 <TIM_Base_SetConfig+0x38>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a2f      	ldr	r2, [pc, #188]	; (80064dc <TIM_Base_SetConfig+0xf0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d108      	bne.n	8006436 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <TIM_Base_SetConfig+0xe4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01b      	beq.n	8006476 <TIM_Base_SetConfig+0x8a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006444:	d017      	beq.n	8006476 <TIM_Base_SetConfig+0x8a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <TIM_Base_SetConfig+0xe8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <TIM_Base_SetConfig+0x8a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <TIM_Base_SetConfig+0xec>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00f      	beq.n	8006476 <TIM_Base_SetConfig+0x8a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a20      	ldr	r2, [pc, #128]	; (80064dc <TIM_Base_SetConfig+0xf0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00b      	beq.n	8006476 <TIM_Base_SetConfig+0x8a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <TIM_Base_SetConfig+0xf4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d007      	beq.n	8006476 <TIM_Base_SetConfig+0x8a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <TIM_Base_SetConfig+0xf8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_Base_SetConfig+0x8a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <TIM_Base_SetConfig+0xfc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d108      	bne.n	8006488 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <TIM_Base_SetConfig+0xe4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d103      	bne.n	80064bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	615a      	str	r2, [r3, #20]
}
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40010000 	.word	0x40010000
 80064d4:	40000400 	.word	0x40000400
 80064d8:	40000800 	.word	0x40000800
 80064dc:	40000c00 	.word	0x40000c00
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800

080064ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0302 	bic.w	r3, r3, #2
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <TIM_OC1_SetConfig+0xc8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d10c      	bne.n	8006562 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0308 	bic.w	r3, r3, #8
 800654e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <TIM_OC1_SetConfig+0xc8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d111      	bne.n	800658e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40010000 	.word	0x40010000

080065b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0210 	bic.w	r2, r3, #16
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0320 	bic.w	r3, r3, #32
 8006602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a1e      	ldr	r2, [pc, #120]	; (800668c <TIM_OC2_SetConfig+0xd4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10d      	bne.n	8006634 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <TIM_OC2_SetConfig+0xd4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d113      	bne.n	8006664 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800664a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40010000 	.word	0x40010000

08006690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1d      	ldr	r2, [pc, #116]	; (8006760 <TIM_OC3_SetConfig+0xd0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10d      	bne.n	800670a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a14      	ldr	r2, [pc, #80]	; (8006760 <TIM_OC3_SetConfig+0xd0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d113      	bne.n	800673a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40010000 	.word	0x40010000

08006764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	031b      	lsls	r3, r3, #12
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a10      	ldr	r2, [pc, #64]	; (8006800 <TIM_OC4_SetConfig+0x9c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d109      	bne.n	80067d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	019b      	lsls	r3, r3, #6
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000

08006804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f023 0201 	bic.w	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f023 030a 	bic.w	r3, r3, #10
 8006840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006862:	b480      	push	{r7}
 8006864:	b087      	sub	sp, #28
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 0210 	bic.w	r2, r3, #16
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800688c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	031b      	lsls	r3, r3, #12
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800689e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	f043 0307 	orr.w	r3, r3, #7
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	609a      	str	r2, [r3, #8]
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	021a      	lsls	r2, r3, #8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	431a      	orrs	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4313      	orrs	r3, r2
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	609a      	str	r2, [r3, #8]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2201      	movs	r2, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006998:	2302      	movs	r3, #2
 800699a:	e050      	b.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e8:	d013      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d10c      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40000400 	.word	0x40000400
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000c00 	.word	0x40000c00
 8006a5c:	40014000 	.word	0x40014000

08006a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <__errno>:
 8006a88:	4b01      	ldr	r3, [pc, #4]	; (8006a90 <__errno+0x8>)
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	20000024 	.word	0x20000024

08006a94 <__libc_init_array>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4d0d      	ldr	r5, [pc, #52]	; (8006acc <__libc_init_array+0x38>)
 8006a98:	4c0d      	ldr	r4, [pc, #52]	; (8006ad0 <__libc_init_array+0x3c>)
 8006a9a:	1b64      	subs	r4, r4, r5
 8006a9c:	10a4      	asrs	r4, r4, #2
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	d109      	bne.n	8006ab8 <__libc_init_array+0x24>
 8006aa4:	4d0b      	ldr	r5, [pc, #44]	; (8006ad4 <__libc_init_array+0x40>)
 8006aa6:	4c0c      	ldr	r4, [pc, #48]	; (8006ad8 <__libc_init_array+0x44>)
 8006aa8:	f000 fca4 	bl	80073f4 <_init>
 8006aac:	1b64      	subs	r4, r4, r5
 8006aae:	10a4      	asrs	r4, r4, #2
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	d105      	bne.n	8006ac2 <__libc_init_array+0x2e>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abc:	4798      	blx	r3
 8006abe:	3601      	adds	r6, #1
 8006ac0:	e7ee      	b.n	8006aa0 <__libc_init_array+0xc>
 8006ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac6:	4798      	blx	r3
 8006ac8:	3601      	adds	r6, #1
 8006aca:	e7f2      	b.n	8006ab2 <__libc_init_array+0x1e>
 8006acc:	08027600 	.word	0x08027600
 8006ad0:	08027600 	.word	0x08027600
 8006ad4:	08027600 	.word	0x08027600
 8006ad8:	08027604 	.word	0x08027604

08006adc <malloc>:
 8006adc:	4b02      	ldr	r3, [pc, #8]	; (8006ae8 <malloc+0xc>)
 8006ade:	4601      	mov	r1, r0
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	f000 b87f 	b.w	8006be4 <_malloc_r>
 8006ae6:	bf00      	nop
 8006ae8:	20000024 	.word	0x20000024

08006aec <free>:
 8006aec:	4b02      	ldr	r3, [pc, #8]	; (8006af8 <free+0xc>)
 8006aee:	4601      	mov	r1, r0
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	f000 b80b 	b.w	8006b0c <_free_r>
 8006af6:	bf00      	nop
 8006af8:	20000024 	.word	0x20000024

08006afc <memset>:
 8006afc:	4402      	add	r2, r0
 8006afe:	4603      	mov	r3, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <_free_r>:
 8006b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	d044      	beq.n	8006b9c <_free_r+0x90>
 8006b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b16:	9001      	str	r0, [sp, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b1e:	bfb8      	it	lt
 8006b20:	18e4      	addlt	r4, r4, r3
 8006b22:	f000 f90b 	bl	8006d3c <__malloc_lock>
 8006b26:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <_free_r+0x94>)
 8006b28:	9801      	ldr	r0, [sp, #4]
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	b933      	cbnz	r3, 8006b3c <_free_r+0x30>
 8006b2e:	6063      	str	r3, [r4, #4]
 8006b30:	6014      	str	r4, [r2, #0]
 8006b32:	b003      	add	sp, #12
 8006b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b38:	f000 b906 	b.w	8006d48 <__malloc_unlock>
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d908      	bls.n	8006b52 <_free_r+0x46>
 8006b40:	6825      	ldr	r5, [r4, #0]
 8006b42:	1961      	adds	r1, r4, r5
 8006b44:	428b      	cmp	r3, r1
 8006b46:	bf01      	itttt	eq
 8006b48:	6819      	ldreq	r1, [r3, #0]
 8006b4a:	685b      	ldreq	r3, [r3, #4]
 8006b4c:	1949      	addeq	r1, r1, r5
 8006b4e:	6021      	streq	r1, [r4, #0]
 8006b50:	e7ed      	b.n	8006b2e <_free_r+0x22>
 8006b52:	461a      	mov	r2, r3
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	b10b      	cbz	r3, 8006b5c <_free_r+0x50>
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	d9fa      	bls.n	8006b52 <_free_r+0x46>
 8006b5c:	6811      	ldr	r1, [r2, #0]
 8006b5e:	1855      	adds	r5, r2, r1
 8006b60:	42a5      	cmp	r5, r4
 8006b62:	d10b      	bne.n	8006b7c <_free_r+0x70>
 8006b64:	6824      	ldr	r4, [r4, #0]
 8006b66:	4421      	add	r1, r4
 8006b68:	1854      	adds	r4, r2, r1
 8006b6a:	42a3      	cmp	r3, r4
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	d1e0      	bne.n	8006b32 <_free_r+0x26>
 8006b70:	681c      	ldr	r4, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	6053      	str	r3, [r2, #4]
 8006b76:	4421      	add	r1, r4
 8006b78:	6011      	str	r1, [r2, #0]
 8006b7a:	e7da      	b.n	8006b32 <_free_r+0x26>
 8006b7c:	d902      	bls.n	8006b84 <_free_r+0x78>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	6003      	str	r3, [r0, #0]
 8006b82:	e7d6      	b.n	8006b32 <_free_r+0x26>
 8006b84:	6825      	ldr	r5, [r4, #0]
 8006b86:	1961      	adds	r1, r4, r5
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf04      	itt	eq
 8006b8c:	6819      	ldreq	r1, [r3, #0]
 8006b8e:	685b      	ldreq	r3, [r3, #4]
 8006b90:	6063      	str	r3, [r4, #4]
 8006b92:	bf04      	itt	eq
 8006b94:	1949      	addeq	r1, r1, r5
 8006b96:	6021      	streq	r1, [r4, #0]
 8006b98:	6054      	str	r4, [r2, #4]
 8006b9a:	e7ca      	b.n	8006b32 <_free_r+0x26>
 8006b9c:	b003      	add	sp, #12
 8006b9e:	bd30      	pop	{r4, r5, pc}
 8006ba0:	20000240 	.word	0x20000240

08006ba4 <sbrk_aligned>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	4e0e      	ldr	r6, [pc, #56]	; (8006be0 <sbrk_aligned+0x3c>)
 8006ba8:	460c      	mov	r4, r1
 8006baa:	6831      	ldr	r1, [r6, #0]
 8006bac:	4605      	mov	r5, r0
 8006bae:	b911      	cbnz	r1, 8006bb6 <sbrk_aligned+0x12>
 8006bb0:	f000 f894 	bl	8006cdc <_sbrk_r>
 8006bb4:	6030      	str	r0, [r6, #0]
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 f88f 	bl	8006cdc <_sbrk_r>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	d00a      	beq.n	8006bd8 <sbrk_aligned+0x34>
 8006bc2:	1cc4      	adds	r4, r0, #3
 8006bc4:	f024 0403 	bic.w	r4, r4, #3
 8006bc8:	42a0      	cmp	r0, r4
 8006bca:	d007      	beq.n	8006bdc <sbrk_aligned+0x38>
 8006bcc:	1a21      	subs	r1, r4, r0
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f884 	bl	8006cdc <_sbrk_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d101      	bne.n	8006bdc <sbrk_aligned+0x38>
 8006bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bdc:	4620      	mov	r0, r4
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	20000244 	.word	0x20000244

08006be4 <_malloc_r>:
 8006be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	1ccd      	adds	r5, r1, #3
 8006bea:	f025 0503 	bic.w	r5, r5, #3
 8006bee:	3508      	adds	r5, #8
 8006bf0:	2d0c      	cmp	r5, #12
 8006bf2:	bf38      	it	cc
 8006bf4:	250c      	movcc	r5, #12
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	db01      	blt.n	8006c00 <_malloc_r+0x1c>
 8006bfc:	42a9      	cmp	r1, r5
 8006bfe:	d905      	bls.n	8006c0c <_malloc_r+0x28>
 8006c00:	230c      	movs	r3, #12
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	2600      	movs	r6, #0
 8006c06:	4630      	mov	r0, r6
 8006c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c0c:	4e2e      	ldr	r6, [pc, #184]	; (8006cc8 <_malloc_r+0xe4>)
 8006c0e:	f000 f895 	bl	8006d3c <__malloc_lock>
 8006c12:	6833      	ldr	r3, [r6, #0]
 8006c14:	461c      	mov	r4, r3
 8006c16:	bb34      	cbnz	r4, 8006c66 <_malloc_r+0x82>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	f7ff ffc2 	bl	8006ba4 <sbrk_aligned>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	4604      	mov	r4, r0
 8006c24:	d14d      	bne.n	8006cc2 <_malloc_r+0xde>
 8006c26:	6834      	ldr	r4, [r6, #0]
 8006c28:	4626      	mov	r6, r4
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	d140      	bne.n	8006cb0 <_malloc_r+0xcc>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	4631      	mov	r1, r6
 8006c32:	4638      	mov	r0, r7
 8006c34:	eb04 0803 	add.w	r8, r4, r3
 8006c38:	f000 f850 	bl	8006cdc <_sbrk_r>
 8006c3c:	4580      	cmp	r8, r0
 8006c3e:	d13a      	bne.n	8006cb6 <_malloc_r+0xd2>
 8006c40:	6821      	ldr	r1, [r4, #0]
 8006c42:	3503      	adds	r5, #3
 8006c44:	1a6d      	subs	r5, r5, r1
 8006c46:	f025 0503 	bic.w	r5, r5, #3
 8006c4a:	3508      	adds	r5, #8
 8006c4c:	2d0c      	cmp	r5, #12
 8006c4e:	bf38      	it	cc
 8006c50:	250c      	movcc	r5, #12
 8006c52:	4629      	mov	r1, r5
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff ffa5 	bl	8006ba4 <sbrk_aligned>
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d02b      	beq.n	8006cb6 <_malloc_r+0xd2>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	442b      	add	r3, r5
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	e00e      	b.n	8006c84 <_malloc_r+0xa0>
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	1b52      	subs	r2, r2, r5
 8006c6a:	d41e      	bmi.n	8006caa <_malloc_r+0xc6>
 8006c6c:	2a0b      	cmp	r2, #11
 8006c6e:	d916      	bls.n	8006c9e <_malloc_r+0xba>
 8006c70:	1961      	adds	r1, r4, r5
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	6025      	str	r5, [r4, #0]
 8006c76:	bf18      	it	ne
 8006c78:	6059      	strne	r1, [r3, #4]
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	bf08      	it	eq
 8006c7e:	6031      	streq	r1, [r6, #0]
 8006c80:	5162      	str	r2, [r4, r5]
 8006c82:	604b      	str	r3, [r1, #4]
 8006c84:	4638      	mov	r0, r7
 8006c86:	f104 060b 	add.w	r6, r4, #11
 8006c8a:	f000 f85d 	bl	8006d48 <__malloc_unlock>
 8006c8e:	f026 0607 	bic.w	r6, r6, #7
 8006c92:	1d23      	adds	r3, r4, #4
 8006c94:	1af2      	subs	r2, r6, r3
 8006c96:	d0b6      	beq.n	8006c06 <_malloc_r+0x22>
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	50a3      	str	r3, [r4, r2]
 8006c9c:	e7b3      	b.n	8006c06 <_malloc_r+0x22>
 8006c9e:	6862      	ldr	r2, [r4, #4]
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	bf0c      	ite	eq
 8006ca4:	6032      	streq	r2, [r6, #0]
 8006ca6:	605a      	strne	r2, [r3, #4]
 8006ca8:	e7ec      	b.n	8006c84 <_malloc_r+0xa0>
 8006caa:	4623      	mov	r3, r4
 8006cac:	6864      	ldr	r4, [r4, #4]
 8006cae:	e7b2      	b.n	8006c16 <_malloc_r+0x32>
 8006cb0:	4634      	mov	r4, r6
 8006cb2:	6876      	ldr	r6, [r6, #4]
 8006cb4:	e7b9      	b.n	8006c2a <_malloc_r+0x46>
 8006cb6:	230c      	movs	r3, #12
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f000 f844 	bl	8006d48 <__malloc_unlock>
 8006cc0:	e7a1      	b.n	8006c06 <_malloc_r+0x22>
 8006cc2:	6025      	str	r5, [r4, #0]
 8006cc4:	e7de      	b.n	8006c84 <_malloc_r+0xa0>
 8006cc6:	bf00      	nop
 8006cc8:	20000240 	.word	0x20000240

08006ccc <realloc>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <realloc+0xc>)
 8006cce:	460a      	mov	r2, r1
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	f000 b83e 	b.w	8006d54 <_realloc_r>
 8006cd8:	20000024 	.word	0x20000024

08006cdc <_sbrk_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d06      	ldr	r5, [pc, #24]	; (8006cf8 <_sbrk_r+0x1c>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	f7fc fa66 	bl	80031b8 <_sbrk>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_sbrk_r+0x1a>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_sbrk_r+0x1a>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20000248 	.word	0x20000248

08006cfc <siprintf>:
 8006cfc:	b40e      	push	{r1, r2, r3}
 8006cfe:	b500      	push	{lr}
 8006d00:	b09c      	sub	sp, #112	; 0x70
 8006d02:	ab1d      	add	r3, sp, #116	; 0x74
 8006d04:	9002      	str	r0, [sp, #8]
 8006d06:	9006      	str	r0, [sp, #24]
 8006d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d0c:	4809      	ldr	r0, [pc, #36]	; (8006d34 <siprintf+0x38>)
 8006d0e:	9107      	str	r1, [sp, #28]
 8006d10:	9104      	str	r1, [sp, #16]
 8006d12:	4909      	ldr	r1, [pc, #36]	; (8006d38 <siprintf+0x3c>)
 8006d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d18:	9105      	str	r1, [sp, #20]
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	a902      	add	r1, sp, #8
 8006d20:	f000 f8a2 	bl	8006e68 <_svfiprintf_r>
 8006d24:	9b02      	ldr	r3, [sp, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	b01c      	add	sp, #112	; 0x70
 8006d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d30:	b003      	add	sp, #12
 8006d32:	4770      	bx	lr
 8006d34:	20000024 	.word	0x20000024
 8006d38:	ffff0208 	.word	0xffff0208

08006d3c <__malloc_lock>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__malloc_lock+0x8>)
 8006d3e:	f000 bb27 	b.w	8007390 <__retarget_lock_acquire_recursive>
 8006d42:	bf00      	nop
 8006d44:	2000024c 	.word	0x2000024c

08006d48 <__malloc_unlock>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__malloc_unlock+0x8>)
 8006d4a:	f000 bb22 	b.w	8007392 <__retarget_lock_release_recursive>
 8006d4e:	bf00      	nop
 8006d50:	2000024c 	.word	0x2000024c

08006d54 <_realloc_r>:
 8006d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d58:	4680      	mov	r8, r0
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	b921      	cbnz	r1, 8006d6a <_realloc_r+0x16>
 8006d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d64:	4611      	mov	r1, r2
 8006d66:	f7ff bf3d 	b.w	8006be4 <_malloc_r>
 8006d6a:	b92a      	cbnz	r2, 8006d78 <_realloc_r+0x24>
 8006d6c:	f7ff fece 	bl	8006b0c <_free_r>
 8006d70:	4625      	mov	r5, r4
 8006d72:	4628      	mov	r0, r5
 8006d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d78:	f000 fb34 	bl	80073e4 <_malloc_usable_size_r>
 8006d7c:	4284      	cmp	r4, r0
 8006d7e:	4607      	mov	r7, r0
 8006d80:	d802      	bhi.n	8006d88 <_realloc_r+0x34>
 8006d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d86:	d812      	bhi.n	8006dae <_realloc_r+0x5a>
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f7ff ff2a 	bl	8006be4 <_malloc_r>
 8006d90:	4605      	mov	r5, r0
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d0ed      	beq.n	8006d72 <_realloc_r+0x1e>
 8006d96:	42bc      	cmp	r4, r7
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	bf28      	it	cs
 8006d9e:	463a      	movcs	r2, r7
 8006da0:	f000 faf8 	bl	8007394 <memcpy>
 8006da4:	4631      	mov	r1, r6
 8006da6:	4640      	mov	r0, r8
 8006da8:	f7ff feb0 	bl	8006b0c <_free_r>
 8006dac:	e7e1      	b.n	8006d72 <_realloc_r+0x1e>
 8006dae:	4635      	mov	r5, r6
 8006db0:	e7df      	b.n	8006d72 <_realloc_r+0x1e>

08006db2 <__ssputs_r>:
 8006db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db6:	688e      	ldr	r6, [r1, #8]
 8006db8:	429e      	cmp	r6, r3
 8006dba:	4682      	mov	sl, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	4690      	mov	r8, r2
 8006dc0:	461f      	mov	r7, r3
 8006dc2:	d838      	bhi.n	8006e36 <__ssputs_r+0x84>
 8006dc4:	898a      	ldrh	r2, [r1, #12]
 8006dc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dca:	d032      	beq.n	8006e32 <__ssputs_r+0x80>
 8006dcc:	6825      	ldr	r5, [r4, #0]
 8006dce:	6909      	ldr	r1, [r1, #16]
 8006dd0:	eba5 0901 	sub.w	r9, r5, r1
 8006dd4:	6965      	ldr	r5, [r4, #20]
 8006dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dde:	3301      	adds	r3, #1
 8006de0:	444b      	add	r3, r9
 8006de2:	106d      	asrs	r5, r5, #1
 8006de4:	429d      	cmp	r5, r3
 8006de6:	bf38      	it	cc
 8006de8:	461d      	movcc	r5, r3
 8006dea:	0553      	lsls	r3, r2, #21
 8006dec:	d531      	bpl.n	8006e52 <__ssputs_r+0xa0>
 8006dee:	4629      	mov	r1, r5
 8006df0:	f7ff fef8 	bl	8006be4 <_malloc_r>
 8006df4:	4606      	mov	r6, r0
 8006df6:	b950      	cbnz	r0, 8006e0e <__ssputs_r+0x5c>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	f8ca 3000 	str.w	r3, [sl]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0e:	6921      	ldr	r1, [r4, #16]
 8006e10:	464a      	mov	r2, r9
 8006e12:	f000 fabf 	bl	8007394 <memcpy>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	6126      	str	r6, [r4, #16]
 8006e24:	6165      	str	r5, [r4, #20]
 8006e26:	444e      	add	r6, r9
 8006e28:	eba5 0509 	sub.w	r5, r5, r9
 8006e2c:	6026      	str	r6, [r4, #0]
 8006e2e:	60a5      	str	r5, [r4, #8]
 8006e30:	463e      	mov	r6, r7
 8006e32:	42be      	cmp	r6, r7
 8006e34:	d900      	bls.n	8006e38 <__ssputs_r+0x86>
 8006e36:	463e      	mov	r6, r7
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	f000 fab7 	bl	80073b0 <memmove>
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	1b9b      	subs	r3, r3, r6
 8006e46:	60a3      	str	r3, [r4, #8]
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	4433      	add	r3, r6
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e7db      	b.n	8006e0a <__ssputs_r+0x58>
 8006e52:	462a      	mov	r2, r5
 8006e54:	f7ff ff7e 	bl	8006d54 <_realloc_r>
 8006e58:	4606      	mov	r6, r0
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d1e1      	bne.n	8006e22 <__ssputs_r+0x70>
 8006e5e:	6921      	ldr	r1, [r4, #16]
 8006e60:	4650      	mov	r0, sl
 8006e62:	f7ff fe53 	bl	8006b0c <_free_r>
 8006e66:	e7c7      	b.n	8006df8 <__ssputs_r+0x46>

08006e68 <_svfiprintf_r>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	4698      	mov	r8, r3
 8006e6e:	898b      	ldrh	r3, [r1, #12]
 8006e70:	061b      	lsls	r3, r3, #24
 8006e72:	b09d      	sub	sp, #116	; 0x74
 8006e74:	4607      	mov	r7, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	4614      	mov	r4, r2
 8006e7a:	d50e      	bpl.n	8006e9a <_svfiprintf_r+0x32>
 8006e7c:	690b      	ldr	r3, [r1, #16]
 8006e7e:	b963      	cbnz	r3, 8006e9a <_svfiprintf_r+0x32>
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	f7ff feaf 	bl	8006be4 <_malloc_r>
 8006e86:	6028      	str	r0, [r5, #0]
 8006e88:	6128      	str	r0, [r5, #16]
 8006e8a:	b920      	cbnz	r0, 8006e96 <_svfiprintf_r+0x2e>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e0d1      	b.n	800703a <_svfiprintf_r+0x1d2>
 8006e96:	2340      	movs	r3, #64	; 0x40
 8006e98:	616b      	str	r3, [r5, #20]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ea8:	2330      	movs	r3, #48	; 0x30
 8006eaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007054 <_svfiprintf_r+0x1ec>
 8006eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eb2:	f04f 0901 	mov.w	r9, #1
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	469a      	mov	sl, r3
 8006eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ebe:	b10a      	cbz	r2, 8006ec4 <_svfiprintf_r+0x5c>
 8006ec0:	2a25      	cmp	r2, #37	; 0x25
 8006ec2:	d1f9      	bne.n	8006eb8 <_svfiprintf_r+0x50>
 8006ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ec8:	d00b      	beq.n	8006ee2 <_svfiprintf_r+0x7a>
 8006eca:	465b      	mov	r3, fp
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7ff ff6e 	bl	8006db2 <__ssputs_r>
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f000 80aa 	beq.w	8007030 <_svfiprintf_r+0x1c8>
 8006edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ede:	445a      	add	r2, fp
 8006ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80a2 	beq.w	8007030 <_svfiprintf_r+0x1c8>
 8006eec:	2300      	movs	r3, #0
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef6:	f10a 0a01 	add.w	sl, sl, #1
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f02:	931a      	str	r3, [sp, #104]	; 0x68
 8006f04:	4654      	mov	r4, sl
 8006f06:	2205      	movs	r2, #5
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	4851      	ldr	r0, [pc, #324]	; (8007054 <_svfiprintf_r+0x1ec>)
 8006f0e:	f7f9 f967 	bl	80001e0 <memchr>
 8006f12:	9a04      	ldr	r2, [sp, #16]
 8006f14:	b9d8      	cbnz	r0, 8006f4e <_svfiprintf_r+0xe6>
 8006f16:	06d0      	lsls	r0, r2, #27
 8006f18:	bf44      	itt	mi
 8006f1a:	2320      	movmi	r3, #32
 8006f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f20:	0711      	lsls	r1, r2, #28
 8006f22:	bf44      	itt	mi
 8006f24:	232b      	movmi	r3, #43	; 0x2b
 8006f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f30:	d015      	beq.n	8006f5e <_svfiprintf_r+0xf6>
 8006f32:	9a07      	ldr	r2, [sp, #28]
 8006f34:	4654      	mov	r4, sl
 8006f36:	2000      	movs	r0, #0
 8006f38:	f04f 0c0a 	mov.w	ip, #10
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f42:	3b30      	subs	r3, #48	; 0x30
 8006f44:	2b09      	cmp	r3, #9
 8006f46:	d94e      	bls.n	8006fe6 <_svfiprintf_r+0x17e>
 8006f48:	b1b0      	cbz	r0, 8006f78 <_svfiprintf_r+0x110>
 8006f4a:	9207      	str	r2, [sp, #28]
 8006f4c:	e014      	b.n	8006f78 <_svfiprintf_r+0x110>
 8006f4e:	eba0 0308 	sub.w	r3, r0, r8
 8006f52:	fa09 f303 	lsl.w	r3, r9, r3
 8006f56:	4313      	orrs	r3, r2
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	46a2      	mov	sl, r4
 8006f5c:	e7d2      	b.n	8006f04 <_svfiprintf_r+0x9c>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	1d19      	adds	r1, r3, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	9103      	str	r1, [sp, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bfbb      	ittet	lt
 8006f6a:	425b      	neglt	r3, r3
 8006f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f70:	9307      	strge	r3, [sp, #28]
 8006f72:	9307      	strlt	r3, [sp, #28]
 8006f74:	bfb8      	it	lt
 8006f76:	9204      	strlt	r2, [sp, #16]
 8006f78:	7823      	ldrb	r3, [r4, #0]
 8006f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f7c:	d10c      	bne.n	8006f98 <_svfiprintf_r+0x130>
 8006f7e:	7863      	ldrb	r3, [r4, #1]
 8006f80:	2b2a      	cmp	r3, #42	; 0x2a
 8006f82:	d135      	bne.n	8006ff0 <_svfiprintf_r+0x188>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	1d1a      	adds	r2, r3, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	9203      	str	r2, [sp, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bfb8      	it	lt
 8006f90:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f94:	3402      	adds	r4, #2
 8006f96:	9305      	str	r3, [sp, #20]
 8006f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007064 <_svfiprintf_r+0x1fc>
 8006f9c:	7821      	ldrb	r1, [r4, #0]
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	f7f9 f91d 	bl	80001e0 <memchr>
 8006fa6:	b140      	cbz	r0, 8006fba <_svfiprintf_r+0x152>
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	eba0 000a 	sub.w	r0, r0, sl
 8006fae:	fa03 f000 	lsl.w	r0, r3, r0
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	4303      	orrs	r3, r0
 8006fb6:	3401      	adds	r4, #1
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbe:	4826      	ldr	r0, [pc, #152]	; (8007058 <_svfiprintf_r+0x1f0>)
 8006fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fc4:	2206      	movs	r2, #6
 8006fc6:	f7f9 f90b 	bl	80001e0 <memchr>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d038      	beq.n	8007040 <_svfiprintf_r+0x1d8>
 8006fce:	4b23      	ldr	r3, [pc, #140]	; (800705c <_svfiprintf_r+0x1f4>)
 8006fd0:	bb1b      	cbnz	r3, 800701a <_svfiprintf_r+0x1b2>
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	3307      	adds	r3, #7
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	3308      	adds	r3, #8
 8006fdc:	9303      	str	r3, [sp, #12]
 8006fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe0:	4433      	add	r3, r6
 8006fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe4:	e767      	b.n	8006eb6 <_svfiprintf_r+0x4e>
 8006fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fea:	460c      	mov	r4, r1
 8006fec:	2001      	movs	r0, #1
 8006fee:	e7a5      	b.n	8006f3c <_svfiprintf_r+0xd4>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	9305      	str	r3, [sp, #20]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f04f 0c0a 	mov.w	ip, #10
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007002:	3a30      	subs	r2, #48	; 0x30
 8007004:	2a09      	cmp	r2, #9
 8007006:	d903      	bls.n	8007010 <_svfiprintf_r+0x1a8>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0c5      	beq.n	8006f98 <_svfiprintf_r+0x130>
 800700c:	9105      	str	r1, [sp, #20]
 800700e:	e7c3      	b.n	8006f98 <_svfiprintf_r+0x130>
 8007010:	fb0c 2101 	mla	r1, ip, r1, r2
 8007014:	4604      	mov	r4, r0
 8007016:	2301      	movs	r3, #1
 8007018:	e7f0      	b.n	8006ffc <_svfiprintf_r+0x194>
 800701a:	ab03      	add	r3, sp, #12
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	462a      	mov	r2, r5
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <_svfiprintf_r+0x1f8>)
 8007022:	a904      	add	r1, sp, #16
 8007024:	4638      	mov	r0, r7
 8007026:	f3af 8000 	nop.w
 800702a:	1c42      	adds	r2, r0, #1
 800702c:	4606      	mov	r6, r0
 800702e:	d1d6      	bne.n	8006fde <_svfiprintf_r+0x176>
 8007030:	89ab      	ldrh	r3, [r5, #12]
 8007032:	065b      	lsls	r3, r3, #25
 8007034:	f53f af2c 	bmi.w	8006e90 <_svfiprintf_r+0x28>
 8007038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800703a:	b01d      	add	sp, #116	; 0x74
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	ab03      	add	r3, sp, #12
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	462a      	mov	r2, r5
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <_svfiprintf_r+0x1f8>)
 8007048:	a904      	add	r1, sp, #16
 800704a:	4638      	mov	r0, r7
 800704c:	f000 f87a 	bl	8007144 <_printf_i>
 8007050:	e7eb      	b.n	800702a <_svfiprintf_r+0x1c2>
 8007052:	bf00      	nop
 8007054:	080275c4 	.word	0x080275c4
 8007058:	080275ce 	.word	0x080275ce
 800705c:	00000000 	.word	0x00000000
 8007060:	08006db3 	.word	0x08006db3
 8007064:	080275ca 	.word	0x080275ca

08007068 <_printf_common>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	4616      	mov	r6, r2
 800706e:	4699      	mov	r9, r3
 8007070:	688a      	ldr	r2, [r1, #8]
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007078:	4293      	cmp	r3, r2
 800707a:	bfb8      	it	lt
 800707c:	4613      	movlt	r3, r2
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007084:	4607      	mov	r7, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b10a      	cbz	r2, 800708e <_printf_common+0x26>
 800708a:	3301      	adds	r3, #1
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	0699      	lsls	r1, r3, #26
 8007092:	bf42      	ittt	mi
 8007094:	6833      	ldrmi	r3, [r6, #0]
 8007096:	3302      	addmi	r3, #2
 8007098:	6033      	strmi	r3, [r6, #0]
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	f015 0506 	ands.w	r5, r5, #6
 80070a0:	d106      	bne.n	80070b0 <_printf_common+0x48>
 80070a2:	f104 0a19 	add.w	sl, r4, #25
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	6832      	ldr	r2, [r6, #0]
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dc26      	bgt.n	80070fe <_printf_common+0x96>
 80070b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b4:	1e13      	subs	r3, r2, #0
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	0692      	lsls	r2, r2, #26
 80070be:	d42b      	bmi.n	8007118 <_printf_common+0xb0>
 80070c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c4:	4649      	mov	r1, r9
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d01e      	beq.n	800710c <_printf_common+0xa4>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	68e5      	ldr	r5, [r4, #12]
 80070d2:	6832      	ldr	r2, [r6, #0]
 80070d4:	f003 0306 	and.w	r3, r3, #6
 80070d8:	2b04      	cmp	r3, #4
 80070da:	bf08      	it	eq
 80070dc:	1aad      	subeq	r5, r5, r2
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	bf0c      	ite	eq
 80070e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e8:	2500      	movne	r5, #0
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bfc4      	itt	gt
 80070ee:	1a9b      	subgt	r3, r3, r2
 80070f0:	18ed      	addgt	r5, r5, r3
 80070f2:	2600      	movs	r6, #0
 80070f4:	341a      	adds	r4, #26
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xc8>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xa8>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4649      	mov	r1, r9
 8007104:	4638      	mov	r0, r7
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xac>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c6      	b.n	80070a6 <_printf_common+0x3e>
 8007118:	18e1      	adds	r1, r4, r3
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	2030      	movs	r0, #48	; 0x30
 800711e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007122:	4422      	add	r2, r4
 8007124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712c:	3302      	adds	r3, #2
 800712e:	e7c7      	b.n	80070c0 <_printf_common+0x58>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4649      	mov	r1, r9
 8007136:	4638      	mov	r0, r7
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xa4>
 800713e:	3601      	adds	r6, #1
 8007140:	e7d9      	b.n	80070f6 <_printf_common+0x8e>
	...

08007144 <_printf_i>:
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	7e0f      	ldrb	r7, [r1, #24]
 800714a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800714c:	2f78      	cmp	r7, #120	; 0x78
 800714e:	4691      	mov	r9, r2
 8007150:	4680      	mov	r8, r0
 8007152:	460c      	mov	r4, r1
 8007154:	469a      	mov	sl, r3
 8007156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800715a:	d807      	bhi.n	800716c <_printf_i+0x28>
 800715c:	2f62      	cmp	r7, #98	; 0x62
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x32>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f000 80d8 	beq.w	8007316 <_printf_i+0x1d2>
 8007166:	2f58      	cmp	r7, #88	; 0x58
 8007168:	f000 80a3 	beq.w	80072b2 <_printf_i+0x16e>
 800716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007174:	e03a      	b.n	80071ec <_printf_i+0xa8>
 8007176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717a:	2b15      	cmp	r3, #21
 800717c:	d8f6      	bhi.n	800716c <_printf_i+0x28>
 800717e:	a101      	add	r1, pc, #4	; (adr r1, 8007184 <_printf_i+0x40>)
 8007180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071f1 	.word	0x080071f1
 800718c:	0800716d 	.word	0x0800716d
 8007190:	0800716d 	.word	0x0800716d
 8007194:	0800716d 	.word	0x0800716d
 8007198:	0800716d 	.word	0x0800716d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800716d 	.word	0x0800716d
 80071a4:	0800716d 	.word	0x0800716d
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	080072fd 	.word	0x080072fd
 80071b4:	08007221 	.word	0x08007221
 80071b8:	080072df 	.word	0x080072df
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	0800731f 	.word	0x0800731f
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	08007221 	.word	0x08007221
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072e7 	.word	0x080072e7
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0a3      	b.n	8007338 <_printf_i+0x1f4>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	6829      	ldr	r1, [r5, #0]
 80071f4:	0606      	lsls	r6, r0, #24
 80071f6:	f101 0304 	add.w	r3, r1, #4
 80071fa:	d50a      	bpl.n	8007212 <_printf_i+0xce>
 80071fc:	680e      	ldr	r6, [r1, #0]
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	2e00      	cmp	r6, #0
 8007202:	da03      	bge.n	800720c <_printf_i+0xc8>
 8007204:	232d      	movs	r3, #45	; 0x2d
 8007206:	4276      	negs	r6, r6
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720c:	485e      	ldr	r0, [pc, #376]	; (8007388 <_printf_i+0x244>)
 800720e:	230a      	movs	r3, #10
 8007210:	e019      	b.n	8007246 <_printf_i+0x102>
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	f010 0f40 	tst.w	r0, #64	; 0x40
 800721a:	bf18      	it	ne
 800721c:	b236      	sxthne	r6, r6
 800721e:	e7ef      	b.n	8007200 <_printf_i+0xbc>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	6029      	str	r1, [r5, #0]
 8007228:	0601      	lsls	r1, r0, #24
 800722a:	d501      	bpl.n	8007230 <_printf_i+0xec>
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	e002      	b.n	8007236 <_printf_i+0xf2>
 8007230:	0646      	lsls	r6, r0, #25
 8007232:	d5fb      	bpl.n	800722c <_printf_i+0xe8>
 8007234:	881e      	ldrh	r6, [r3, #0]
 8007236:	4854      	ldr	r0, [pc, #336]	; (8007388 <_printf_i+0x244>)
 8007238:	2f6f      	cmp	r7, #111	; 0x6f
 800723a:	bf0c      	ite	eq
 800723c:	2308      	moveq	r3, #8
 800723e:	230a      	movne	r3, #10
 8007240:	2100      	movs	r1, #0
 8007242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007246:	6865      	ldr	r5, [r4, #4]
 8007248:	60a5      	str	r5, [r4, #8]
 800724a:	2d00      	cmp	r5, #0
 800724c:	bfa2      	ittt	ge
 800724e:	6821      	ldrge	r1, [r4, #0]
 8007250:	f021 0104 	bicge.w	r1, r1, #4
 8007254:	6021      	strge	r1, [r4, #0]
 8007256:	b90e      	cbnz	r6, 800725c <_printf_i+0x118>
 8007258:	2d00      	cmp	r5, #0
 800725a:	d04d      	beq.n	80072f8 <_printf_i+0x1b4>
 800725c:	4615      	mov	r5, r2
 800725e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007262:	fb03 6711 	mls	r7, r3, r1, r6
 8007266:	5dc7      	ldrb	r7, [r0, r7]
 8007268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800726c:	4637      	mov	r7, r6
 800726e:	42bb      	cmp	r3, r7
 8007270:	460e      	mov	r6, r1
 8007272:	d9f4      	bls.n	800725e <_printf_i+0x11a>
 8007274:	2b08      	cmp	r3, #8
 8007276:	d10b      	bne.n	8007290 <_printf_i+0x14c>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	07de      	lsls	r6, r3, #31
 800727c:	d508      	bpl.n	8007290 <_printf_i+0x14c>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	6861      	ldr	r1, [r4, #4]
 8007282:	4299      	cmp	r1, r3
 8007284:	bfde      	ittt	le
 8007286:	2330      	movle	r3, #48	; 0x30
 8007288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800728c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007290:	1b52      	subs	r2, r2, r5
 8007292:	6122      	str	r2, [r4, #16]
 8007294:	f8cd a000 	str.w	sl, [sp]
 8007298:	464b      	mov	r3, r9
 800729a:	aa03      	add	r2, sp, #12
 800729c:	4621      	mov	r1, r4
 800729e:	4640      	mov	r0, r8
 80072a0:	f7ff fee2 	bl	8007068 <_printf_common>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d14c      	bne.n	8007342 <_printf_i+0x1fe>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b004      	add	sp, #16
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	4835      	ldr	r0, [pc, #212]	; (8007388 <_printf_i+0x244>)
 80072b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b8:	6829      	ldr	r1, [r5, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80072c0:	6029      	str	r1, [r5, #0]
 80072c2:	061d      	lsls	r5, r3, #24
 80072c4:	d514      	bpl.n	80072f0 <_printf_i+0x1ac>
 80072c6:	07df      	lsls	r7, r3, #31
 80072c8:	bf44      	itt	mi
 80072ca:	f043 0320 	orrmi.w	r3, r3, #32
 80072ce:	6023      	strmi	r3, [r4, #0]
 80072d0:	b91e      	cbnz	r6, 80072da <_printf_i+0x196>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f023 0320 	bic.w	r3, r3, #32
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	2310      	movs	r3, #16
 80072dc:	e7b0      	b.n	8007240 <_printf_i+0xfc>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f043 0320 	orr.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	2378      	movs	r3, #120	; 0x78
 80072e8:	4828      	ldr	r0, [pc, #160]	; (800738c <_printf_i+0x248>)
 80072ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ee:	e7e3      	b.n	80072b8 <_printf_i+0x174>
 80072f0:	0659      	lsls	r1, r3, #25
 80072f2:	bf48      	it	mi
 80072f4:	b2b6      	uxthmi	r6, r6
 80072f6:	e7e6      	b.n	80072c6 <_printf_i+0x182>
 80072f8:	4615      	mov	r5, r2
 80072fa:	e7bb      	b.n	8007274 <_printf_i+0x130>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	6826      	ldr	r6, [r4, #0]
 8007300:	6961      	ldr	r1, [r4, #20]
 8007302:	1d18      	adds	r0, r3, #4
 8007304:	6028      	str	r0, [r5, #0]
 8007306:	0635      	lsls	r5, r6, #24
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	d501      	bpl.n	8007310 <_printf_i+0x1cc>
 800730c:	6019      	str	r1, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0x1d2>
 8007310:	0670      	lsls	r0, r6, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0x1c8>
 8007314:	8019      	strh	r1, [r3, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	4615      	mov	r5, r2
 800731c:	e7ba      	b.n	8007294 <_printf_i+0x150>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	1d1a      	adds	r2, r3, #4
 8007322:	602a      	str	r2, [r5, #0]
 8007324:	681d      	ldr	r5, [r3, #0]
 8007326:	6862      	ldr	r2, [r4, #4]
 8007328:	2100      	movs	r1, #0
 800732a:	4628      	mov	r0, r5
 800732c:	f7f8 ff58 	bl	80001e0 <memchr>
 8007330:	b108      	cbz	r0, 8007336 <_printf_i+0x1f2>
 8007332:	1b40      	subs	r0, r0, r5
 8007334:	6060      	str	r0, [r4, #4]
 8007336:	6863      	ldr	r3, [r4, #4]
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	2300      	movs	r3, #0
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007340:	e7a8      	b.n	8007294 <_printf_i+0x150>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	462a      	mov	r2, r5
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	47d0      	blx	sl
 800734c:	3001      	adds	r0, #1
 800734e:	d0ab      	beq.n	80072a8 <_printf_i+0x164>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	079b      	lsls	r3, r3, #30
 8007354:	d413      	bmi.n	800737e <_printf_i+0x23a>
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	4298      	cmp	r0, r3
 800735c:	bfb8      	it	lt
 800735e:	4618      	movlt	r0, r3
 8007360:	e7a4      	b.n	80072ac <_printf_i+0x168>
 8007362:	2301      	movs	r3, #1
 8007364:	4632      	mov	r2, r6
 8007366:	4649      	mov	r1, r9
 8007368:	4640      	mov	r0, r8
 800736a:	47d0      	blx	sl
 800736c:	3001      	adds	r0, #1
 800736e:	d09b      	beq.n	80072a8 <_printf_i+0x164>
 8007370:	3501      	adds	r5, #1
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	1a5b      	subs	r3, r3, r1
 8007378:	42ab      	cmp	r3, r5
 800737a:	dcf2      	bgt.n	8007362 <_printf_i+0x21e>
 800737c:	e7eb      	b.n	8007356 <_printf_i+0x212>
 800737e:	2500      	movs	r5, #0
 8007380:	f104 0619 	add.w	r6, r4, #25
 8007384:	e7f5      	b.n	8007372 <_printf_i+0x22e>
 8007386:	bf00      	nop
 8007388:	080275d5 	.word	0x080275d5
 800738c:	080275e6 	.word	0x080275e6

08007390 <__retarget_lock_acquire_recursive>:
 8007390:	4770      	bx	lr

08007392 <__retarget_lock_release_recursive>:
 8007392:	4770      	bx	lr

08007394 <memcpy>:
 8007394:	440a      	add	r2, r1
 8007396:	4291      	cmp	r1, r2
 8007398:	f100 33ff 	add.w	r3, r0, #4294967295
 800739c:	d100      	bne.n	80073a0 <memcpy+0xc>
 800739e:	4770      	bx	lr
 80073a0:	b510      	push	{r4, lr}
 80073a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073aa:	4291      	cmp	r1, r2
 80073ac:	d1f9      	bne.n	80073a2 <memcpy+0xe>
 80073ae:	bd10      	pop	{r4, pc}

080073b0 <memmove>:
 80073b0:	4288      	cmp	r0, r1
 80073b2:	b510      	push	{r4, lr}
 80073b4:	eb01 0402 	add.w	r4, r1, r2
 80073b8:	d902      	bls.n	80073c0 <memmove+0x10>
 80073ba:	4284      	cmp	r4, r0
 80073bc:	4623      	mov	r3, r4
 80073be:	d807      	bhi.n	80073d0 <memmove+0x20>
 80073c0:	1e43      	subs	r3, r0, #1
 80073c2:	42a1      	cmp	r1, r4
 80073c4:	d008      	beq.n	80073d8 <memmove+0x28>
 80073c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ce:	e7f8      	b.n	80073c2 <memmove+0x12>
 80073d0:	4402      	add	r2, r0
 80073d2:	4601      	mov	r1, r0
 80073d4:	428a      	cmp	r2, r1
 80073d6:	d100      	bne.n	80073da <memmove+0x2a>
 80073d8:	bd10      	pop	{r4, pc}
 80073da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073e2:	e7f7      	b.n	80073d4 <memmove+0x24>

080073e4 <_malloc_usable_size_r>:
 80073e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e8:	1f18      	subs	r0, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfbc      	itt	lt
 80073ee:	580b      	ldrlt	r3, [r1, r0]
 80073f0:	18c0      	addlt	r0, r0, r3
 80073f2:	4770      	bx	lr

080073f4 <_init>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr

08007400 <_fini>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr
